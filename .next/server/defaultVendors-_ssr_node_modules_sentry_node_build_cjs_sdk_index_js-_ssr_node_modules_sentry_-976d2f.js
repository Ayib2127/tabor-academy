exports.id="defaultVendors-_ssr_node_modules_sentry_node_build_cjs_sdk_index_js-_ssr_node_modules_sentry_-976d2f",exports.ids=["defaultVendors-_ssr_node_modules_sentry_node_build_cjs_sdk_index_js-_ssr_node_modules_sentry_-976d2f"],exports.modules={"(ssr)/./node_modules/@sentry/node/build/cjs/sdk/api.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst module$1 = __webpack_require__(/*! ../utils/module.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/module.js\");\n\n/**\n * Returns a release dynamically from environment variables.\n */\n// eslint-disable-next-line complexity\nfunction getSentryRelease(fallback) {\n  // Always read first as Sentry takes this as precedence\n  if (process.env.SENTRY_RELEASE) {\n    return process.env.SENTRY_RELEASE;\n  }\n\n  // This supports the variable that sentry-webpack-plugin injects\n  if (core.GLOBAL_OBJ.SENTRY_RELEASE?.id) {\n    return core.GLOBAL_OBJ.SENTRY_RELEASE.id;\n  }\n\n  // This list is in approximate alpha order, separated into 3 categories:\n  // 1. Git providers\n  // 2. CI providers with specific environment variables (has the provider name in the variable name)\n  // 3. CI providers with generic environment variables (checked for last to prevent possible false positives)\n\n  const possibleReleaseNameOfGitProvider =\n    // GitHub Actions - https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables\n    process.env['GITHUB_SHA'] ||\n    // GitLab CI - https://docs.gitlab.com/ee/ci/variables/predefined_variables.html\n    process.env['CI_MERGE_REQUEST_SOURCE_BRANCH_SHA'] ||\n    process.env['CI_BUILD_REF'] ||\n    process.env['CI_COMMIT_SHA'] ||\n    // Bitbucket - https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/\n    process.env['BITBUCKET_COMMIT'];\n\n  const possibleReleaseNameOfCiProvidersWithSpecificEnvVar =\n    // AppVeyor - https://www.appveyor.com/docs/environment-variables/\n    process.env['APPVEYOR_PULL_REQUEST_HEAD_COMMIT'] ||\n    process.env['APPVEYOR_REPO_COMMIT'] ||\n    // AWS CodeBuild - https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html\n    process.env['CODEBUILD_RESOLVED_SOURCE_VERSION'] ||\n    // AWS Amplify - https://docs.aws.amazon.com/amplify/latest/userguide/environment-variables.html\n    process.env['AWS_COMMIT_ID'] ||\n    // Azure Pipelines - https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml\n    process.env['BUILD_SOURCEVERSION'] ||\n    // Bitrise - https://devcenter.bitrise.io/builds/available-environment-variables/\n    process.env['GIT_CLONE_COMMIT_HASH'] ||\n    // Buddy CI - https://buddy.works/docs/pipelines/environment-variables#default-environment-variables\n    process.env['BUDDY_EXECUTION_REVISION'] ||\n    // Builtkite - https://buildkite.com/docs/pipelines/environment-variables\n    process.env['BUILDKITE_COMMIT'] ||\n    // CircleCI - https://circleci.com/docs/variables/\n    process.env['CIRCLE_SHA1'] ||\n    // Cirrus CI - https://cirrus-ci.org/guide/writing-tasks/#environment-variables\n    process.env['CIRRUS_CHANGE_IN_REPO'] ||\n    // Codefresh - https://codefresh.io/docs/docs/codefresh-yaml/variables/\n    process.env['CF_REVISION'] ||\n    // Codemagic - https://docs.codemagic.io/yaml-basic-configuration/environment-variables/\n    process.env['CM_COMMIT'] ||\n    // Cloudflare Pages - https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables\n    process.env['CF_PAGES_COMMIT_SHA'] ||\n    // Drone - https://docs.drone.io/pipeline/environment/reference/\n    process.env['DRONE_COMMIT_SHA'] ||\n    // Flightcontrol - https://www.flightcontrol.dev/docs/guides/flightcontrol/environment-variables#built-in-environment-variables\n    process.env['FC_GIT_COMMIT_SHA'] ||\n    // Heroku #1 https://devcenter.heroku.com/articles/heroku-ci\n    process.env['HEROKU_TEST_RUN_COMMIT_VERSION'] ||\n    // Heroku #2 https://docs.sentry.io/product/integrations/deployment/heroku/#configure-releases\n    process.env['HEROKU_SLUG_COMMIT'] ||\n    // Railway - https://docs.railway.app/reference/variables#git-variables\n    process.env['RAILWAY_GIT_COMMIT_SHA'] ||\n    // Render - https://render.com/docs/environment-variables\n    process.env['RENDER_GIT_COMMIT'] ||\n    // Semaphore CI - https://docs.semaphoreci.com/ci-cd-environment/environment-variables\n    process.env['SEMAPHORE_GIT_SHA'] ||\n    // TravisCI - https://docs.travis-ci.com/user/environment-variables/#default-environment-variables\n    process.env['TRAVIS_PULL_REQUEST_SHA'] ||\n    // Vercel - https://vercel.com/docs/v2/build-step#system-environment-variables\n    process.env['VERCEL_GIT_COMMIT_SHA'] ||\n    process.env['VERCEL_GITHUB_COMMIT_SHA'] ||\n    process.env['VERCEL_GITLAB_COMMIT_SHA'] ||\n    process.env['VERCEL_BITBUCKET_COMMIT_SHA'] ||\n    // Zeit (now known as Vercel)\n    process.env['ZEIT_GITHUB_COMMIT_SHA'] ||\n    process.env['ZEIT_GITLAB_COMMIT_SHA'] ||\n    process.env['ZEIT_BITBUCKET_COMMIT_SHA'];\n\n  const possibleReleaseNameOfCiProvidersWithGenericEnvVar =\n    // CloudBees CodeShip - https://docs.cloudbees.com/docs/cloudbees-codeship/latest/pro-builds-and-configuration/environment-variables\n    process.env['CI_COMMIT_ID'] ||\n    // Coolify - https://coolify.io/docs/knowledge-base/environment-variables\n    process.env['SOURCE_COMMIT'] ||\n    // Heroku #3 https://devcenter.heroku.com/changelog-items/630\n    process.env['SOURCE_VERSION'] ||\n    // Jenkins - https://plugins.jenkins.io/git/#environment-variables\n    process.env['GIT_COMMIT'] ||\n    // Netlify - https://docs.netlify.com/configure-builds/environment-variables/#build-metadata\n    process.env['COMMIT_REF'] ||\n    // TeamCity - https://www.jetbrains.com/help/teamcity/predefined-build-parameters.html\n    process.env['BUILD_VCS_NUMBER'] ||\n    // Woodpecker CI - https://woodpecker-ci.org/docs/usage/environment\n    process.env['CI_COMMIT_SHA'];\n\n  return (\n    possibleReleaseNameOfGitProvider ||\n    possibleReleaseNameOfCiProvidersWithSpecificEnvVar ||\n    possibleReleaseNameOfCiProvidersWithGenericEnvVar ||\n    fallback\n  );\n}\n\n/** Node.js stack parser */\nconst defaultStackParser = core.createStackParser(core.nodeStackLineParser(module$1.createGetModuleFromFilename()));\n\nexports.defaultStackParser = defaultStackParser;\nexports.getSentryRelease = getSentryRelease;\n//# sourceMappingURL=api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/sdk/api.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/sdk/client.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst os = __webpack_require__(/*! node:os */ \"node:os\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(ssr)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst worker_threads = __webpack_require__(/*! worker_threads */ \"worker_threads\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst DEFAULT_CLIENT_REPORT_FLUSH_INTERVAL_MS = 60000; // 60s was chosen arbitrarily\n\n/** A client for using Sentry with Node & OpenTelemetry. */\nclass NodeClient extends core.ServerRuntimeClient {\n\n   constructor(options) {\n    const serverName =\n      options.includeServerName === false\n        ? undefined\n        : options.serverName || global.process.env.SENTRY_NAME || os.hostname();\n\n    const clientOptions = {\n      ...options,\n      platform: 'node',\n      runtime: { name: 'node', version: global.process.version },\n      serverName,\n    };\n\n    if (options.openTelemetryInstrumentations) {\n      instrumentation.registerInstrumentations({\n        instrumentations: options.openTelemetryInstrumentations,\n      });\n    }\n\n    core.applySdkMetadata(clientOptions, 'node');\n\n    core.logger.log(\n      `Initializing Sentry: process: ${process.pid}, thread: ${worker_threads.isMainThread ? 'main' : `worker-${worker_threads.threadId}`}.`,\n    );\n\n    super(clientOptions);\n\n    if (this.getOptions()._experiments?.enableLogs) {\n      this._logOnExitFlushListener = () => {\n        core._INTERNAL_flushLogsBuffer(this);\n      };\n\n      if (serverName) {\n        this.on('beforeCaptureLog', log => {\n          log.attributes = {\n            ...log.attributes,\n            'server.address': serverName,\n          };\n        });\n      }\n\n      process.on('beforeExit', this._logOnExitFlushListener);\n    }\n  }\n\n  /** Get the OTEL tracer. */\n   get tracer() {\n    if (this._tracer) {\n      return this._tracer;\n    }\n\n    const name = '@sentry/node';\n    const version = core.SDK_VERSION;\n    const tracer = api.trace.getTracer(name, version);\n    this._tracer = tracer;\n\n    return tracer;\n  }\n\n  // Eslint ignore explanation: This is already documented in super.\n  // eslint-disable-next-line jsdoc/require-jsdoc\n   async flush(timeout) {\n    const provider = this.traceProvider;\n    const spanProcessor = provider?.activeSpanProcessor;\n\n    if (spanProcessor) {\n      await spanProcessor.forceFlush();\n    }\n\n    if (this.getOptions().sendClientReports) {\n      this._flushOutcomes();\n    }\n\n    return super.flush(timeout);\n  }\n\n  // Eslint ignore explanation: This is already documented in super.\n  // eslint-disable-next-line jsdoc/require-jsdoc\n   close(timeout) {\n    if (this._clientReportInterval) {\n      clearInterval(this._clientReportInterval);\n    }\n\n    if (this._clientReportOnExitFlushListener) {\n      process.off('beforeExit', this._clientReportOnExitFlushListener);\n    }\n\n    if (this._logOnExitFlushListener) {\n      process.off('beforeExit', this._logOnExitFlushListener);\n    }\n\n    return super.close(timeout);\n  }\n\n  /**\n   * Will start tracking client reports for this client.\n   *\n   * NOTICE: This method will create an interval that is periodically called and attach a `process.on('beforeExit')`\n   * hook. To clean up these resources, call `.close()` when you no longer intend to use the client. Not doing so will\n   * result in a memory leak.\n   */\n  // The reason client reports need to be manually activated with this method instead of just enabling them in a\n  // constructor, is that if users periodically and unboundedly create new clients, we will create more and more\n  // intervals and beforeExit listeners, thus leaking memory. In these situations, users are required to call\n  // `client.close()` in order to dispose of the acquired resources.\n  // We assume that calling this method in Sentry.init() is a sensible default, because calling Sentry.init() over and\n  // over again would also result in memory leaks.\n  // Note: We have experimented with using `FinalizationRegisty` to clear the interval when the client is garbage\n  // collected, but it did not work, because the cleanup function never got called.\n   startClientReportTracking() {\n    const clientOptions = this.getOptions();\n    if (clientOptions.sendClientReports) {\n      this._clientReportOnExitFlushListener = () => {\n        this._flushOutcomes();\n      };\n\n      this._clientReportInterval = setInterval(() => {\n        debugBuild.DEBUG_BUILD && core.logger.log('Flushing client reports based on interval.');\n        this._flushOutcomes();\n      }, clientOptions.clientReportFlushInterval ?? DEFAULT_CLIENT_REPORT_FLUSH_INTERVAL_MS)\n        // Unref is critical for not preventing the process from exiting because the interval is active.\n        .unref();\n\n      process.on('beforeExit', this._clientReportOnExitFlushListener);\n    }\n  }\n\n  /** Custom implementation for OTEL, so we can handle scope-span linking. */\n   _getTraceInfoFromScope(\n    scope,\n  ) {\n    if (!scope) {\n      return [undefined, undefined];\n    }\n\n    return opentelemetry.getTraceContextForScope(this, scope);\n  }\n}\n\nexports.NodeClient = NodeClient;\n//# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9zZGsvY2xpZW50LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLFdBQVcsbUJBQU8sQ0FBQyx3QkFBUztBQUM1QixZQUFZLG1CQUFPLENBQUMsc0ZBQW9CO0FBQ3hDLHdCQUF3QixtQkFBTyxDQUFDLDhHQUFnQztBQUNoRSxhQUFhLG1CQUFPLENBQUMsb0dBQWM7QUFDbkMsc0JBQXNCLG1CQUFPLENBQUMsNEZBQXVCO0FBQ3JELHVCQUF1QixtQkFBTyxDQUFDLHNDQUFnQjtBQUMvQyxtQkFBbUIsbUJBQU8sQ0FBQyxxRkFBbUI7O0FBRTlDLHVEQUF1RDs7QUFFdkQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiwrQ0FBK0M7QUFDaEU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7O0FBRUE7QUFDQSx1Q0FBdUMsWUFBWSxZQUFZLGlEQUFpRCx3QkFBd0IsRUFBRTtBQUMxSTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjtBQUNsQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFwxXFxEb3dubG9hZHNcXHRhYm9yQWNhZGVteVVwZGF0ZWRcXHRhYm9yLWFjYWRlbXlcXG5vZGVfbW9kdWxlc1xcQHNlbnRyeVxcbm9kZVxcYnVpbGRcXGNqc1xcc2RrXFxjbGllbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IG9zID0gcmVxdWlyZSgnbm9kZTpvcycpO1xuY29uc3QgYXBpID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvYXBpJyk7XG5jb25zdCBpbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24nKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IG9wZW50ZWxlbWV0cnkgPSByZXF1aXJlKCdAc2VudHJ5L29wZW50ZWxlbWV0cnknKTtcbmNvbnN0IHdvcmtlcl90aHJlYWRzID0gcmVxdWlyZSgnd29ya2VyX3RocmVhZHMnKTtcbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuLi9kZWJ1Zy1idWlsZC5qcycpO1xuXG5jb25zdCBERUZBVUxUX0NMSUVOVF9SRVBPUlRfRkxVU0hfSU5URVJWQUxfTVMgPSA2MDAwMDsgLy8gNjBzIHdhcyBjaG9zZW4gYXJiaXRyYXJpbHlcblxuLyoqIEEgY2xpZW50IGZvciB1c2luZyBTZW50cnkgd2l0aCBOb2RlICYgT3BlblRlbGVtZXRyeS4gKi9cbmNsYXNzIE5vZGVDbGllbnQgZXh0ZW5kcyBjb3JlLlNlcnZlclJ1bnRpbWVDbGllbnQge1xuXG4gICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgY29uc3Qgc2VydmVyTmFtZSA9XG4gICAgICBvcHRpb25zLmluY2x1ZGVTZXJ2ZXJOYW1lID09PSBmYWxzZVxuICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICA6IG9wdGlvbnMuc2VydmVyTmFtZSB8fCBnbG9iYWwucHJvY2Vzcy5lbnYuU0VOVFJZX05BTUUgfHwgb3MuaG9zdG5hbWUoKTtcblxuICAgIGNvbnN0IGNsaWVudE9wdGlvbnMgPSB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgcGxhdGZvcm06ICdub2RlJyxcbiAgICAgIHJ1bnRpbWU6IHsgbmFtZTogJ25vZGUnLCB2ZXJzaW9uOiBnbG9iYWwucHJvY2Vzcy52ZXJzaW9uIH0sXG4gICAgICBzZXJ2ZXJOYW1lLFxuICAgIH07XG5cbiAgICBpZiAob3B0aW9ucy5vcGVuVGVsZW1ldHJ5SW5zdHJ1bWVudGF0aW9ucykge1xuICAgICAgaW5zdHJ1bWVudGF0aW9uLnJlZ2lzdGVySW5zdHJ1bWVudGF0aW9ucyh7XG4gICAgICAgIGluc3RydW1lbnRhdGlvbnM6IG9wdGlvbnMub3BlblRlbGVtZXRyeUluc3RydW1lbnRhdGlvbnMsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb3JlLmFwcGx5U2RrTWV0YWRhdGEoY2xpZW50T3B0aW9ucywgJ25vZGUnKTtcblxuICAgIGNvcmUubG9nZ2VyLmxvZyhcbiAgICAgIGBJbml0aWFsaXppbmcgU2VudHJ5OiBwcm9jZXNzOiAke3Byb2Nlc3MucGlkfSwgdGhyZWFkOiAke3dvcmtlcl90aHJlYWRzLmlzTWFpblRocmVhZCA/ICdtYWluJyA6IGB3b3JrZXItJHt3b3JrZXJfdGhyZWFkcy50aHJlYWRJZH1gfS5gLFxuICAgICk7XG5cbiAgICBzdXBlcihjbGllbnRPcHRpb25zKTtcblxuICAgIGlmICh0aGlzLmdldE9wdGlvbnMoKS5fZXhwZXJpbWVudHM/LmVuYWJsZUxvZ3MpIHtcbiAgICAgIHRoaXMuX2xvZ09uRXhpdEZsdXNoTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICAgIGNvcmUuX0lOVEVSTkFMX2ZsdXNoTG9nc0J1ZmZlcih0aGlzKTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChzZXJ2ZXJOYW1lKSB7XG4gICAgICAgIHRoaXMub24oJ2JlZm9yZUNhcHR1cmVMb2cnLCBsb2cgPT4ge1xuICAgICAgICAgIGxvZy5hdHRyaWJ1dGVzID0ge1xuICAgICAgICAgICAgLi4ubG9nLmF0dHJpYnV0ZXMsXG4gICAgICAgICAgICAnc2VydmVyLmFkZHJlc3MnOiBzZXJ2ZXJOYW1lLFxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBwcm9jZXNzLm9uKCdiZWZvcmVFeGl0JywgdGhpcy5fbG9nT25FeGl0Rmx1c2hMaXN0ZW5lcik7XG4gICAgfVxuICB9XG5cbiAgLyoqIEdldCB0aGUgT1RFTCB0cmFjZXIuICovXG4gICBnZXQgdHJhY2VyKCkge1xuICAgIGlmICh0aGlzLl90cmFjZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLl90cmFjZXI7XG4gICAgfVxuXG4gICAgY29uc3QgbmFtZSA9ICdAc2VudHJ5L25vZGUnO1xuICAgIGNvbnN0IHZlcnNpb24gPSBjb3JlLlNES19WRVJTSU9OO1xuICAgIGNvbnN0IHRyYWNlciA9IGFwaS50cmFjZS5nZXRUcmFjZXIobmFtZSwgdmVyc2lvbik7XG4gICAgdGhpcy5fdHJhY2VyID0gdHJhY2VyO1xuXG4gICAgcmV0dXJuIHRyYWNlcjtcbiAgfVxuXG4gIC8vIEVzbGludCBpZ25vcmUgZXhwbGFuYXRpb246IFRoaXMgaXMgYWxyZWFkeSBkb2N1bWVudGVkIGluIHN1cGVyLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganNkb2MvcmVxdWlyZS1qc2RvY1xuICAgYXN5bmMgZmx1c2godGltZW91dCkge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy50cmFjZVByb3ZpZGVyO1xuICAgIGNvbnN0IHNwYW5Qcm9jZXNzb3IgPSBwcm92aWRlcj8uYWN0aXZlU3BhblByb2Nlc3NvcjtcblxuICAgIGlmIChzcGFuUHJvY2Vzc29yKSB7XG4gICAgICBhd2FpdCBzcGFuUHJvY2Vzc29yLmZvcmNlRmx1c2goKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5nZXRPcHRpb25zKCkuc2VuZENsaWVudFJlcG9ydHMpIHtcbiAgICAgIHRoaXMuX2ZsdXNoT3V0Y29tZXMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VwZXIuZmx1c2godGltZW91dCk7XG4gIH1cblxuICAvLyBFc2xpbnQgaWdub3JlIGV4cGxhbmF0aW9uOiBUaGlzIGlzIGFscmVhZHkgZG9jdW1lbnRlZCBpbiBzdXBlci5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcbiAgIGNsb3NlKHRpbWVvdXQpIHtcbiAgICBpZiAodGhpcy5fY2xpZW50UmVwb3J0SW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5fY2xpZW50UmVwb3J0SW50ZXJ2YWwpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9jbGllbnRSZXBvcnRPbkV4aXRGbHVzaExpc3RlbmVyKSB7XG4gICAgICBwcm9jZXNzLm9mZignYmVmb3JlRXhpdCcsIHRoaXMuX2NsaWVudFJlcG9ydE9uRXhpdEZsdXNoTGlzdGVuZXIpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9sb2dPbkV4aXRGbHVzaExpc3RlbmVyKSB7XG4gICAgICBwcm9jZXNzLm9mZignYmVmb3JlRXhpdCcsIHRoaXMuX2xvZ09uRXhpdEZsdXNoTGlzdGVuZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBzdXBlci5jbG9zZSh0aW1lb3V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaWxsIHN0YXJ0IHRyYWNraW5nIGNsaWVudCByZXBvcnRzIGZvciB0aGlzIGNsaWVudC5cbiAgICpcbiAgICogTk9USUNFOiBUaGlzIG1ldGhvZCB3aWxsIGNyZWF0ZSBhbiBpbnRlcnZhbCB0aGF0IGlzIHBlcmlvZGljYWxseSBjYWxsZWQgYW5kIGF0dGFjaCBhIGBwcm9jZXNzLm9uKCdiZWZvcmVFeGl0JylgXG4gICAqIGhvb2suIFRvIGNsZWFuIHVwIHRoZXNlIHJlc291cmNlcywgY2FsbCBgLmNsb3NlKClgIHdoZW4geW91IG5vIGxvbmdlciBpbnRlbmQgdG8gdXNlIHRoZSBjbGllbnQuIE5vdCBkb2luZyBzbyB3aWxsXG4gICAqIHJlc3VsdCBpbiBhIG1lbW9yeSBsZWFrLlxuICAgKi9cbiAgLy8gVGhlIHJlYXNvbiBjbGllbnQgcmVwb3J0cyBuZWVkIHRvIGJlIG1hbnVhbGx5IGFjdGl2YXRlZCB3aXRoIHRoaXMgbWV0aG9kIGluc3RlYWQgb2YganVzdCBlbmFibGluZyB0aGVtIGluIGFcbiAgLy8gY29uc3RydWN0b3IsIGlzIHRoYXQgaWYgdXNlcnMgcGVyaW9kaWNhbGx5IGFuZCB1bmJvdW5kZWRseSBjcmVhdGUgbmV3IGNsaWVudHMsIHdlIHdpbGwgY3JlYXRlIG1vcmUgYW5kIG1vcmVcbiAgLy8gaW50ZXJ2YWxzIGFuZCBiZWZvcmVFeGl0IGxpc3RlbmVycywgdGh1cyBsZWFraW5nIG1lbW9yeS4gSW4gdGhlc2Ugc2l0dWF0aW9ucywgdXNlcnMgYXJlIHJlcXVpcmVkIHRvIGNhbGxcbiAgLy8gYGNsaWVudC5jbG9zZSgpYCBpbiBvcmRlciB0byBkaXNwb3NlIG9mIHRoZSBhY3F1aXJlZCByZXNvdXJjZXMuXG4gIC8vIFdlIGFzc3VtZSB0aGF0IGNhbGxpbmcgdGhpcyBtZXRob2QgaW4gU2VudHJ5LmluaXQoKSBpcyBhIHNlbnNpYmxlIGRlZmF1bHQsIGJlY2F1c2UgY2FsbGluZyBTZW50cnkuaW5pdCgpIG92ZXIgYW5kXG4gIC8vIG92ZXIgYWdhaW4gd291bGQgYWxzbyByZXN1bHQgaW4gbWVtb3J5IGxlYWtzLlxuICAvLyBOb3RlOiBXZSBoYXZlIGV4cGVyaW1lbnRlZCB3aXRoIHVzaW5nIGBGaW5hbGl6YXRpb25SZWdpc3R5YCB0byBjbGVhciB0aGUgaW50ZXJ2YWwgd2hlbiB0aGUgY2xpZW50IGlzIGdhcmJhZ2VcbiAgLy8gY29sbGVjdGVkLCBidXQgaXQgZGlkIG5vdCB3b3JrLCBiZWNhdXNlIHRoZSBjbGVhbnVwIGZ1bmN0aW9uIG5ldmVyIGdvdCBjYWxsZWQuXG4gICBzdGFydENsaWVudFJlcG9ydFRyYWNraW5nKCkge1xuICAgIGNvbnN0IGNsaWVudE9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcbiAgICBpZiAoY2xpZW50T3B0aW9ucy5zZW5kQ2xpZW50UmVwb3J0cykge1xuICAgICAgdGhpcy5fY2xpZW50UmVwb3J0T25FeGl0Rmx1c2hMaXN0ZW5lciA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5fZmx1c2hPdXRjb21lcygpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5fY2xpZW50UmVwb3J0SW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgY29yZS5sb2dnZXIubG9nKCdGbHVzaGluZyBjbGllbnQgcmVwb3J0cyBiYXNlZCBvbiBpbnRlcnZhbC4nKTtcbiAgICAgICAgdGhpcy5fZmx1c2hPdXRjb21lcygpO1xuICAgICAgfSwgY2xpZW50T3B0aW9ucy5jbGllbnRSZXBvcnRGbHVzaEludGVydmFsID8/IERFRkFVTFRfQ0xJRU5UX1JFUE9SVF9GTFVTSF9JTlRFUlZBTF9NUylcbiAgICAgICAgLy8gVW5yZWYgaXMgY3JpdGljYWwgZm9yIG5vdCBwcmV2ZW50aW5nIHRoZSBwcm9jZXNzIGZyb20gZXhpdGluZyBiZWNhdXNlIHRoZSBpbnRlcnZhbCBpcyBhY3RpdmUuXG4gICAgICAgIC51bnJlZigpO1xuXG4gICAgICBwcm9jZXNzLm9uKCdiZWZvcmVFeGl0JywgdGhpcy5fY2xpZW50UmVwb3J0T25FeGl0Rmx1c2hMaXN0ZW5lcik7XG4gICAgfVxuICB9XG5cbiAgLyoqIEN1c3RvbSBpbXBsZW1lbnRhdGlvbiBmb3IgT1RFTCwgc28gd2UgY2FuIGhhbmRsZSBzY29wZS1zcGFuIGxpbmtpbmcuICovXG4gICBfZ2V0VHJhY2VJbmZvRnJvbVNjb3BlKFxuICAgIHNjb3BlLFxuICApIHtcbiAgICBpZiAoIXNjb3BlKSB7XG4gICAgICByZXR1cm4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkXTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3BlbnRlbGVtZXRyeS5nZXRUcmFjZUNvbnRleHRGb3JTY29wZSh0aGlzLCBzY29wZSk7XG4gIH1cbn1cblxuZXhwb3J0cy5Ob2RlQ2xpZW50ID0gTm9kZUNsaWVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNsaWVudC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/sdk/client.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/sdk/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('Object.defineProperty(exports, Symbol.toStringTag, { value: \'Module\' });\n\nconst core = __webpack_require__(/*! @sentry/core */ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ "(ssr)/./node_modules/@sentry/opentelemetry/build/cjs/index.js");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/debug-build.js");\nconst childProcess = __webpack_require__(/*! ../integrations/childProcess.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/childProcess.js");\nconst context = __webpack_require__(/*! ../integrations/context.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/context.js");\nconst contextlines = __webpack_require__(/*! ../integrations/contextlines.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/contextlines.js");\nconst index$1 = __webpack_require__(/*! ../integrations/http/index.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/http/index.js");\nconst index$3 = __webpack_require__(/*! ../integrations/local-variables/index.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js");\nconst modules = __webpack_require__(/*! ../integrations/modules.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/modules.js");\nconst index$2 = __webpack_require__(/*! ../integrations/node-fetch/index.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/node-fetch/index.js");\nconst onuncaughtexception = __webpack_require__(/*! ../integrations/onuncaughtexception.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js");\nconst onunhandledrejection = __webpack_require__(/*! ../integrations/onunhandledrejection.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js");\nconst processSession = __webpack_require__(/*! ../integrations/processSession.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/processSession.js");\nconst spotlight = __webpack_require__(/*! ../integrations/spotlight.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/spotlight.js");\nconst index = __webpack_require__(/*! ../integrations/tracing/index.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/index.js");\nconst http = __webpack_require__(/*! ../transports/http.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/transports/http.js");\nconst commonjs = __webpack_require__(/*! ../utils/commonjs.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/utils/commonjs.js");\nconst envToBool = __webpack_require__(/*! ../utils/envToBool.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/utils/envToBool.js");\nconst api = __webpack_require__(/*! ./api.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/sdk/api.js");\nconst client = __webpack_require__(/*! ./client.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/sdk/client.js");\nconst initOtel = __webpack_require__(/*! ./initOtel.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/sdk/initOtel.js");\n\n/**\n * Get default integrations, excluding performance.\n */\nfunction getDefaultIntegrationsWithoutPerformance() {\n  return [\n    // Common\n    // TODO(v10): Replace with `eventFiltersIntegration` once we remove the deprecated `inboundFiltersIntegration`\n    // eslint-disable-next-line deprecation/deprecation\n    core.inboundFiltersIntegration(),\n    core.functionToStringIntegration(),\n    core.linkedErrorsIntegration(),\n    core.requestDataIntegration(),\n    // Native Wrappers\n    core.consoleIntegration(),\n    index$1.httpIntegration(),\n    index$2.nativeNodeFetchIntegration(),\n    // Global Handlers\n    onuncaughtexception.onUncaughtExceptionIntegration(),\n    onunhandledrejection.onUnhandledRejectionIntegration(),\n    // Event Info\n    contextlines.contextLinesIntegration(),\n    index$3.localVariablesIntegration(),\n    context.nodeContextIntegration(),\n    childProcess.childProcessIntegration(),\n    processSession.processSessionIntegration(),\n    modules.modulesIntegration(),\n  ];\n}\n\n/** Get the default integrations for the Node SDK. */\nfunction getDefaultIntegrations(options) {\n  return [\n    ...getDefaultIntegrationsWithoutPerformance(),\n    // We only add performance integrations if tracing is enabled\n    // Note that this means that without tracing enabled, e.g. `expressIntegration()` will not be added\n    // This means that generally request isolation will work (because that is done by httpIntegration)\n    // But `transactionName` will not be set automatically\n    ...(core.hasSpansEnabled(options) ? index.getAutoPerformanceIntegrations() : []),\n  ];\n}\n\n/**\n * Initialize Sentry for Node.\n */\nfunction init(options = {}) {\n  return _init(options, getDefaultIntegrations);\n}\n\n/**\n * Initialize Sentry for Node, without any integrations added by default.\n */\nfunction initWithoutDefaultIntegrations(options = {}) {\n  return _init(options, () => []);\n}\n\n/**\n * Initialize Sentry for Node, without performance instrumentation.\n */\nfunction _init(\n  _options = {},\n  getDefaultIntegrationsImpl,\n) {\n  const options = getClientOptions(_options, getDefaultIntegrationsImpl);\n\n  if (options.debug === true) {\n    if (debugBuild.DEBUG_BUILD) {\n      core.logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      core.consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn(\'[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.\');\n      });\n    }\n  }\n\n  if (!commonjs.isCjs() && options.registerEsmLoaderHooks !== false) {\n    initOtel.maybeInitializeEsmLoader();\n  }\n\n  opentelemetry.setOpenTelemetryContextAsyncContextStrategy();\n\n  const scope = core.getCurrentScope();\n  scope.update(options.initialScope);\n\n  if (options.spotlight && !options.integrations.some(({ name }) => name === spotlight.INTEGRATION_NAME)) {\n    options.integrations.push(\n      spotlight.spotlightIntegration({\n        sidecarUrl: typeof options.spotlight === \'string\' ? options.spotlight : undefined,\n      }),\n    );\n  }\n\n  const client$1 = new client.NodeClient(options);\n  // The client is on the current scope, from where it generally is inherited\n  core.getCurrentScope().setClient(client$1);\n\n  client$1.init();\n\n  core.logger.log(`Running in ${commonjs.isCjs() ? \'CommonJS\' : \'ESM\'} mode.`);\n\n  client$1.startClientReportTracking();\n\n  updateScopeFromEnvVariables();\n\n  // If users opt-out of this, they _have_ to set up OpenTelemetry themselves\n  // There is no way to use this SDK without OpenTelemetry!\n  if (!options.skipOpenTelemetrySetup) {\n    initOtel.initOpenTelemetry(client$1, {\n      spanProcessors: options.openTelemetrySpanProcessors,\n    });\n    validateOpenTelemetrySetup();\n  }\n\n  opentelemetry.enhanceDscWithOpenTelemetryRootSpanName(client$1);\n  opentelemetry.setupEventContextTrace(client$1);\n\n  return client$1;\n}\n\n/**\n * Validate that your OpenTelemetry setup is correct.\n */\nfunction validateOpenTelemetrySetup() {\n  if (!debugBuild.DEBUG_BUILD) {\n    return;\n  }\n\n  const setup = opentelemetry.openTelemetrySetupCheck();\n\n  const required = [\'SentryContextManager\', \'SentryPropagator\'];\n\n  if (core.hasSpansEnabled()) {\n    required.push(\'SentrySpanProcessor\');\n  }\n\n  for (const k of required) {\n    if (!setup.includes(k)) {\n      core.logger.error(\n        `You have to set up the ${k}. Without this, the OpenTelemetry & Sentry integration will not work properly.`,\n      );\n    }\n  }\n\n  if (!setup.includes(\'SentrySampler\')) {\n    core.logger.warn(\n      \'You have to set up the SentrySampler. Without this, the OpenTelemetry & Sentry integration may still work, but sample rates set for the Sentry SDK will not be respected. If you use a custom sampler, make sure to use `wrapSamplingDecision`.\',\n    );\n  }\n}\n\nfunction getClientOptions(\n  options,\n  getDefaultIntegrationsImpl,\n) {\n  const release = getRelease(options.release);\n  const spotlight =\n    options.spotlight ?? envToBool.envToBool(process.env.SENTRY_SPOTLIGHT, { strict: true }) ?? process.env.SENTRY_SPOTLIGHT;\n  const tracesSampleRate = getTracesSampleRate(options.tracesSampleRate);\n\n  const mergedOptions = {\n    ...options,\n    dsn: options.dsn ?? process.env.SENTRY_DSN,\n    environment: options.environment ?? process.env.SENTRY_ENVIRONMENT,\n    sendClientReports: options.sendClientReports ?? true,\n    transport: options.transport ?? http.makeNodeTransport,\n    stackParser: core.stackParserFromStackParserOptions(options.stackParser || api.defaultStackParser),\n    release,\n    tracesSampleRate,\n    spotlight,\n    debug: envToBool.envToBool(options.debug ?? process.env.SENTRY_DEBUG),\n  };\n\n  const integrations = options.integrations;\n  const defaultIntegrations = options.defaultIntegrations ?? getDefaultIntegrationsImpl(mergedOptions);\n\n  return {\n    ...mergedOptions,\n    integrations: core.getIntegrationsToSetup({\n      defaultIntegrations,\n      integrations,\n    }),\n  };\n}\n\nfunction getRelease(release) {\n  if (release !== undefined) {\n    return release;\n  }\n\n  const detectedRelease = api.getSentryRelease();\n  if (detectedRelease !== undefined) {\n    return detectedRelease;\n  }\n\n  return undefined;\n}\n\nfunction getTracesSampleRate(tracesSampleRate) {\n  if (tracesSampleRate !== undefined) {\n    return tracesSampleRate;\n  }\n\n  const sampleRateFromEnv = process.env.SENTRY_TRACES_SAMPLE_RATE;\n  if (!sampleRateFromEnv) {\n    return undefined;\n  }\n\n  const parsed = parseFloat(sampleRateFromEnv);\n  return isFinite(parsed) ? parsed : undefined;\n}\n\n/**\n * Update scope and propagation context based on environmental variables.\n *\n * See https://github.com/getsentry/rfcs/blob/main/text/0071-continue-trace-over-process-boundaries.md\n * for more details.\n */\nfunction updateScopeFromEnvVariables() {\n  if (envToBool.envToBool(process.env.SENTRY_USE_ENVIRONMENT) !== false) {\n    const sentryTraceEnv = process.env.SENTRY_TRACE;\n    const baggageEnv = process.env.SENTRY_BAGGAGE;\n    const propagationContext = core.propagationContextFromHeaders(sentryTraceEnv, baggageEnv);\n    core.getCurrentScope().setPropagationContext(propagationContext);\n  }\n}\n\nexports.getDefaultIntegrations = getDefaultIntegrations;\nexports.getDefaultIntegrationsWithoutPerformance = getDefaultIntegrationsWithoutPerformance;\nexports.init = init;\nexports.initWithoutDefaultIntegrations = initWithoutDefaultIntegrations;\nexports.validateOpenTelemetrySetup = validateOpenTelemetrySetup;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/sdk/index.js\n')},"(ssr)/./node_modules/@sentry/node/build/cjs/sdk/initOtel.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('Object.defineProperty(exports, Symbol.toStringTag, { value: \'Module\' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ "(ssr)/./node_modules/@opentelemetry/api/build/esm/index.js");\nconst resources = __webpack_require__(/*! @opentelemetry/resources */ "(ssr)/./node_modules/@opentelemetry/resources/build/esm/index.js");\nconst sdkTraceBase = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ "(ssr)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js");\nconst core = __webpack_require__(/*! @sentry/core */ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ "(ssr)/./node_modules/@sentry/opentelemetry/build/cjs/index.js");\nconst importInTheMiddle = __webpack_require__(/*! import-in-the-middle */ "import-in-the-middle");\nconst moduleModule = __webpack_require__(/*! module */ "module");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/debug-build.js");\nconst index = __webpack_require__(/*! ../integrations/tracing/index.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/index.js");\nconst contextManager = __webpack_require__(/*! ../otel/contextManager.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/otel/contextManager.js");\nconst commonjs = __webpack_require__(/*! ../utils/commonjs.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/utils/commonjs.js");\n\nvar _documentCurrentScript = typeof document !== \'undefined\' ? document.currentScript : null;\n// About 277h - this must fit into new Array(len)!\nconst MAX_MAX_SPAN_WAIT_DURATION = 1000000;\n\n/**\n * Initialize OpenTelemetry for Node.\n */\nfunction initOpenTelemetry(client, options = {}) {\n  if (client.getOptions().debug) {\n    setupOpenTelemetryLogger();\n  }\n\n  const provider = setupOtel(client, options);\n  client.traceProvider = provider;\n}\n\n/** Initialize the ESM loader. */\nfunction maybeInitializeEsmLoader() {\n  const [nodeMajor = 0, nodeMinor = 0] = process.versions.node.split(\'.\').map(Number);\n\n  // Register hook was added in v20.6.0 and v18.19.0\n  if (nodeMajor >= 21 || (nodeMajor === 20 && nodeMinor >= 6) || (nodeMajor === 18 && nodeMinor >= 19)) {\n    if (!core.GLOBAL_OBJ._sentryEsmLoaderHookRegistered) {\n      try {\n        const { addHookMessagePort } = importInTheMiddle.createAddHookMessageChannel();\n        // @ts-expect-error register is available in these versions\n        moduleModule.default.register(\'import-in-the-middle/hook.mjs\', (typeof document === \'undefined\' ? (__webpack_require__(/*! url */ "url").pathToFileURL)(__filename).href : (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === \'SCRIPT\' && _documentCurrentScript.src || new URL(\'sdk/initOtel.js\', document.baseURI).href)), {\n          data: { addHookMessagePort, include: [] },\n          transferList: [addHookMessagePort],\n        });\n      } catch (error) {\n        core.logger.warn(\'Failed to register ESM hook\', error);\n      }\n    }\n  } else {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[Sentry] You are using Node.js v${process.versions.node} in ESM mode ("import syntax"). The Sentry Node.js SDK is not compatible with ESM in Node.js versions before 18.19.0 or before 20.6.0. Please either build your application with CommonJS ("require() syntax"), or upgrade your Node.js version.`,\n      );\n    });\n  }\n}\n\n/**\n * Preload OpenTelemetry for Node.\n * This can be used to preload instrumentation early, but set up Sentry later.\n * By preloading the OTEL instrumentation wrapping still happens early enough that everything works.\n */\nfunction preloadOpenTelemetry(options = {}) {\n  const { debug } = options;\n\n  if (debug) {\n    core.logger.enable();\n    setupOpenTelemetryLogger();\n  }\n\n  if (!commonjs.isCjs()) {\n    maybeInitializeEsmLoader();\n  }\n\n  // These are all integrations that we need to pre-load to ensure they are set up before any other code runs\n  getPreloadMethods(options.integrations).forEach(fn => {\n    fn();\n\n    if (debug) {\n      core.logger.log(`[Sentry] Preloaded ${fn.id} instrumentation`);\n    }\n  });\n}\n\nfunction getPreloadMethods(integrationNames) {\n  const instruments = index.getOpenTelemetryInstrumentationToPreload();\n\n  if (!integrationNames) {\n    return instruments;\n  }\n\n  return instruments.filter(instrumentation => integrationNames.includes(instrumentation.id));\n}\n\n/** Just exported for tests. */\nfunction setupOtel(client, options = {}) {\n  // Create and configure NodeTracerProvider\n  const provider = new sdkTraceBase.BasicTracerProvider({\n    sampler: new opentelemetry.SentrySampler(client),\n    resource: new resources.Resource({\n      [semanticConventions.ATTR_SERVICE_NAME]: \'node\',\n      // eslint-disable-next-line deprecation/deprecation\n      [semanticConventions.SEMRESATTRS_SERVICE_NAMESPACE]: \'sentry\',\n      [semanticConventions.ATTR_SERVICE_VERSION]: core.SDK_VERSION,\n    }),\n    forceFlushTimeoutMillis: 500,\n    spanProcessors: [\n      new opentelemetry.SentrySpanProcessor({\n        timeout: _clampSpanProcessorTimeout(client.getOptions().maxSpanWaitDuration),\n      }),\n      ...(options.spanProcessors || []),\n    ],\n  });\n\n  // Register as globals\n  api.trace.setGlobalTracerProvider(provider);\n  api.propagation.setGlobalPropagator(new opentelemetry.SentryPropagator());\n  api.context.setGlobalContextManager(new contextManager.SentryContextManager());\n\n  return provider;\n}\n\n/** Just exported for tests. */\nfunction _clampSpanProcessorTimeout(maxSpanWaitDuration) {\n  if (maxSpanWaitDuration == null) {\n    return undefined;\n  }\n\n  // We guard for a max. value here, because we create an array with this length\n  // So if this value is too large, this would fail\n  if (maxSpanWaitDuration > MAX_MAX_SPAN_WAIT_DURATION) {\n    debugBuild.DEBUG_BUILD &&\n      core.logger.warn(`\\`maxSpanWaitDuration\\` is too high, using the maximum value of ${MAX_MAX_SPAN_WAIT_DURATION}`);\n    return MAX_MAX_SPAN_WAIT_DURATION;\n  } else if (maxSpanWaitDuration <= 0 || Number.isNaN(maxSpanWaitDuration)) {\n    debugBuild.DEBUG_BUILD && core.logger.warn(\'`maxSpanWaitDuration` must be a positive number, using default value instead.\');\n    return undefined;\n  }\n\n  return maxSpanWaitDuration;\n}\n\n/**\n * Setup the OTEL logger to use our own logger.\n */\nfunction setupOpenTelemetryLogger() {\n  const otelLogger = new Proxy(core.logger , {\n    get(target, prop, receiver) {\n      const actualProp = prop === \'verbose\' ? \'debug\' : prop;\n      return Reflect.get(target, actualProp, receiver);\n    },\n  });\n\n  // Disable diag, to ensure this works even if called multiple times\n  api.diag.disable();\n  api.diag.setLogger(otelLogger, api.DiagLogLevel.DEBUG);\n}\n\nexports._clampSpanProcessorTimeout = _clampSpanProcessorTimeout;\nexports.initOpenTelemetry = initOpenTelemetry;\nexports.maybeInitializeEsmLoader = maybeInitializeEsmLoader;\nexports.preloadOpenTelemetry = preloadOpenTelemetry;\nexports.setupOtel = setupOtel;\n//# sourceMappingURL=initOtel.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/sdk/initOtel.js\n')},"(ssr)/./node_modules/@sentry/node/build/cjs/transports/http.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\nconst https = __webpack_require__(/*! node:https */ \"node:https\");\nconst node_stream = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst node_zlib = __webpack_require__(/*! node:zlib */ \"node:zlib\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst index = __webpack_require__(/*! ../proxy/index.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/proxy/index.js\");\n\n// Estimated maximum size for reasonable standalone event\nconst GZIP_THRESHOLD = 1024 * 32;\n\n/**\n * Gets a stream from a Uint8Array or string\n * Readable.from is ideal but was added in node.js v12.3.0 and v10.17.0\n */\nfunction streamFromBody(body) {\n  return new node_stream.Readable({\n    read() {\n      this.push(body);\n      this.push(null);\n    },\n  });\n}\n\n/**\n * Creates a Transport that uses native the native 'http' and 'https' modules to send events to Sentry.\n */\nfunction makeNodeTransport(options) {\n  let urlSegments;\n\n  try {\n    urlSegments = new URL(options.url);\n  } catch (e) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[@sentry/node]: Invalid dsn or tunnel option, will not send any events. The tunnel option must be a full URL when used.',\n      );\n    });\n    return core.createTransport(options, () => Promise.resolve({}));\n  }\n\n  const isHttps = urlSegments.protocol === 'https:';\n\n  // Proxy prioritization: http => `options.proxy` | `process.env.http_proxy`\n  // Proxy prioritization: https => `options.proxy` | `process.env.https_proxy` | `process.env.http_proxy`\n  const proxy = applyNoProxyOption(\n    urlSegments,\n    options.proxy || (isHttps ? process.env.https_proxy : undefined) || process.env.http_proxy,\n  );\n\n  const nativeHttpModule = isHttps ? https : http;\n  const keepAlive = options.keepAlive === undefined ? false : options.keepAlive;\n\n  // TODO(v10): Evaluate if we can set keepAlive to true. This would involve testing for memory leaks in older node\n  // versions(>= 8) as they had memory leaks when using it: #2555\n  const agent = proxy\n    ? (new index.HttpsProxyAgent(proxy) )\n    : new nativeHttpModule.Agent({ keepAlive, maxSockets: 30, timeout: 2000 });\n\n  const requestExecutor = createRequestExecutor(options, options.httpModule ?? nativeHttpModule, agent);\n  return core.createTransport(options, requestExecutor);\n}\n\n/**\n * Honors the `no_proxy` env variable with the highest priority to allow for hosts exclusion.\n *\n * @param transportUrl The URL the transport intends to send events to.\n * @param proxy The client configured proxy.\n * @returns A proxy the transport should use.\n */\nfunction applyNoProxyOption(transportUrlSegments, proxy) {\n  const { no_proxy } = process.env;\n\n  const urlIsExemptFromProxy = no_proxy\n    ?.split(',')\n    .some(\n      exemption => transportUrlSegments.host.endsWith(exemption) || transportUrlSegments.hostname.endsWith(exemption),\n    );\n\n  if (urlIsExemptFromProxy) {\n    return undefined;\n  } else {\n    return proxy;\n  }\n}\n\n/**\n * Creates a RequestExecutor to be used with `createTransport`.\n */\nfunction createRequestExecutor(\n  options,\n  httpModule,\n  agent,\n) {\n  const { hostname, pathname, port, protocol, search } = new URL(options.url);\n  return function makeRequest(request) {\n    return new Promise((resolve, reject) => {\n      // This ensures we do not generate any spans in OpenTelemetry for the transport\n      core.suppressTracing(() => {\n        let body = streamFromBody(request.body);\n\n        const headers = { ...options.headers };\n\n        if (request.body.length > GZIP_THRESHOLD) {\n          headers['content-encoding'] = 'gzip';\n          body = body.pipe(node_zlib.createGzip());\n        }\n\n        const req = httpModule.request(\n          {\n            method: 'POST',\n            agent,\n            headers,\n            hostname,\n            path: `${pathname}${search}`,\n            port,\n            protocol,\n            ca: options.caCerts,\n          },\n          res => {\n            res.on('data', () => {\n              // Drain socket\n            });\n\n            res.on('end', () => {\n              // Drain socket\n            });\n\n            res.setEncoding('utf8');\n\n            // \"Key-value pairs of header names and values. Header names are lower-cased.\"\n            // https://nodejs.org/api/http.html#http_message_headers\n            const retryAfterHeader = res.headers['retry-after'] ?? null;\n            const rateLimitsHeader = res.headers['x-sentry-rate-limits'] ?? null;\n\n            resolve({\n              statusCode: res.statusCode,\n              headers: {\n                'retry-after': retryAfterHeader,\n                'x-sentry-rate-limits': Array.isArray(rateLimitsHeader)\n                  ? rateLimitsHeader[0] || null\n                  : rateLimitsHeader,\n              },\n            });\n          },\n        );\n\n        req.on('error', reject);\n        body.pipe(req);\n      });\n    });\n  };\n}\n\nexports.makeNodeTransport = makeNodeTransport;\n//# sourceMappingURL=http.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy90cmFuc3BvcnRzL2h0dHAuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLDRCQUFXO0FBQ2hDLGNBQWMsbUJBQU8sQ0FBQyw4QkFBWTtBQUNsQyxvQkFBb0IsbUJBQU8sQ0FBQyxnQ0FBYTtBQUN6QyxrQkFBa0IsbUJBQU8sQ0FBQyw0QkFBVztBQUNyQyxhQUFhLG1CQUFPLENBQUMsb0dBQWM7QUFDbkMsY0FBYyxtQkFBTyxDQUFDLHFGQUFtQjs7QUFFekM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLGlFQUFpRTtBQUNqRTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQywwQ0FBMEM7O0FBRTdFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxXQUFXOztBQUVyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLDZDQUE2QztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBCQUEwQjs7QUFFMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLFNBQVMsRUFBRSxPQUFPO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxhQUFhOztBQUViO0FBQ0E7QUFDQSxhQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLGFBQWE7QUFDYixXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTs7QUFFQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXHRyYW5zcG9ydHNcXGh0dHAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGh0dHAgPSByZXF1aXJlKCdub2RlOmh0dHAnKTtcbmNvbnN0IGh0dHBzID0gcmVxdWlyZSgnbm9kZTpodHRwcycpO1xuY29uc3Qgbm9kZV9zdHJlYW0gPSByZXF1aXJlKCdub2RlOnN0cmVhbScpO1xuY29uc3Qgbm9kZV96bGliID0gcmVxdWlyZSgnbm9kZTp6bGliJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbmRleCA9IHJlcXVpcmUoJy4uL3Byb3h5L2luZGV4LmpzJyk7XG5cbi8vIEVzdGltYXRlZCBtYXhpbXVtIHNpemUgZm9yIHJlYXNvbmFibGUgc3RhbmRhbG9uZSBldmVudFxuY29uc3QgR1pJUF9USFJFU0hPTEQgPSAxMDI0ICogMzI7XG5cbi8qKlxuICogR2V0cyBhIHN0cmVhbSBmcm9tIGEgVWludDhBcnJheSBvciBzdHJpbmdcbiAqIFJlYWRhYmxlLmZyb20gaXMgaWRlYWwgYnV0IHdhcyBhZGRlZCBpbiBub2RlLmpzIHYxMi4zLjAgYW5kIHYxMC4xNy4wXG4gKi9cbmZ1bmN0aW9uIHN0cmVhbUZyb21Cb2R5KGJvZHkpIHtcbiAgcmV0dXJuIG5ldyBub2RlX3N0cmVhbS5SZWFkYWJsZSh7XG4gICAgcmVhZCgpIHtcbiAgICAgIHRoaXMucHVzaChib2R5KTtcbiAgICAgIHRoaXMucHVzaChudWxsKTtcbiAgICB9LFxuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgVHJhbnNwb3J0IHRoYXQgdXNlcyBuYXRpdmUgdGhlIG5hdGl2ZSAnaHR0cCcgYW5kICdodHRwcycgbW9kdWxlcyB0byBzZW5kIGV2ZW50cyB0byBTZW50cnkuXG4gKi9cbmZ1bmN0aW9uIG1ha2VOb2RlVHJhbnNwb3J0KG9wdGlvbnMpIHtcbiAgbGV0IHVybFNlZ21lbnRzO1xuXG4gIHRyeSB7XG4gICAgdXJsU2VnbWVudHMgPSBuZXcgVVJMKG9wdGlvbnMudXJsKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvcmUuY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ1tAc2VudHJ5L25vZGVdOiBJbnZhbGlkIGRzbiBvciB0dW5uZWwgb3B0aW9uLCB3aWxsIG5vdCBzZW5kIGFueSBldmVudHMuIFRoZSB0dW5uZWwgb3B0aW9uIG11c3QgYmUgYSBmdWxsIFVSTCB3aGVuIHVzZWQuJyxcbiAgICAgICk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvcmUuY3JlYXRlVHJhbnNwb3J0KG9wdGlvbnMsICgpID0+IFByb21pc2UucmVzb2x2ZSh7fSkpO1xuICB9XG5cbiAgY29uc3QgaXNIdHRwcyA9IHVybFNlZ21lbnRzLnByb3RvY29sID09PSAnaHR0cHM6JztcblxuICAvLyBQcm94eSBwcmlvcml0aXphdGlvbjogaHR0cCA9PiBgb3B0aW9ucy5wcm94eWAgfCBgcHJvY2Vzcy5lbnYuaHR0cF9wcm94eWBcbiAgLy8gUHJveHkgcHJpb3JpdGl6YXRpb246IGh0dHBzID0+IGBvcHRpb25zLnByb3h5YCB8IGBwcm9jZXNzLmVudi5odHRwc19wcm94eWAgfCBgcHJvY2Vzcy5lbnYuaHR0cF9wcm94eWBcbiAgY29uc3QgcHJveHkgPSBhcHBseU5vUHJveHlPcHRpb24oXG4gICAgdXJsU2VnbWVudHMsXG4gICAgb3B0aW9ucy5wcm94eSB8fCAoaXNIdHRwcyA/IHByb2Nlc3MuZW52Lmh0dHBzX3Byb3h5IDogdW5kZWZpbmVkKSB8fCBwcm9jZXNzLmVudi5odHRwX3Byb3h5LFxuICApO1xuXG4gIGNvbnN0IG5hdGl2ZUh0dHBNb2R1bGUgPSBpc0h0dHBzID8gaHR0cHMgOiBodHRwO1xuICBjb25zdCBrZWVwQWxpdmUgPSBvcHRpb25zLmtlZXBBbGl2ZSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBvcHRpb25zLmtlZXBBbGl2ZTtcblxuICAvLyBUT0RPKHYxMCk6IEV2YWx1YXRlIGlmIHdlIGNhbiBzZXQga2VlcEFsaXZlIHRvIHRydWUuIFRoaXMgd291bGQgaW52b2x2ZSB0ZXN0aW5nIGZvciBtZW1vcnkgbGVha3MgaW4gb2xkZXIgbm9kZVxuICAvLyB2ZXJzaW9ucyg+PSA4KSBhcyB0aGV5IGhhZCBtZW1vcnkgbGVha3Mgd2hlbiB1c2luZyBpdDogIzI1NTVcbiAgY29uc3QgYWdlbnQgPSBwcm94eVxuICAgID8gKG5ldyBpbmRleC5IdHRwc1Byb3h5QWdlbnQocHJveHkpIClcbiAgICA6IG5ldyBuYXRpdmVIdHRwTW9kdWxlLkFnZW50KHsga2VlcEFsaXZlLCBtYXhTb2NrZXRzOiAzMCwgdGltZW91dDogMjAwMCB9KTtcblxuICBjb25zdCByZXF1ZXN0RXhlY3V0b3IgPSBjcmVhdGVSZXF1ZXN0RXhlY3V0b3Iob3B0aW9ucywgb3B0aW9ucy5odHRwTW9kdWxlID8/IG5hdGl2ZUh0dHBNb2R1bGUsIGFnZW50KTtcbiAgcmV0dXJuIGNvcmUuY3JlYXRlVHJhbnNwb3J0KG9wdGlvbnMsIHJlcXVlc3RFeGVjdXRvcik7XG59XG5cbi8qKlxuICogSG9ub3JzIHRoZSBgbm9fcHJveHlgIGVudiB2YXJpYWJsZSB3aXRoIHRoZSBoaWdoZXN0IHByaW9yaXR5IHRvIGFsbG93IGZvciBob3N0cyBleGNsdXNpb24uXG4gKlxuICogQHBhcmFtIHRyYW5zcG9ydFVybCBUaGUgVVJMIHRoZSB0cmFuc3BvcnQgaW50ZW5kcyB0byBzZW5kIGV2ZW50cyB0by5cbiAqIEBwYXJhbSBwcm94eSBUaGUgY2xpZW50IGNvbmZpZ3VyZWQgcHJveHkuXG4gKiBAcmV0dXJucyBBIHByb3h5IHRoZSB0cmFuc3BvcnQgc2hvdWxkIHVzZS5cbiAqL1xuZnVuY3Rpb24gYXBwbHlOb1Byb3h5T3B0aW9uKHRyYW5zcG9ydFVybFNlZ21lbnRzLCBwcm94eSkge1xuICBjb25zdCB7IG5vX3Byb3h5IH0gPSBwcm9jZXNzLmVudjtcblxuICBjb25zdCB1cmxJc0V4ZW1wdEZyb21Qcm94eSA9IG5vX3Byb3h5XG4gICAgPy5zcGxpdCgnLCcpXG4gICAgLnNvbWUoXG4gICAgICBleGVtcHRpb24gPT4gdHJhbnNwb3J0VXJsU2VnbWVudHMuaG9zdC5lbmRzV2l0aChleGVtcHRpb24pIHx8IHRyYW5zcG9ydFVybFNlZ21lbnRzLmhvc3RuYW1lLmVuZHNXaXRoKGV4ZW1wdGlvbiksXG4gICAgKTtcblxuICBpZiAodXJsSXNFeGVtcHRGcm9tUHJveHkpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwcm94eTtcbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZXF1ZXN0RXhlY3V0b3IgdG8gYmUgdXNlZCB3aXRoIGBjcmVhdGVUcmFuc3BvcnRgLlxuICovXG5mdW5jdGlvbiBjcmVhdGVSZXF1ZXN0RXhlY3V0b3IoXG4gIG9wdGlvbnMsXG4gIGh0dHBNb2R1bGUsXG4gIGFnZW50LFxuKSB7XG4gIGNvbnN0IHsgaG9zdG5hbWUsIHBhdGhuYW1lLCBwb3J0LCBwcm90b2NvbCwgc2VhcmNoIH0gPSBuZXcgVVJMKG9wdGlvbnMudXJsKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1ha2VSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgLy8gVGhpcyBlbnN1cmVzIHdlIGRvIG5vdCBnZW5lcmF0ZSBhbnkgc3BhbnMgaW4gT3BlblRlbGVtZXRyeSBmb3IgdGhlIHRyYW5zcG9ydFxuICAgICAgY29yZS5zdXBwcmVzc1RyYWNpbmcoKCkgPT4ge1xuICAgICAgICBsZXQgYm9keSA9IHN0cmVhbUZyb21Cb2R5KHJlcXVlc3QuYm9keSk7XG5cbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHsgLi4ub3B0aW9ucy5oZWFkZXJzIH07XG5cbiAgICAgICAgaWYgKHJlcXVlc3QuYm9keS5sZW5ndGggPiBHWklQX1RIUkVTSE9MRCkge1xuICAgICAgICAgIGhlYWRlcnNbJ2NvbnRlbnQtZW5jb2RpbmcnXSA9ICdnemlwJztcbiAgICAgICAgICBib2R5ID0gYm9keS5waXBlKG5vZGVfemxpYi5jcmVhdGVHemlwKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVxID0gaHR0cE1vZHVsZS5yZXF1ZXN0KFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgYWdlbnQsXG4gICAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgICAgaG9zdG5hbWUsXG4gICAgICAgICAgICBwYXRoOiBgJHtwYXRobmFtZX0ke3NlYXJjaH1gLFxuICAgICAgICAgICAgcG9ydCxcbiAgICAgICAgICAgIHByb3RvY29sLFxuICAgICAgICAgICAgY2E6IG9wdGlvbnMuY2FDZXJ0cyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlcyA9PiB7XG4gICAgICAgICAgICByZXMub24oJ2RhdGEnLCAoKSA9PiB7XG4gICAgICAgICAgICAgIC8vIERyYWluIHNvY2tldFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJlcy5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICAgICAgICAvLyBEcmFpbiBzb2NrZXRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXMuc2V0RW5jb2RpbmcoJ3V0ZjgnKTtcblxuICAgICAgICAgICAgLy8gXCJLZXktdmFsdWUgcGFpcnMgb2YgaGVhZGVyIG5hbWVzIGFuZCB2YWx1ZXMuIEhlYWRlciBuYW1lcyBhcmUgbG93ZXItY2FzZWQuXCJcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG4gICAgICAgICAgICBjb25zdCByZXRyeUFmdGVySGVhZGVyID0gcmVzLmhlYWRlcnNbJ3JldHJ5LWFmdGVyJ10gPz8gbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IHJhdGVMaW1pdHNIZWFkZXIgPSByZXMuaGVhZGVyc1sneC1zZW50cnktcmF0ZS1saW1pdHMnXSA/PyBudWxsO1xuXG4gICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgc3RhdHVzQ29kZTogcmVzLnN0YXR1c0NvZGUsXG4gICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAncmV0cnktYWZ0ZXInOiByZXRyeUFmdGVySGVhZGVyLFxuICAgICAgICAgICAgICAgICd4LXNlbnRyeS1yYXRlLWxpbWl0cyc6IEFycmF5LmlzQXJyYXkocmF0ZUxpbWl0c0hlYWRlcilcbiAgICAgICAgICAgICAgICAgID8gcmF0ZUxpbWl0c0hlYWRlclswXSB8fCBudWxsXG4gICAgICAgICAgICAgICAgICA6IHJhdGVMaW1pdHNIZWFkZXIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICApO1xuXG4gICAgICAgIHJlcS5vbignZXJyb3InLCByZWplY3QpO1xuICAgICAgICBib2R5LnBpcGUocmVxKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xufVxuXG5leHBvcnRzLm1ha2VOb2RlVHJhbnNwb3J0ID0gbWFrZU5vZGVUcmFuc3BvcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1odHRwLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/transports/http.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\n\n/** Adds an origin to an OTEL Span. */\nfunction addOriginToSpan(span, origin) {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, origin);\n}\n\nexports.addOriginToSpan = addOriginToSpan;\n//# sourceMappingURL=addOriginToSpan.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9hZGRPcmlnaW5Ub1NwYW4uanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLG9HQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXHV0aWxzXFxhZGRPcmlnaW5Ub1NwYW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuLyoqIEFkZHMgYW4gb3JpZ2luIHRvIGFuIE9URUwgU3Bhbi4gKi9cbmZ1bmN0aW9uIGFkZE9yaWdpblRvU3BhbihzcGFuLCBvcmlnaW4pIHtcbiAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiwgb3JpZ2luKTtcbn1cblxuZXhwb3J0cy5hZGRPcmlnaW5Ub1NwYW4gPSBhZGRPcmlnaW5Ub1NwYW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGRPcmlnaW5Ub1NwYW4uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/utils/baggage.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Merge two baggage headers into one, where the existing one takes precedence.\n * The order of the existing baggage will be preserved, and new entries will be added to the end.\n */\nfunction mergeBaggageHeaders(\n  existing,\n  baggage,\n) {\n  if (!existing) {\n    return baggage;\n  }\n\n  const existingBaggageEntries = core.parseBaggageHeader(existing);\n  const newBaggageEntries = core.parseBaggageHeader(baggage);\n\n  if (!newBaggageEntries) {\n    return existing;\n  }\n\n  // Existing entries take precedence, ensuring order remains stable for minimal changes\n  const mergedBaggageEntries = { ...existingBaggageEntries };\n  Object.entries(newBaggageEntries).forEach(([key, value]) => {\n    if (!mergedBaggageEntries[key]) {\n      mergedBaggageEntries[key] = value;\n    }\n  });\n\n  return core.objectToBaggageHeader(mergedBaggageEntries);\n}\n\nexports.mergeBaggageHeaders = mergeBaggageHeaders;\n//# sourceMappingURL=baggage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9iYWdnYWdlLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxvR0FBYzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQSwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXHV0aWxzXFxiYWdnYWdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8qKlxuICogTWVyZ2UgdHdvIGJhZ2dhZ2UgaGVhZGVycyBpbnRvIG9uZSwgd2hlcmUgdGhlIGV4aXN0aW5nIG9uZSB0YWtlcyBwcmVjZWRlbmNlLlxuICogVGhlIG9yZGVyIG9mIHRoZSBleGlzdGluZyBiYWdnYWdlIHdpbGwgYmUgcHJlc2VydmVkLCBhbmQgbmV3IGVudHJpZXMgd2lsbCBiZSBhZGRlZCB0byB0aGUgZW5kLlxuICovXG5mdW5jdGlvbiBtZXJnZUJhZ2dhZ2VIZWFkZXJzKFxuICBleGlzdGluZyxcbiAgYmFnZ2FnZSxcbikge1xuICBpZiAoIWV4aXN0aW5nKSB7XG4gICAgcmV0dXJuIGJhZ2dhZ2U7XG4gIH1cblxuICBjb25zdCBleGlzdGluZ0JhZ2dhZ2VFbnRyaWVzID0gY29yZS5wYXJzZUJhZ2dhZ2VIZWFkZXIoZXhpc3RpbmcpO1xuICBjb25zdCBuZXdCYWdnYWdlRW50cmllcyA9IGNvcmUucGFyc2VCYWdnYWdlSGVhZGVyKGJhZ2dhZ2UpO1xuXG4gIGlmICghbmV3QmFnZ2FnZUVudHJpZXMpIHtcbiAgICByZXR1cm4gZXhpc3Rpbmc7XG4gIH1cblxuICAvLyBFeGlzdGluZyBlbnRyaWVzIHRha2UgcHJlY2VkZW5jZSwgZW5zdXJpbmcgb3JkZXIgcmVtYWlucyBzdGFibGUgZm9yIG1pbmltYWwgY2hhbmdlc1xuICBjb25zdCBtZXJnZWRCYWdnYWdlRW50cmllcyA9IHsgLi4uZXhpc3RpbmdCYWdnYWdlRW50cmllcyB9O1xuICBPYmplY3QuZW50cmllcyhuZXdCYWdnYWdlRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgaWYgKCFtZXJnZWRCYWdnYWdlRW50cmllc1trZXldKSB7XG4gICAgICBtZXJnZWRCYWdnYWdlRW50cmllc1trZXldID0gdmFsdWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY29yZS5vYmplY3RUb0JhZ2dhZ2VIZWFkZXIobWVyZ2VkQmFnZ2FnZUVudHJpZXMpO1xufVxuXG5leHBvcnRzLm1lcmdlQmFnZ2FnZUhlYWRlcnMgPSBtZXJnZUJhZ2dhZ2VIZWFkZXJzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFnZ2FnZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/utils/baggage.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/utils/commonjs.js":(module,exports)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/** Detect CommonJS. */\nfunction isCjs() {\n  try {\n    return  true && typeof module.exports !== 'undefined';\n  } catch {\n    return false;\n  }\n}\n\nexports.isCjs = isCjs;\n//# sourceMappingURL=commonjs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9jb21tb25qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQTZCO0FBQ3hDLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsYUFBYTtBQUNiIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAc2VudHJ5XFxub2RlXFxidWlsZFxcY2pzXFx1dGlsc1xcY29tbW9uanMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbi8qKiBEZXRlY3QgQ29tbW9uSlMuICovXG5mdW5jdGlvbiBpc0NqcygpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzICE9PSAndW5kZWZpbmVkJztcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydHMuaXNDanMgPSBpc0Nqcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbmpzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/utils/commonjs.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst commonjs = __webpack_require__(/*! ./commonjs.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\n\nconst createMissingInstrumentationContext = (pkg) => ({\n  package: pkg,\n  'javascript.is_cjs': commonjs.isCjs(),\n});\n\nexports.createMissingInstrumentationContext = createMissingInstrumentationContext;\n//# sourceMappingURL=createMissingInstrumentationContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9jcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxpQkFBaUIsbUJBQU8sQ0FBQyxvRkFBZTs7QUFFeEM7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCwyQ0FBMkM7QUFDM0MiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXHV0aWxzXFxjcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29tbW9uanMgPSByZXF1aXJlKCcuL2NvbW1vbmpzLmpzJyk7XG5cbmNvbnN0IGNyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0ID0gKHBrZykgPT4gKHtcbiAgcGFja2FnZTogcGtnLFxuICAnamF2YXNjcmlwdC5pc19janMnOiBjb21tb25qcy5pc0NqcygpLFxufSk7XG5cbmV4cG9ydHMuY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQgPSBjcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/utils/debug.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nlet cachedDebuggerEnabled;\n\n/**\n * Was the debugger enabled when this function was first called?\n */\nasync function isDebuggerEnabled() {\n  if (cachedDebuggerEnabled === undefined) {\n    try {\n      // Node can be built without inspector support\n      const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n      cachedDebuggerEnabled = !!inspector.url();\n    } catch (_) {\n      cachedDebuggerEnabled = false;\n    }\n  }\n\n  return cachedDebuggerEnabled;\n}\n\nexports.isDebuggerEnabled = isDebuggerEnabled;\n//# sourceMappingURL=debug.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9kZWJ1Zy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrSUFBd0I7QUFDdEQ7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAc2VudHJ5XFxub2RlXFxidWlsZFxcY2pzXFx1dGlsc1xcZGVidWcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmxldCBjYWNoZWREZWJ1Z2dlckVuYWJsZWQ7XG5cbi8qKlxuICogV2FzIHRoZSBkZWJ1Z2dlciBlbmFibGVkIHdoZW4gdGhpcyBmdW5jdGlvbiB3YXMgZmlyc3QgY2FsbGVkP1xuICovXG5hc3luYyBmdW5jdGlvbiBpc0RlYnVnZ2VyRW5hYmxlZCgpIHtcbiAgaWYgKGNhY2hlZERlYnVnZ2VyRW5hYmxlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIE5vZGUgY2FuIGJlIGJ1aWx0IHdpdGhvdXQgaW5zcGVjdG9yIHN1cHBvcnRcbiAgICAgIGNvbnN0IGluc3BlY3RvciA9IGF3YWl0IGltcG9ydCgnbm9kZTppbnNwZWN0b3InKTtcbiAgICAgIGNhY2hlZERlYnVnZ2VyRW5hYmxlZCA9ICEhaW5zcGVjdG9yLnVybCgpO1xuICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgIGNhY2hlZERlYnVnZ2VyRW5hYmxlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjYWNoZWREZWJ1Z2dlckVuYWJsZWQ7XG59XG5cbmV4cG9ydHMuaXNEZWJ1Z2dlckVuYWJsZWQgPSBpc0RlYnVnZ2VyRW5hYmxlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/utils/debug.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('Object.defineProperty(exports, Symbol.toStringTag, { value: \'Module\' });\n\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/index.js");\nconst core = __webpack_require__(/*! @sentry/core */ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js");\nconst commonjs = __webpack_require__(/*! ./commonjs.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/utils/commonjs.js");\nconst createMissingInstrumentationContext = __webpack_require__(/*! ./createMissingInstrumentationContext.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js");\n\n/**\n * Checks and warns if a framework isn\'t wrapped by opentelemetry.\n */\nfunction ensureIsWrapped(\n  maybeWrappedFunction,\n  name,\n) {\n  const clientOptions = core.getClient()?.getOptions();\n  if (\n    !clientOptions?.disableInstrumentationWarnings &&\n    !core$1.isWrapped(maybeWrappedFunction) &&\n    core.isEnabled() &&\n    core.hasSpansEnabled(clientOptions)\n  ) {\n    core.consoleSandbox(() => {\n      if (commonjs.isCjs()) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[Sentry] ${name} is not instrumented. This is likely because you required/imported ${name} before calling \\`Sentry.init()\\`.`,\n        );\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[Sentry] ${name} is not instrumented. Please make sure to initialize Sentry in a separate file that you \\`--import\\` when running node, see: https://docs.sentry.io/platforms/javascript/guides/${name}/install/esm/.`,\n        );\n      }\n    });\n\n    core.getGlobalScope().setContext(\'missing_instrumentation\', createMissingInstrumentationContext.createMissingInstrumentationContext(name));\n  }\n}\n\nexports.ensureIsWrapped = ensureIsWrapped;\n//# sourceMappingURL=ensureIsWrapped.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9lbnN1cmVJc1dyYXBwZWQuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsZUFBZSxtQkFBTyxDQUFDLHdGQUFxQjtBQUM1QyxhQUFhLG1CQUFPLENBQUMsb0dBQWM7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsb0ZBQWU7QUFDeEMsNENBQTRDLG1CQUFPLENBQUMsMElBQTBDOztBQUU5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsTUFBTSxvRUFBb0UsTUFBTTtBQUN0RztBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0Esc0JBQXNCLE1BQU0saUxBQWlMLEtBQUs7QUFDbE47QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFwxXFxEb3dubG9hZHNcXHRhYm9yQWNhZGVteVVwZGF0ZWRcXHRhYm9yLWFjYWRlbXlcXG5vZGVfbW9kdWxlc1xcQHNlbnRyeVxcbm9kZVxcYnVpbGRcXGNqc1xcdXRpbHNcXGVuc3VyZUlzV3JhcHBlZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSQxID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvY29yZScpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgY29tbW9uanMgPSByZXF1aXJlKCcuL2NvbW1vbmpzLmpzJyk7XG5jb25zdCBjcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dCA9IHJlcXVpcmUoJy4vY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQuanMnKTtcblxuLyoqXG4gKiBDaGVja3MgYW5kIHdhcm5zIGlmIGEgZnJhbWV3b3JrIGlzbid0IHdyYXBwZWQgYnkgb3BlbnRlbGVtZXRyeS5cbiAqL1xuZnVuY3Rpb24gZW5zdXJlSXNXcmFwcGVkKFxuICBtYXliZVdyYXBwZWRGdW5jdGlvbixcbiAgbmFtZSxcbikge1xuICBjb25zdCBjbGllbnRPcHRpb25zID0gY29yZS5nZXRDbGllbnQoKT8uZ2V0T3B0aW9ucygpO1xuICBpZiAoXG4gICAgIWNsaWVudE9wdGlvbnM/LmRpc2FibGVJbnN0cnVtZW50YXRpb25XYXJuaW5ncyAmJlxuICAgICFjb3JlJDEuaXNXcmFwcGVkKG1heWJlV3JhcHBlZEZ1bmN0aW9uKSAmJlxuICAgIGNvcmUuaXNFbmFibGVkKCkgJiZcbiAgICBjb3JlLmhhc1NwYW5zRW5hYmxlZChjbGllbnRPcHRpb25zKVxuICApIHtcbiAgICBjb3JlLmNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgIGlmIChjb21tb25qcy5pc0NqcygpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgW1NlbnRyeV0gJHtuYW1lfSBpcyBub3QgaW5zdHJ1bWVudGVkLiBUaGlzIGlzIGxpa2VseSBiZWNhdXNlIHlvdSByZXF1aXJlZC9pbXBvcnRlZCAke25hbWV9IGJlZm9yZSBjYWxsaW5nIFxcYFNlbnRyeS5pbml0KClcXGAuYCxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgW1NlbnRyeV0gJHtuYW1lfSBpcyBub3QgaW5zdHJ1bWVudGVkLiBQbGVhc2UgbWFrZSBzdXJlIHRvIGluaXRpYWxpemUgU2VudHJ5IGluIGEgc2VwYXJhdGUgZmlsZSB0aGF0IHlvdSBcXGAtLWltcG9ydFxcYCB3aGVuIHJ1bm5pbmcgbm9kZSwgc2VlOiBodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy8ke25hbWV9L2luc3RhbGwvZXNtLy5gLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29yZS5nZXRHbG9iYWxTY29wZSgpLnNldENvbnRleHQoJ21pc3NpbmdfaW5zdHJ1bWVudGF0aW9uJywgY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQuY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQobmFtZSkpO1xuICB9XG59XG5cbmV4cG9ydHMuZW5zdXJlSXNXcmFwcGVkID0gZW5zdXJlSXNXcmFwcGVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5zdXJlSXNXcmFwcGVkLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\n')},"(ssr)/./node_modules/@sentry/node/build/cjs/utils/envToBool.js":(__unused_webpack_module,exports)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst FALSY_ENV_VALUES = new Set(['false', 'f', 'n', 'no', 'off', '0']);\nconst TRUTHY_ENV_VALUES = new Set(['true', 't', 'y', 'yes', 'on', '1']);\n\n/**\n * A helper function which casts an ENV variable value to `true` or `false` using the constants defined above.\n * In strict mode, it may return `null` if the value doesn't match any of the predefined values.\n *\n * @param value The value of the env variable\n * @param options -- Only has `strict` key for now, which requires a strict match for `true` in TRUTHY_ENV_VALUES\n * @returns true/false if the lowercase value matches the predefined values above. If not, null in strict mode,\n *          and Boolean(value) in loose mode.\n */\nfunction envToBool(value, options) {\n  const normalized = String(value).toLowerCase();\n\n  if (FALSY_ENV_VALUES.has(normalized)) {\n    return false;\n  }\n\n  if (TRUTHY_ENV_VALUES.has(normalized)) {\n    return true;\n  }\n\n  return options?.strict ? null : Boolean(value);\n}\n\nexports.FALSY_ENV_VALUES = FALSY_ENV_VALUES;\nexports.TRUTHY_ENV_VALUES = TRUTHY_ENV_VALUES;\nexports.envToBool = envToBool;\n//# sourceMappingURL=envToBool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9lbnZUb0Jvb2wuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIseUJBQXlCO0FBQ3pCLGlCQUFpQjtBQUNqQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFwxXFxEb3dubG9hZHNcXHRhYm9yQWNhZGVteVVwZGF0ZWRcXHRhYm9yLWFjYWRlbXlcXG5vZGVfbW9kdWxlc1xcQHNlbnRyeVxcbm9kZVxcYnVpbGRcXGNqc1xcdXRpbHNcXGVudlRvQm9vbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgRkFMU1lfRU5WX1ZBTFVFUyA9IG5ldyBTZXQoWydmYWxzZScsICdmJywgJ24nLCAnbm8nLCAnb2ZmJywgJzAnXSk7XG5jb25zdCBUUlVUSFlfRU5WX1ZBTFVFUyA9IG5ldyBTZXQoWyd0cnVlJywgJ3QnLCAneScsICd5ZXMnLCAnb24nLCAnMSddKTtcblxuLyoqXG4gKiBBIGhlbHBlciBmdW5jdGlvbiB3aGljaCBjYXN0cyBhbiBFTlYgdmFyaWFibGUgdmFsdWUgdG8gYHRydWVgIG9yIGBmYWxzZWAgdXNpbmcgdGhlIGNvbnN0YW50cyBkZWZpbmVkIGFib3ZlLlxuICogSW4gc3RyaWN0IG1vZGUsIGl0IG1heSByZXR1cm4gYG51bGxgIGlmIHRoZSB2YWx1ZSBkb2Vzbid0IG1hdGNoIGFueSBvZiB0aGUgcHJlZGVmaW5lZCB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZW52IHZhcmlhYmxlXG4gKiBAcGFyYW0gb3B0aW9ucyAtLSBPbmx5IGhhcyBgc3RyaWN0YCBrZXkgZm9yIG5vdywgd2hpY2ggcmVxdWlyZXMgYSBzdHJpY3QgbWF0Y2ggZm9yIGB0cnVlYCBpbiBUUlVUSFlfRU5WX1ZBTFVFU1xuICogQHJldHVybnMgdHJ1ZS9mYWxzZSBpZiB0aGUgbG93ZXJjYXNlIHZhbHVlIG1hdGNoZXMgdGhlIHByZWRlZmluZWQgdmFsdWVzIGFib3ZlLiBJZiBub3QsIG51bGwgaW4gc3RyaWN0IG1vZGUsXG4gKiAgICAgICAgICBhbmQgQm9vbGVhbih2YWx1ZSkgaW4gbG9vc2UgbW9kZS5cbiAqL1xuZnVuY3Rpb24gZW52VG9Cb29sKHZhbHVlLCBvcHRpb25zKSB7XG4gIGNvbnN0IG5vcm1hbGl6ZWQgPSBTdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCk7XG5cbiAgaWYgKEZBTFNZX0VOVl9WQUxVRVMuaGFzKG5vcm1hbGl6ZWQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKFRSVVRIWV9FTlZfVkFMVUVTLmhhcyhub3JtYWxpemVkKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIG9wdGlvbnM/LnN0cmljdCA/IG51bGwgOiBCb29sZWFuKHZhbHVlKTtcbn1cblxuZXhwb3J0cy5GQUxTWV9FTlZfVkFMVUVTID0gRkFMU1lfRU5WX1ZBTFVFUztcbmV4cG9ydHMuVFJVVEhZX0VOVl9WQUxVRVMgPSBUUlVUSFlfRU5WX1ZBTFVFUztcbmV4cG9ydHMuZW52VG9Cb29sID0gZW52VG9Cb29sO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW52VG9Cb29sLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/utils/envToBool.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/utils/errorhandling.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst DEFAULT_SHUTDOWN_TIMEOUT = 2000;\n\n/**\n * @hidden\n */\nfunction logAndExitProcess(error) {\n  core.consoleSandbox(() => {\n    // eslint-disable-next-line no-console\n    console.error(error);\n  });\n\n  const client = core.getClient();\n\n  if (client === undefined) {\n    debugBuild.DEBUG_BUILD && core.logger.warn('No NodeClient was defined, we are exiting the process now.');\n    global.process.exit(1);\n    return;\n  }\n\n  const options = client.getOptions();\n  const timeout =\n    options?.shutdownTimeout && options.shutdownTimeout > 0 ? options.shutdownTimeout : DEFAULT_SHUTDOWN_TIMEOUT;\n  client.close(timeout).then(\n    (result) => {\n      if (!result) {\n        debugBuild.DEBUG_BUILD && core.logger.warn('We reached the timeout for emptying the request buffer, still exiting now!');\n      }\n      global.process.exit(1);\n    },\n    error => {\n      debugBuild.DEBUG_BUILD && core.logger.error(error);\n    },\n  );\n}\n\nexports.logAndExitProcess = logAndExitProcess;\n//# sourceMappingURL=errorhandling.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9lcnJvcmhhbmRsaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyxvR0FBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxxRkFBbUI7O0FBRTlDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAc2VudHJ5XFxub2RlXFxidWlsZFxcY2pzXFx1dGlsc1xcZXJyb3JoYW5kbGluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5cbmNvbnN0IERFRkFVTFRfU0hVVERPV05fVElNRU9VVCA9IDIwMDA7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5mdW5jdGlvbiBsb2dBbmRFeGl0UHJvY2VzcyhlcnJvcikge1xuICBjb3JlLmNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICB9KTtcblxuICBjb25zdCBjbGllbnQgPSBjb3JlLmdldENsaWVudCgpO1xuXG4gIGlmIChjbGllbnQgPT09IHVuZGVmaW5lZCkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgY29yZS5sb2dnZXIud2FybignTm8gTm9kZUNsaWVudCB3YXMgZGVmaW5lZCwgd2UgYXJlIGV4aXRpbmcgdGhlIHByb2Nlc3Mgbm93LicpO1xuICAgIGdsb2JhbC5wcm9jZXNzLmV4aXQoMSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgb3B0aW9ucyA9IGNsaWVudC5nZXRPcHRpb25zKCk7XG4gIGNvbnN0IHRpbWVvdXQgPVxuICAgIG9wdGlvbnM/LnNodXRkb3duVGltZW91dCAmJiBvcHRpb25zLnNodXRkb3duVGltZW91dCA+IDAgPyBvcHRpb25zLnNodXRkb3duVGltZW91dCA6IERFRkFVTFRfU0hVVERPV05fVElNRU9VVDtcbiAgY2xpZW50LmNsb3NlKHRpbWVvdXQpLnRoZW4oXG4gICAgKHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmxvZ2dlci53YXJuKCdXZSByZWFjaGVkIHRoZSB0aW1lb3V0IGZvciBlbXB0eWluZyB0aGUgcmVxdWVzdCBidWZmZXIsIHN0aWxsIGV4aXRpbmcgbm93IScpO1xuICAgICAgfVxuICAgICAgZ2xvYmFsLnByb2Nlc3MuZXhpdCgxKTtcbiAgICB9LFxuICAgIGVycm9yID0+IHtcbiAgICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgY29yZS5sb2dnZXIuZXJyb3IoZXJyb3IpO1xuICAgIH0sXG4gICk7XG59XG5cbmV4cG9ydHMubG9nQW5kRXhpdFByb2Nlc3MgPSBsb2dBbmRFeGl0UHJvY2Vzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yaGFuZGxpbmcuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/utils/errorhandling.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js":(__unused_webpack_module,exports)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/** Build a full URL from request options. */\nfunction getRequestUrl(requestOptions) {\n  const protocol = requestOptions.protocol || '';\n  const hostname = requestOptions.hostname || requestOptions.host || '';\n  // Don't log standard :80 (http) and :443 (https) ports to reduce the noise\n  // Also don't add port if the hostname already includes a port\n  const port =\n    !requestOptions.port || requestOptions.port === 80 || requestOptions.port === 443 || /^(.*):(\\d+)$/.test(hostname)\n      ? ''\n      : `:${requestOptions.port}`;\n  const path = requestOptions.path ? requestOptions.path : '/';\n  return `${protocol}//${hostname}${port}${path}`;\n}\n\nexports.getRequestUrl = getRequestUrl;\n//# sourceMappingURL=getRequestUrl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9nZXRSZXF1ZXN0VXJsLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0EsWUFBWSxTQUFTLElBQUksU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLO0FBQ2hEOztBQUVBLHFCQUFxQjtBQUNyQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFwxXFxEb3dubG9hZHNcXHRhYm9yQWNhZGVteVVwZGF0ZWRcXHRhYm9yLWFjYWRlbXlcXG5vZGVfbW9kdWxlc1xcQHNlbnRyeVxcbm9kZVxcYnVpbGRcXGNqc1xcdXRpbHNcXGdldFJlcXVlc3RVcmwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbi8qKiBCdWlsZCBhIGZ1bGwgVVJMIGZyb20gcmVxdWVzdCBvcHRpb25zLiAqL1xuZnVuY3Rpb24gZ2V0UmVxdWVzdFVybChyZXF1ZXN0T3B0aW9ucykge1xuICBjb25zdCBwcm90b2NvbCA9IHJlcXVlc3RPcHRpb25zLnByb3RvY29sIHx8ICcnO1xuICBjb25zdCBob3N0bmFtZSA9IHJlcXVlc3RPcHRpb25zLmhvc3RuYW1lIHx8IHJlcXVlc3RPcHRpb25zLmhvc3QgfHwgJyc7XG4gIC8vIERvbid0IGxvZyBzdGFuZGFyZCA6ODAgKGh0dHApIGFuZCA6NDQzIChodHRwcykgcG9ydHMgdG8gcmVkdWNlIHRoZSBub2lzZVxuICAvLyBBbHNvIGRvbid0IGFkZCBwb3J0IGlmIHRoZSBob3N0bmFtZSBhbHJlYWR5IGluY2x1ZGVzIGEgcG9ydFxuICBjb25zdCBwb3J0ID1cbiAgICAhcmVxdWVzdE9wdGlvbnMucG9ydCB8fCByZXF1ZXN0T3B0aW9ucy5wb3J0ID09PSA4MCB8fCByZXF1ZXN0T3B0aW9ucy5wb3J0ID09PSA0NDMgfHwgL14oLiopOihcXGQrKSQvLnRlc3QoaG9zdG5hbWUpXG4gICAgICA/ICcnXG4gICAgICA6IGA6JHtyZXF1ZXN0T3B0aW9ucy5wb3J0fWA7XG4gIGNvbnN0IHBhdGggPSByZXF1ZXN0T3B0aW9ucy5wYXRoID8gcmVxdWVzdE9wdGlvbnMucGF0aCA6ICcvJztcbiAgcmV0dXJuIGAke3Byb3RvY29sfS8vJHtob3N0bmFtZX0ke3BvcnR9JHtwYXRofWA7XG59XG5cbmV4cG9ydHMuZ2V0UmVxdWVzdFVybCA9IGdldFJlcXVlc3RVcmw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRSZXF1ZXN0VXJsLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/utils/module.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\n\n/** normalizes Windows paths */\nfunction normalizeWindowsPath(path) {\n  return path\n    .replace(/^[A-Z]:/, '') // remove Windows-style prefix\n    .replace(/\\\\/g, '/'); // replace all `\\` instances with `/`\n}\n\n/** Creates a function that gets the module name from a filename */\nfunction createGetModuleFromFilename(\n  basePath = process.argv[1] ? core.dirname(process.argv[1]) : process.cwd(),\n  isWindows = node_path.sep === '\\\\',\n) {\n  const normalizedBase = isWindows ? normalizeWindowsPath(basePath) : basePath;\n\n  return (filename) => {\n    if (!filename) {\n      return;\n    }\n\n    const normalizedFilename = isWindows ? normalizeWindowsPath(filename) : filename;\n\n    // eslint-disable-next-line prefer-const\n    let { dir, base: file, ext } = node_path.posix.parse(normalizedFilename);\n\n    if (ext === '.js' || ext === '.mjs' || ext === '.cjs') {\n      file = file.slice(0, ext.length * -1);\n    }\n\n    // The file name might be URI-encoded which we want to decode to\n    // the original file name.\n    const decodedFile = decodeURIComponent(file);\n\n    if (!dir) {\n      // No dirname whatsoever\n      dir = '.';\n    }\n\n    const n = dir.lastIndexOf('/node_modules');\n    if (n > -1) {\n      return `${dir.slice(n + 14).replace(/\\//g, '.')}:${decodedFile}`;\n    }\n\n    // Let's see if it's a part of the main module\n    // To be a part of main module, it has to share the same base\n    if (dir.startsWith(normalizedBase)) {\n      const moduleName = dir.slice(normalizedBase.length + 1).replace(/\\//g, '.');\n      return moduleName ? `${moduleName}:${decodedFile}` : decodedFile;\n    }\n\n    return decodedFile;\n  };\n}\n\nexports.createGetModuleFromFilename = createGetModuleFromFilename;\n//# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9tb2R1bGUuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsa0JBQWtCLG1CQUFPLENBQUMsNEJBQVc7QUFDckMsYUFBYSxtQkFBTyxDQUFDLG9HQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxVQUFVLHVCQUF1Qjs7QUFFakM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLHNDQUFzQyxHQUFHLFlBQVk7QUFDckU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsV0FBVyxHQUFHLFlBQVk7QUFDdkQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG1DQUFtQztBQUNuQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFwxXFxEb3dubG9hZHNcXHRhYm9yQWNhZGVteVVwZGF0ZWRcXHRhYm9yLWFjYWRlbXlcXG5vZGVfbW9kdWxlc1xcQHNlbnRyeVxcbm9kZVxcYnVpbGRcXGNqc1xcdXRpbHNcXG1vZHVsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3Qgbm9kZV9wYXRoID0gcmVxdWlyZSgnbm9kZTpwYXRoJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8qKiBub3JtYWxpemVzIFdpbmRvd3MgcGF0aHMgKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVdpbmRvd3NQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGhcbiAgICAucmVwbGFjZSgvXltBLVpdOi8sICcnKSAvLyByZW1vdmUgV2luZG93cy1zdHlsZSBwcmVmaXhcbiAgICAucmVwbGFjZSgvXFxcXC9nLCAnLycpOyAvLyByZXBsYWNlIGFsbCBgXFxgIGluc3RhbmNlcyB3aXRoIGAvYFxufVxuXG4vKiogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgZ2V0cyB0aGUgbW9kdWxlIG5hbWUgZnJvbSBhIGZpbGVuYW1lICovXG5mdW5jdGlvbiBjcmVhdGVHZXRNb2R1bGVGcm9tRmlsZW5hbWUoXG4gIGJhc2VQYXRoID0gcHJvY2Vzcy5hcmd2WzFdID8gY29yZS5kaXJuYW1lKHByb2Nlc3MuYXJndlsxXSkgOiBwcm9jZXNzLmN3ZCgpLFxuICBpc1dpbmRvd3MgPSBub2RlX3BhdGguc2VwID09PSAnXFxcXCcsXG4pIHtcbiAgY29uc3Qgbm9ybWFsaXplZEJhc2UgPSBpc1dpbmRvd3MgPyBub3JtYWxpemVXaW5kb3dzUGF0aChiYXNlUGF0aCkgOiBiYXNlUGF0aDtcblxuICByZXR1cm4gKGZpbGVuYW1lKSA9PiB7XG4gICAgaWYgKCFmaWxlbmFtZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG5vcm1hbGl6ZWRGaWxlbmFtZSA9IGlzV2luZG93cyA/IG5vcm1hbGl6ZVdpbmRvd3NQYXRoKGZpbGVuYW1lKSA6IGZpbGVuYW1lO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1jb25zdFxuICAgIGxldCB7IGRpciwgYmFzZTogZmlsZSwgZXh0IH0gPSBub2RlX3BhdGgucG9zaXgucGFyc2Uobm9ybWFsaXplZEZpbGVuYW1lKTtcblxuICAgIGlmIChleHQgPT09ICcuanMnIHx8IGV4dCA9PT0gJy5tanMnIHx8IGV4dCA9PT0gJy5janMnKSB7XG4gICAgICBmaWxlID0gZmlsZS5zbGljZSgwLCBleHQubGVuZ3RoICogLTEpO1xuICAgIH1cblxuICAgIC8vIFRoZSBmaWxlIG5hbWUgbWlnaHQgYmUgVVJJLWVuY29kZWQgd2hpY2ggd2Ugd2FudCB0byBkZWNvZGUgdG9cbiAgICAvLyB0aGUgb3JpZ2luYWwgZmlsZSBuYW1lLlxuICAgIGNvbnN0IGRlY29kZWRGaWxlID0gZGVjb2RlVVJJQ29tcG9uZW50KGZpbGUpO1xuXG4gICAgaWYgKCFkaXIpIHtcbiAgICAgIC8vIE5vIGRpcm5hbWUgd2hhdHNvZXZlclxuICAgICAgZGlyID0gJy4nO1xuICAgIH1cblxuICAgIGNvbnN0IG4gPSBkaXIubGFzdEluZGV4T2YoJy9ub2RlX21vZHVsZXMnKTtcbiAgICBpZiAobiA+IC0xKSB7XG4gICAgICByZXR1cm4gYCR7ZGlyLnNsaWNlKG4gKyAxNCkucmVwbGFjZSgvXFwvL2csICcuJyl9OiR7ZGVjb2RlZEZpbGV9YDtcbiAgICB9XG5cbiAgICAvLyBMZXQncyBzZWUgaWYgaXQncyBhIHBhcnQgb2YgdGhlIG1haW4gbW9kdWxlXG4gICAgLy8gVG8gYmUgYSBwYXJ0IG9mIG1haW4gbW9kdWxlLCBpdCBoYXMgdG8gc2hhcmUgdGhlIHNhbWUgYmFzZVxuICAgIGlmIChkaXIuc3RhcnRzV2l0aChub3JtYWxpemVkQmFzZSkpIHtcbiAgICAgIGNvbnN0IG1vZHVsZU5hbWUgPSBkaXIuc2xpY2Uobm9ybWFsaXplZEJhc2UubGVuZ3RoICsgMSkucmVwbGFjZSgvXFwvL2csICcuJyk7XG4gICAgICByZXR1cm4gbW9kdWxlTmFtZSA/IGAke21vZHVsZU5hbWV9OiR7ZGVjb2RlZEZpbGV9YCA6IGRlY29kZWRGaWxlO1xuICAgIH1cblxuICAgIHJldHVybiBkZWNvZGVkRmlsZTtcbiAgfTtcbn1cblxuZXhwb3J0cy5jcmVhdGVHZXRNb2R1bGVGcm9tRmlsZW5hbWUgPSBjcmVhdGVHZXRNb2R1bGVGcm9tRmlsZW5hbWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2R1bGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/utils/module.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/utils/redisCache.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"buffer\")[\"Buffer\"];\nObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst SINGLE_ARG_COMMANDS = ['get', 'set', 'setex'];\n\nconst GET_COMMANDS = ['get', 'mget'];\nconst SET_COMMANDS = ['set', 'setex'];\n// todo: del, expire\n\n/** Checks if a given command is in the list of redis commands.\n *  Useful because commands can come in lowercase or uppercase (depending on the library). */\nfunction isInCommands(redisCommands, command) {\n  return redisCommands.includes(command.toLowerCase());\n}\n\n/** Determine cache operation based on redis statement */\nfunction getCacheOperation(\n  command,\n) {\n  if (isInCommands(GET_COMMANDS, command)) {\n    return 'cache.get';\n  } else if (isInCommands(SET_COMMANDS, command)) {\n    return 'cache.put';\n  } else {\n    return undefined;\n  }\n}\n\nfunction keyHasPrefix(key, prefixes) {\n  return prefixes.some(prefix => key.startsWith(prefix));\n}\n\n/** Safely converts a redis key to a string (comma-separated if there are multiple keys) */\nfunction getCacheKeySafely(redisCommand, cmdArgs) {\n  try {\n    if (cmdArgs.length === 0) {\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const processArg = (arg) => {\n      if (typeof arg === 'string' || typeof arg === 'number' || Buffer.isBuffer(arg)) {\n        return [arg.toString()];\n      } else if (Array.isArray(arg)) {\n        return flatten(arg.map(arg => processArg(arg)));\n      } else {\n        return ['<unknown>'];\n      }\n    };\n\n    const firstArg = cmdArgs[0];\n    if (isInCommands(SINGLE_ARG_COMMANDS, redisCommand) && firstArg != null) {\n      return processArg(firstArg);\n    }\n\n    return flatten(cmdArgs.map(arg => processArg(arg)));\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/** Determines whether a redis operation should be considered as \"cache operation\" by checking if a key is prefixed.\n *  We only support certain commands (such as 'set', 'get', 'mget'). */\nfunction shouldConsiderForCache(redisCommand, keys, prefixes) {\n  if (!getCacheOperation(redisCommand)) {\n    return false;\n  }\n\n  for (const key of keys) {\n    if (keyHasPrefix(key, prefixes)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/** Calculates size based on the cache response value */\nfunction calculateCacheItemSize(response) {\n  const getSize = (value) => {\n    try {\n      if (Buffer.isBuffer(value)) return value.byteLength;\n      else if (typeof value === 'string') return value.length;\n      else if (typeof value === 'number') return value.toString().length;\n      else if (value === null || value === undefined) return 0;\n      return JSON.stringify(value).length;\n    } catch (e) {\n      return undefined;\n    }\n  };\n\n  return Array.isArray(response)\n    ? response.reduce((acc, curr) => {\n        const size = getSize(curr);\n        return typeof size === 'number' ? (acc !== undefined ? acc + size : size) : acc;\n      }, 0)\n    : getSize(response);\n}\n\nfunction flatten(input) {\n  const result = [];\n\n  const flattenHelper = (input) => {\n    input.forEach((el) => {\n      if (Array.isArray(el)) {\n        flattenHelper(el );\n      } else {\n        result.push(el );\n      }\n    });\n  };\n\n  flattenHelper(input);\n  return result;\n}\n\nexports.GET_COMMANDS = GET_COMMANDS;\nexports.SET_COMMANDS = SET_COMMANDS;\nexports.calculateCacheItemSize = calculateCacheItemSize;\nexports.getCacheKeySafely = getCacheKeySafely;\nexports.getCacheOperation = getCacheOperation;\nexports.isInCommands = isInCommands;\nexports.shouldConsiderForCache = shouldConsiderForCache;\n//# sourceMappingURL=redisCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9yZWRpc0NhY2hlLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdFQUFnRSxNQUFNO0FBQ3RFO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxNQUFNO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQiw4QkFBOEI7QUFDOUIseUJBQXlCO0FBQ3pCLHlCQUF5QjtBQUN6QixvQkFBb0I7QUFDcEIsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAc2VudHJ5XFxub2RlXFxidWlsZFxcY2pzXFx1dGlsc1xccmVkaXNDYWNoZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgU0lOR0xFX0FSR19DT01NQU5EUyA9IFsnZ2V0JywgJ3NldCcsICdzZXRleCddO1xuXG5jb25zdCBHRVRfQ09NTUFORFMgPSBbJ2dldCcsICdtZ2V0J107XG5jb25zdCBTRVRfQ09NTUFORFMgPSBbJ3NldCcsICdzZXRleCddO1xuLy8gdG9kbzogZGVsLCBleHBpcmVcblxuLyoqIENoZWNrcyBpZiBhIGdpdmVuIGNvbW1hbmQgaXMgaW4gdGhlIGxpc3Qgb2YgcmVkaXMgY29tbWFuZHMuXG4gKiAgVXNlZnVsIGJlY2F1c2UgY29tbWFuZHMgY2FuIGNvbWUgaW4gbG93ZXJjYXNlIG9yIHVwcGVyY2FzZSAoZGVwZW5kaW5nIG9uIHRoZSBsaWJyYXJ5KS4gKi9cbmZ1bmN0aW9uIGlzSW5Db21tYW5kcyhyZWRpc0NvbW1hbmRzLCBjb21tYW5kKSB7XG4gIHJldHVybiByZWRpc0NvbW1hbmRzLmluY2x1ZGVzKGNvbW1hbmQudG9Mb3dlckNhc2UoKSk7XG59XG5cbi8qKiBEZXRlcm1pbmUgY2FjaGUgb3BlcmF0aW9uIGJhc2VkIG9uIHJlZGlzIHN0YXRlbWVudCAqL1xuZnVuY3Rpb24gZ2V0Q2FjaGVPcGVyYXRpb24oXG4gIGNvbW1hbmQsXG4pIHtcbiAgaWYgKGlzSW5Db21tYW5kcyhHRVRfQ09NTUFORFMsIGNvbW1hbmQpKSB7XG4gICAgcmV0dXJuICdjYWNoZS5nZXQnO1xuICB9IGVsc2UgaWYgKGlzSW5Db21tYW5kcyhTRVRfQ09NTUFORFMsIGNvbW1hbmQpKSB7XG4gICAgcmV0dXJuICdjYWNoZS5wdXQnO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24ga2V5SGFzUHJlZml4KGtleSwgcHJlZml4ZXMpIHtcbiAgcmV0dXJuIHByZWZpeGVzLnNvbWUocHJlZml4ID0+IGtleS5zdGFydHNXaXRoKHByZWZpeCkpO1xufVxuXG4vKiogU2FmZWx5IGNvbnZlcnRzIGEgcmVkaXMga2V5IHRvIGEgc3RyaW5nIChjb21tYS1zZXBhcmF0ZWQgaWYgdGhlcmUgYXJlIG11bHRpcGxlIGtleXMpICovXG5mdW5jdGlvbiBnZXRDYWNoZUtleVNhZmVseShyZWRpc0NvbW1hbmQsIGNtZEFyZ3MpIHtcbiAgdHJ5IHtcbiAgICBpZiAoY21kQXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBjb25zdCBwcm9jZXNzQXJnID0gKGFyZykgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8IEJ1ZmZlci5pc0J1ZmZlcihhcmcpKSB7XG4gICAgICAgIHJldHVybiBbYXJnLnRvU3RyaW5nKCldO1xuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgcmV0dXJuIGZsYXR0ZW4oYXJnLm1hcChhcmcgPT4gcHJvY2Vzc0FyZyhhcmcpKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gWyc8dW5rbm93bj4nXTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgZmlyc3RBcmcgPSBjbWRBcmdzWzBdO1xuICAgIGlmIChpc0luQ29tbWFuZHMoU0lOR0xFX0FSR19DT01NQU5EUywgcmVkaXNDb21tYW5kKSAmJiBmaXJzdEFyZyAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gcHJvY2Vzc0FyZyhmaXJzdEFyZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZsYXR0ZW4oY21kQXJncy5tYXAoYXJnID0+IHByb2Nlc3NBcmcoYXJnKSkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKiogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgcmVkaXMgb3BlcmF0aW9uIHNob3VsZCBiZSBjb25zaWRlcmVkIGFzIFwiY2FjaGUgb3BlcmF0aW9uXCIgYnkgY2hlY2tpbmcgaWYgYSBrZXkgaXMgcHJlZml4ZWQuXG4gKiAgV2Ugb25seSBzdXBwb3J0IGNlcnRhaW4gY29tbWFuZHMgKHN1Y2ggYXMgJ3NldCcsICdnZXQnLCAnbWdldCcpLiAqL1xuZnVuY3Rpb24gc2hvdWxkQ29uc2lkZXJGb3JDYWNoZShyZWRpc0NvbW1hbmQsIGtleXMsIHByZWZpeGVzKSB7XG4gIGlmICghZ2V0Q2FjaGVPcGVyYXRpb24ocmVkaXNDb21tYW5kKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICBpZiAoa2V5SGFzUHJlZml4KGtleSwgcHJlZml4ZXMpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKiogQ2FsY3VsYXRlcyBzaXplIGJhc2VkIG9uIHRoZSBjYWNoZSByZXNwb25zZSB2YWx1ZSAqL1xuZnVuY3Rpb24gY2FsY3VsYXRlQ2FjaGVJdGVtU2l6ZShyZXNwb25zZSkge1xuICBjb25zdCBnZXRTaXplID0gKHZhbHVlKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSByZXR1cm4gdmFsdWUuYnl0ZUxlbmd0aDtcbiAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHJldHVybiB2YWx1ZS5sZW5ndGg7XG4gICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSByZXR1cm4gdmFsdWUudG9TdHJpbmcoKS5sZW5ndGg7XG4gICAgICBlbHNlIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSkubGVuZ3RoO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBBcnJheS5pc0FycmF5KHJlc3BvbnNlKVxuICAgID8gcmVzcG9uc2UucmVkdWNlKChhY2MsIGN1cnIpID0+IHtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IGdldFNpemUoY3Vycik7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygc2l6ZSA9PT0gJ251bWJlcicgPyAoYWNjICE9PSB1bmRlZmluZWQgPyBhY2MgKyBzaXplIDogc2l6ZSkgOiBhY2M7XG4gICAgICB9LCAwKVxuICAgIDogZ2V0U2l6ZShyZXNwb25zZSk7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW4oaW5wdXQpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgY29uc3QgZmxhdHRlbkhlbHBlciA9IChpbnB1dCkgPT4ge1xuICAgIGlucHV0LmZvckVhY2goKGVsKSA9PiB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShlbCkpIHtcbiAgICAgICAgZmxhdHRlbkhlbHBlcihlbCApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LnB1c2goZWwgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBmbGF0dGVuSGVscGVyKGlucHV0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0cy5HRVRfQ09NTUFORFMgPSBHRVRfQ09NTUFORFM7XG5leHBvcnRzLlNFVF9DT01NQU5EUyA9IFNFVF9DT01NQU5EUztcbmV4cG9ydHMuY2FsY3VsYXRlQ2FjaGVJdGVtU2l6ZSA9IGNhbGN1bGF0ZUNhY2hlSXRlbVNpemU7XG5leHBvcnRzLmdldENhY2hlS2V5U2FmZWx5ID0gZ2V0Q2FjaGVLZXlTYWZlbHk7XG5leHBvcnRzLmdldENhY2hlT3BlcmF0aW9uID0gZ2V0Q2FjaGVPcGVyYXRpb247XG5leHBvcnRzLmlzSW5Db21tYW5kcyA9IGlzSW5Db21tYW5kcztcbmV4cG9ydHMuc2hvdWxkQ29uc2lkZXJGb3JDYWNoZSA9IHNob3VsZENvbnNpZGVyRm9yQ2FjaGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWRpc0NhY2hlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/utils/redisCache.js\n")}};