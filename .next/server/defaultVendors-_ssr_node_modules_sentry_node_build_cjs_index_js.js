exports.id="defaultVendors-_ssr_node_modules_sentry_node_build_cjs_index_js",exports.ids=["defaultVendors-_ssr_node_modules_sentry_node_build_cjs_index_js"],exports.modules={"(ssr)/./node_modules/@sentry/node/build/cjs/cron/common.js":(__unused_webpack_module,exports)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst replacements = [\n  ['january', '1'],\n  ['february', '2'],\n  ['march', '3'],\n  ['april', '4'],\n  ['may', '5'],\n  ['june', '6'],\n  ['july', '7'],\n  ['august', '8'],\n  ['september', '9'],\n  ['october', '10'],\n  ['november', '11'],\n  ['december', '12'],\n  ['jan', '1'],\n  ['feb', '2'],\n  ['mar', '3'],\n  ['apr', '4'],\n  ['may', '5'],\n  ['jun', '6'],\n  ['jul', '7'],\n  ['aug', '8'],\n  ['sep', '9'],\n  ['oct', '10'],\n  ['nov', '11'],\n  ['dec', '12'],\n  ['sunday', '0'],\n  ['monday', '1'],\n  ['tuesday', '2'],\n  ['wednesday', '3'],\n  ['thursday', '4'],\n  ['friday', '5'],\n  ['saturday', '6'],\n  ['sun', '0'],\n  ['mon', '1'],\n  ['tue', '2'],\n  ['wed', '3'],\n  ['thu', '4'],\n  ['fri', '5'],\n  ['sat', '6'],\n];\n\n/**\n * Replaces names in cron expressions\n */\nfunction replaceCronNames(cronExpression) {\n  return replacements.reduce(\n    // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n    (acc, [name, replacement]) => acc.replace(new RegExp(name, 'gi'), replacement),\n    cronExpression,\n  );\n}\n\nexports.replaceCronNames = replaceCronNames;\n//# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9jcm9uL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXGNyb25cXGNvbW1vbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgcmVwbGFjZW1lbnRzID0gW1xuICBbJ2phbnVhcnknLCAnMSddLFxuICBbJ2ZlYnJ1YXJ5JywgJzInXSxcbiAgWydtYXJjaCcsICczJ10sXG4gIFsnYXByaWwnLCAnNCddLFxuICBbJ21heScsICc1J10sXG4gIFsnanVuZScsICc2J10sXG4gIFsnanVseScsICc3J10sXG4gIFsnYXVndXN0JywgJzgnXSxcbiAgWydzZXB0ZW1iZXInLCAnOSddLFxuICBbJ29jdG9iZXInLCAnMTAnXSxcbiAgWydub3ZlbWJlcicsICcxMSddLFxuICBbJ2RlY2VtYmVyJywgJzEyJ10sXG4gIFsnamFuJywgJzEnXSxcbiAgWydmZWInLCAnMiddLFxuICBbJ21hcicsICczJ10sXG4gIFsnYXByJywgJzQnXSxcbiAgWydtYXknLCAnNSddLFxuICBbJ2p1bicsICc2J10sXG4gIFsnanVsJywgJzcnXSxcbiAgWydhdWcnLCAnOCddLFxuICBbJ3NlcCcsICc5J10sXG4gIFsnb2N0JywgJzEwJ10sXG4gIFsnbm92JywgJzExJ10sXG4gIFsnZGVjJywgJzEyJ10sXG4gIFsnc3VuZGF5JywgJzAnXSxcbiAgWydtb25kYXknLCAnMSddLFxuICBbJ3R1ZXNkYXknLCAnMiddLFxuICBbJ3dlZG5lc2RheScsICczJ10sXG4gIFsndGh1cnNkYXknLCAnNCddLFxuICBbJ2ZyaWRheScsICc1J10sXG4gIFsnc2F0dXJkYXknLCAnNiddLFxuICBbJ3N1bicsICcwJ10sXG4gIFsnbW9uJywgJzEnXSxcbiAgWyd0dWUnLCAnMiddLFxuICBbJ3dlZCcsICczJ10sXG4gIFsndGh1JywgJzQnXSxcbiAgWydmcmknLCAnNSddLFxuICBbJ3NhdCcsICc2J10sXG5dO1xuXG4vKipcbiAqIFJlcGxhY2VzIG5hbWVzIGluIGNyb24gZXhwcmVzc2lvbnNcbiAqL1xuZnVuY3Rpb24gcmVwbGFjZUNyb25OYW1lcyhjcm9uRXhwcmVzc2lvbikge1xuICByZXR1cm4gcmVwbGFjZW1lbnRzLnJlZHVjZShcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHNlbnRyeS1pbnRlcm5hbC9zZGsvbm8tcmVnZXhwLWNvbnN0cnVjdG9yXG4gICAgKGFjYywgW25hbWUsIHJlcGxhY2VtZW50XSkgPT4gYWNjLnJlcGxhY2UobmV3IFJlZ0V4cChuYW1lLCAnZ2knKSwgcmVwbGFjZW1lbnQpLFxuICAgIGNyb25FeHByZXNzaW9uLFxuICApO1xufVxuXG5leHBvcnRzLnJlcGxhY2VDcm9uTmFtZXMgPSByZXBsYWNlQ3Jvbk5hbWVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/cron/common.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/cron/cron.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/cron/common.js\");\n\nconst ERROR_TEXT = 'Automatic instrumentation of CronJob only supports crontab string';\n\n/**\n * Instruments the `cron` library to send a check-in event to Sentry for each job execution.\n *\n * ```ts\n * import * as Sentry from '@sentry/node';\n * import { CronJob } from 'cron';\n *\n * const CronJobWithCheckIn = Sentry.cron.instrumentCron(CronJob, 'my-cron-job');\n *\n * // use the constructor\n * const job = new CronJobWithCheckIn('* * * * *', () => {\n *  console.log('You will see this message every minute');\n * });\n *\n * // or from\n * const job = CronJobWithCheckIn.from({ cronTime: '* * * * *', onTick: () => {\n *   console.log('You will see this message every minute');\n * });\n * ```\n */\nfunction instrumentCron(lib, monitorSlug) {\n  let jobScheduled = false;\n\n  return new Proxy(lib, {\n    construct(target, args) {\n      const [cronTime, onTick, onComplete, start, timeZone, ...rest] = args;\n\n      if (typeof cronTime !== 'string') {\n        throw new Error(ERROR_TEXT);\n      }\n\n      if (jobScheduled) {\n        throw new Error(`A job named '${monitorSlug}' has already been scheduled`);\n      }\n\n      jobScheduled = true;\n\n      const cronString = common.replaceCronNames(cronTime);\n\n      async function monitoredTick(context, onComplete) {\n        return core.withMonitor(\n          monitorSlug,\n          async () => {\n            try {\n              await onTick(context, onComplete);\n            } catch (e) {\n              core.captureException(e);\n              throw e;\n            }\n          },\n          {\n            schedule: { type: 'crontab', value: cronString },\n            timezone: timeZone || undefined,\n          },\n        );\n      }\n\n      return new target(cronTime, monitoredTick, onComplete, start, timeZone, ...rest);\n    },\n    get(target, prop) {\n      if (prop === 'from') {\n        return (param) => {\n          const { cronTime, onTick, timeZone } = param;\n\n          if (typeof cronTime !== 'string') {\n            throw new Error(ERROR_TEXT);\n          }\n\n          if (jobScheduled) {\n            throw new Error(`A job named '${monitorSlug}' has already been scheduled`);\n          }\n\n          jobScheduled = true;\n\n          const cronString = common.replaceCronNames(cronTime);\n\n          param.onTick = async (context, onComplete) => {\n            return core.withMonitor(\n              monitorSlug,\n              async () => {\n                try {\n                  await onTick(context, onComplete);\n                } catch (e) {\n                  core.captureException(e);\n                  throw e;\n                }\n              },\n              {\n                schedule: { type: 'crontab', value: cronString },\n                timezone: timeZone || undefined,\n              },\n            );\n          };\n\n          return target.from(param);\n        };\n      } else {\n        return target[prop];\n      }\n    },\n  });\n}\n\nexports.instrumentCron = instrumentCron;\n//# sourceMappingURL=cron.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9jcm9uL2Nyb24uanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLG9HQUFjO0FBQ25DLGVBQWUsbUJBQU8sQ0FBQywrRUFBYTs7QUFFcEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0NBQXdDLFlBQVk7QUFDcEQ7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLHdCQUF3QixvQ0FBb0M7QUFDNUQ7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsNkJBQTZCOztBQUUvQztBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0Q0FBNEMsWUFBWTtBQUN4RDs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsNEJBQTRCLG9DQUFvQztBQUNoRTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsc0JBQXNCO0FBQ3RCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAc2VudHJ5XFxub2RlXFxidWlsZFxcY2pzXFxjcm9uXFxjcm9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbi5qcycpO1xuXG5jb25zdCBFUlJPUl9URVhUID0gJ0F1dG9tYXRpYyBpbnN0cnVtZW50YXRpb24gb2YgQ3JvbkpvYiBvbmx5IHN1cHBvcnRzIGNyb250YWIgc3RyaW5nJztcblxuLyoqXG4gKiBJbnN0cnVtZW50cyB0aGUgYGNyb25gIGxpYnJhcnkgdG8gc2VuZCBhIGNoZWNrLWluIGV2ZW50IHRvIFNlbnRyeSBmb3IgZWFjaCBqb2IgZXhlY3V0aW9uLlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgKiBhcyBTZW50cnkgZnJvbSAnQHNlbnRyeS9ub2RlJztcbiAqIGltcG9ydCB7IENyb25Kb2IgfSBmcm9tICdjcm9uJztcbiAqXG4gKiBjb25zdCBDcm9uSm9iV2l0aENoZWNrSW4gPSBTZW50cnkuY3Jvbi5pbnN0cnVtZW50Q3JvbihDcm9uSm9iLCAnbXktY3Jvbi1qb2InKTtcbiAqXG4gKiAvLyB1c2UgdGhlIGNvbnN0cnVjdG9yXG4gKiBjb25zdCBqb2IgPSBuZXcgQ3JvbkpvYldpdGhDaGVja0luKCcqICogKiAqIConLCAoKSA9PiB7XG4gKiAgY29uc29sZS5sb2coJ1lvdSB3aWxsIHNlZSB0aGlzIG1lc3NhZ2UgZXZlcnkgbWludXRlJyk7XG4gKiB9KTtcbiAqXG4gKiAvLyBvciBmcm9tXG4gKiBjb25zdCBqb2IgPSBDcm9uSm9iV2l0aENoZWNrSW4uZnJvbSh7IGNyb25UaW1lOiAnKiAqICogKiAqJywgb25UaWNrOiAoKSA9PiB7XG4gKiAgIGNvbnNvbGUubG9nKCdZb3Ugd2lsbCBzZWUgdGhpcyBtZXNzYWdlIGV2ZXJ5IG1pbnV0ZScpO1xuICogfSk7XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudENyb24obGliLCBtb25pdG9yU2x1Zykge1xuICBsZXQgam9iU2NoZWR1bGVkID0gZmFsc2U7XG5cbiAgcmV0dXJuIG5ldyBQcm94eShsaWIsIHtcbiAgICBjb25zdHJ1Y3QodGFyZ2V0LCBhcmdzKSB7XG4gICAgICBjb25zdCBbY3JvblRpbWUsIG9uVGljaywgb25Db21wbGV0ZSwgc3RhcnQsIHRpbWVab25lLCAuLi5yZXN0XSA9IGFyZ3M7XG5cbiAgICAgIGlmICh0eXBlb2YgY3JvblRpbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9URVhUKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGpvYlNjaGVkdWxlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEEgam9iIG5hbWVkICcke21vbml0b3JTbHVnfScgaGFzIGFscmVhZHkgYmVlbiBzY2hlZHVsZWRgKTtcbiAgICAgIH1cblxuICAgICAgam9iU2NoZWR1bGVkID0gdHJ1ZTtcblxuICAgICAgY29uc3QgY3JvblN0cmluZyA9IGNvbW1vbi5yZXBsYWNlQ3Jvbk5hbWVzKGNyb25UaW1lKTtcblxuICAgICAgYXN5bmMgZnVuY3Rpb24gbW9uaXRvcmVkVGljayhjb250ZXh0LCBvbkNvbXBsZXRlKSB7XG4gICAgICAgIHJldHVybiBjb3JlLndpdGhNb25pdG9yKFxuICAgICAgICAgIG1vbml0b3JTbHVnLFxuICAgICAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGF3YWl0IG9uVGljayhjb250ZXh0LCBvbkNvbXBsZXRlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGUpO1xuICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2NoZWR1bGU6IHsgdHlwZTogJ2Nyb250YWInLCB2YWx1ZTogY3JvblN0cmluZyB9LFxuICAgICAgICAgICAgdGltZXpvbmU6IHRpbWVab25lIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IHRhcmdldChjcm9uVGltZSwgbW9uaXRvcmVkVGljaywgb25Db21wbGV0ZSwgc3RhcnQsIHRpbWVab25lLCAuLi5yZXN0KTtcbiAgICB9LFxuICAgIGdldCh0YXJnZXQsIHByb3ApIHtcbiAgICAgIGlmIChwcm9wID09PSAnZnJvbScpIHtcbiAgICAgICAgcmV0dXJuIChwYXJhbSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgY3JvblRpbWUsIG9uVGljaywgdGltZVpvbmUgfSA9IHBhcmFtO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBjcm9uVGltZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9URVhUKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoam9iU2NoZWR1bGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEEgam9iIG5hbWVkICcke21vbml0b3JTbHVnfScgaGFzIGFscmVhZHkgYmVlbiBzY2hlZHVsZWRgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBqb2JTY2hlZHVsZWQgPSB0cnVlO1xuXG4gICAgICAgICAgY29uc3QgY3JvblN0cmluZyA9IGNvbW1vbi5yZXBsYWNlQ3Jvbk5hbWVzKGNyb25UaW1lKTtcblxuICAgICAgICAgIHBhcmFtLm9uVGljayA9IGFzeW5jIChjb250ZXh0LCBvbkNvbXBsZXRlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY29yZS53aXRoTW9uaXRvcihcbiAgICAgICAgICAgICAgbW9uaXRvclNsdWcsXG4gICAgICAgICAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgYXdhaXQgb25UaWNrKGNvbnRleHQsIG9uQ29tcGxldGUpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlKTtcbiAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGU6IHsgdHlwZTogJ2Nyb250YWInLCB2YWx1ZTogY3JvblN0cmluZyB9LFxuICAgICAgICAgICAgICAgIHRpbWV6b25lOiB0aW1lWm9uZSB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICByZXR1cm4gdGFyZ2V0LmZyb20ocGFyYW0pO1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy5pbnN0cnVtZW50Q3JvbiA9IGluc3RydW1lbnRDcm9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3Jvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/cron/cron.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/cron/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('Object.defineProperty(exports, Symbol.toStringTag, { value: \'Module\' });\n\nconst cron$1 = __webpack_require__(/*! ./cron.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/cron/cron.js");\nconst nodeCron = __webpack_require__(/*! ./node-cron.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/cron/node-cron.js");\nconst nodeSchedule = __webpack_require__(/*! ./node-schedule.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/cron/node-schedule.js");\n\n/** Methods to instrument cron libraries for Sentry check-ins */\nconst cron = {\n  instrumentCron: cron$1.instrumentCron,\n  instrumentNodeCron: nodeCron.instrumentNodeCron,\n  instrumentNodeSchedule: nodeSchedule.instrumentNodeSchedule,\n};\n\nexports.cron = cron;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9jcm9uL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGVBQWUsbUJBQU8sQ0FBQywyRUFBVztBQUNsQyxpQkFBaUIsbUJBQU8sQ0FBQyxxRkFBZ0I7QUFDekMscUJBQXFCLG1CQUFPLENBQUMsNkZBQW9COztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsWUFBWTtBQUNaIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAc2VudHJ5XFxub2RlXFxidWlsZFxcY2pzXFxjcm9uXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY3JvbiQxID0gcmVxdWlyZSgnLi9jcm9uLmpzJyk7XG5jb25zdCBub2RlQ3JvbiA9IHJlcXVpcmUoJy4vbm9kZS1jcm9uLmpzJyk7XG5jb25zdCBub2RlU2NoZWR1bGUgPSByZXF1aXJlKCcuL25vZGUtc2NoZWR1bGUuanMnKTtcblxuLyoqIE1ldGhvZHMgdG8gaW5zdHJ1bWVudCBjcm9uIGxpYnJhcmllcyBmb3IgU2VudHJ5IGNoZWNrLWlucyAqL1xuY29uc3QgY3JvbiA9IHtcbiAgaW5zdHJ1bWVudENyb246IGNyb24kMS5pbnN0cnVtZW50Q3JvbixcbiAgaW5zdHJ1bWVudE5vZGVDcm9uOiBub2RlQ3Jvbi5pbnN0cnVtZW50Tm9kZUNyb24sXG4gIGluc3RydW1lbnROb2RlU2NoZWR1bGU6IG5vZGVTY2hlZHVsZS5pbnN0cnVtZW50Tm9kZVNjaGVkdWxlLFxufTtcblxuZXhwb3J0cy5jcm9uID0gY3Jvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/cron/index.js\n')},"(ssr)/./node_modules/@sentry/node/build/cjs/cron/node-cron.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('Object.defineProperty(exports, Symbol.toStringTag, { value: \'Module\' });\n\nconst core = __webpack_require__(/*! @sentry/core */ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js");\nconst common = __webpack_require__(/*! ./common.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/cron/common.js");\n\n/**\n * Wraps the `node-cron` library with check-in monitoring.\n *\n * ```ts\n * import * as Sentry from "@sentry/node";\n * import * as cron from "node-cron";\n *\n * const cronWithCheckIn = Sentry.cron.instrumentNodeCron(cron);\n *\n * cronWithCheckIn.schedule(\n *   "* * * * *",\n *   () => {\n *     console.log("running a task every minute");\n *   },\n *   { name: "my-cron-job" },\n * );\n * ```\n */\nfunction instrumentNodeCron(lib) {\n  return new Proxy(lib, {\n    get(target, prop) {\n      if (prop === \'schedule\' && target.schedule) {\n        // When \'get\' is called for schedule, return a proxied version of the schedule function\n        return new Proxy(target.schedule, {\n          apply(target, thisArg, argArray) {\n            const [expression, callback, options] = argArray;\n\n            const name = options?.name;\n            const timezone = options?.timezone;\n\n            if (!name) {\n              throw new Error(\'Missing "name" for scheduled job. A name is required for Sentry check-in monitoring.\');\n            }\n\n            const monitoredCallback = async () => {\n              return core.withMonitor(\n                name,\n                async () => {\n                  // We have to manually catch here and capture the exception because node-cron swallows errors\n                  // https://github.com/node-cron/node-cron/issues/399\n                  try {\n                    return await callback();\n                  } catch (e) {\n                    core.captureException(e);\n                    throw e;\n                  }\n                },\n                {\n                  schedule: { type: \'crontab\', value: common.replaceCronNames(expression) },\n                  timezone,\n                },\n              );\n            };\n\n            return target.apply(thisArg, [expression, monitoredCallback, options]);\n          },\n        });\n      } else {\n        return target[prop ];\n      }\n    },\n  });\n}\n\nexports.instrumentNodeCron = instrumentNodeCron;\n//# sourceMappingURL=node-cron.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9jcm9uL25vZGUtY3Jvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsb0dBQWM7QUFDbkMsZUFBZSxtQkFBTyxDQUFDLCtFQUFhOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixPQUFPLHFCQUFxQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsOEJBQThCLDZEQUE2RDtBQUMzRjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBOztBQUVBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUEsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAc2VudHJ5XFxub2RlXFxidWlsZFxcY2pzXFxjcm9uXFxub2RlLWNyb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uLmpzJyk7XG5cbi8qKlxuICogV3JhcHMgdGhlIGBub2RlLWNyb25gIGxpYnJhcnkgd2l0aCBjaGVjay1pbiBtb25pdG9yaW5nLlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgKiBhcyBTZW50cnkgZnJvbSBcIkBzZW50cnkvbm9kZVwiO1xuICogaW1wb3J0ICogYXMgY3JvbiBmcm9tIFwibm9kZS1jcm9uXCI7XG4gKlxuICogY29uc3QgY3JvbldpdGhDaGVja0luID0gU2VudHJ5LmNyb24uaW5zdHJ1bWVudE5vZGVDcm9uKGNyb24pO1xuICpcbiAqIGNyb25XaXRoQ2hlY2tJbi5zY2hlZHVsZShcbiAqICAgXCIqICogKiAqICpcIixcbiAqICAgKCkgPT4ge1xuICogICAgIGNvbnNvbGUubG9nKFwicnVubmluZyBhIHRhc2sgZXZlcnkgbWludXRlXCIpO1xuICogICB9LFxuICogICB7IG5hbWU6IFwibXktY3Jvbi1qb2JcIiB9LFxuICogKTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBpbnN0cnVtZW50Tm9kZUNyb24obGliKSB7XG4gIHJldHVybiBuZXcgUHJveHkobGliLCB7XG4gICAgZ2V0KHRhcmdldCwgcHJvcCkge1xuICAgICAgaWYgKHByb3AgPT09ICdzY2hlZHVsZScgJiYgdGFyZ2V0LnNjaGVkdWxlKSB7XG4gICAgICAgIC8vIFdoZW4gJ2dldCcgaXMgY2FsbGVkIGZvciBzY2hlZHVsZSwgcmV0dXJuIGEgcHJveGllZCB2ZXJzaW9uIG9mIHRoZSBzY2hlZHVsZSBmdW5jdGlvblxuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHRhcmdldC5zY2hlZHVsZSwge1xuICAgICAgICAgIGFwcGx5KHRhcmdldCwgdGhpc0FyZywgYXJnQXJyYXkpIHtcbiAgICAgICAgICAgIGNvbnN0IFtleHByZXNzaW9uLCBjYWxsYmFjaywgb3B0aW9uc10gPSBhcmdBcnJheTtcblxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IG9wdGlvbnM/Lm5hbWU7XG4gICAgICAgICAgICBjb25zdCB0aW1lem9uZSA9IG9wdGlvbnM/LnRpbWV6b25lO1xuXG4gICAgICAgICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIFwibmFtZVwiIGZvciBzY2hlZHVsZWQgam9iLiBBIG5hbWUgaXMgcmVxdWlyZWQgZm9yIFNlbnRyeSBjaGVjay1pbiBtb25pdG9yaW5nLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBtb25pdG9yZWRDYWxsYmFjayA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNvcmUud2l0aE1vbml0b3IoXG4gICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIHRvIG1hbnVhbGx5IGNhdGNoIGhlcmUgYW5kIGNhcHR1cmUgdGhlIGV4Y2VwdGlvbiBiZWNhdXNlIG5vZGUtY3JvbiBzd2FsbG93cyBlcnJvcnNcbiAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlLWNyb24vbm9kZS1jcm9uL2lzc3Vlcy8zOTlcbiAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBzY2hlZHVsZTogeyB0eXBlOiAnY3JvbnRhYicsIHZhbHVlOiBjb21tb24ucmVwbGFjZUNyb25OYW1lcyhleHByZXNzaW9uKSB9LFxuICAgICAgICAgICAgICAgICAgdGltZXpvbmUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkodGhpc0FyZywgW2V4cHJlc3Npb24sIG1vbml0b3JlZENhbGxiYWNrLCBvcHRpb25zXSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGFyZ2V0W3Byb3AgXTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy5pbnN0cnVtZW50Tm9kZUNyb24gPSBpbnN0cnVtZW50Tm9kZUNyb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLWNyb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/cron/node-cron.js\n')},"(ssr)/./node_modules/@sentry/node/build/cjs/cron/node-schedule.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/cron/common.js\");\n\n/**\n * Instruments the `node-schedule` library to send a check-in event to Sentry for each job execution.\n *\n * ```ts\n * import * as Sentry from '@sentry/node';\n * import * as schedule from 'node-schedule';\n *\n * const scheduleWithCheckIn = Sentry.cron.instrumentNodeSchedule(schedule);\n *\n * const job = scheduleWithCheckIn.scheduleJob('my-cron-job', '* * * * *', () => {\n *  console.log('You will see this message every minute');\n * });\n * ```\n */\nfunction instrumentNodeSchedule(lib) {\n  return new Proxy(lib, {\n    get(target, prop) {\n      if (prop === 'scheduleJob') {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        return new Proxy(target.scheduleJob, {\n          apply(target, thisArg, argArray) {\n            const [nameOrExpression, expressionOrCallback, callback] = argArray;\n\n            if (\n              typeof nameOrExpression !== 'string' ||\n              typeof expressionOrCallback !== 'string' ||\n              typeof callback !== 'function'\n            ) {\n              throw new Error(\n                \"Automatic instrumentation of 'node-schedule' requires the first parameter of 'scheduleJob' to be a job name string and the second parameter to be a crontab string\",\n              );\n            }\n\n            const monitorSlug = nameOrExpression;\n            const expression = expressionOrCallback;\n\n            async function monitoredCallback() {\n              return core.withMonitor(\n                monitorSlug,\n                async () => {\n                  await callback?.();\n                },\n                {\n                  schedule: { type: 'crontab', value: common.replaceCronNames(expression) },\n                },\n              );\n            }\n\n            return target.apply(thisArg, [monitorSlug, expression, monitoredCallback]);\n          },\n        });\n      }\n\n      return target[prop];\n    },\n  });\n}\n\nexports.instrumentNodeSchedule = instrumentNodeSchedule;\n//# sourceMappingURL=node-schedule.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9jcm9uL25vZGUtc2NoZWR1bGUuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLG9HQUFjO0FBQ25DLGVBQWUsbUJBQU8sQ0FBQywrRUFBYTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsOEJBQThCLDZEQUE2RDtBQUMzRixpQkFBaUI7QUFDakI7QUFDQTs7QUFFQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7O0FBRUE7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBLDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFwxXFxEb3dubG9hZHNcXHRhYm9yQWNhZGVteVVwZGF0ZWRcXHRhYm9yLWFjYWRlbXlcXG5vZGVfbW9kdWxlc1xcQHNlbnRyeVxcbm9kZVxcYnVpbGRcXGNqc1xcY3Jvblxcbm9kZS1zY2hlZHVsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24uanMnKTtcblxuLyoqXG4gKiBJbnN0cnVtZW50cyB0aGUgYG5vZGUtc2NoZWR1bGVgIGxpYnJhcnkgdG8gc2VuZCBhIGNoZWNrLWluIGV2ZW50IHRvIFNlbnRyeSBmb3IgZWFjaCBqb2IgZXhlY3V0aW9uLlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgKiBhcyBTZW50cnkgZnJvbSAnQHNlbnRyeS9ub2RlJztcbiAqIGltcG9ydCAqIGFzIHNjaGVkdWxlIGZyb20gJ25vZGUtc2NoZWR1bGUnO1xuICpcbiAqIGNvbnN0IHNjaGVkdWxlV2l0aENoZWNrSW4gPSBTZW50cnkuY3Jvbi5pbnN0cnVtZW50Tm9kZVNjaGVkdWxlKHNjaGVkdWxlKTtcbiAqXG4gKiBjb25zdCBqb2IgPSBzY2hlZHVsZVdpdGhDaGVja0luLnNjaGVkdWxlSm9iKCdteS1jcm9uLWpvYicsICcqICogKiAqIConLCAoKSA9PiB7XG4gKiAgY29uc29sZS5sb2coJ1lvdSB3aWxsIHNlZSB0aGlzIG1lc3NhZ2UgZXZlcnkgbWludXRlJyk7XG4gKiB9KTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBpbnN0cnVtZW50Tm9kZVNjaGVkdWxlKGxpYikge1xuICByZXR1cm4gbmV3IFByb3h5KGxpYiwge1xuICAgIGdldCh0YXJnZXQsIHByb3ApIHtcbiAgICAgIGlmIChwcm9wID09PSAnc2NoZWR1bGVKb2InKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eSh0YXJnZXQuc2NoZWR1bGVKb2IsIHtcbiAgICAgICAgICBhcHBseSh0YXJnZXQsIHRoaXNBcmcsIGFyZ0FycmF5KSB7XG4gICAgICAgICAgICBjb25zdCBbbmFtZU9yRXhwcmVzc2lvbiwgZXhwcmVzc2lvbk9yQ2FsbGJhY2ssIGNhbGxiYWNrXSA9IGFyZ0FycmF5O1xuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHR5cGVvZiBuYW1lT3JFeHByZXNzaW9uICE9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgICB0eXBlb2YgZXhwcmVzc2lvbk9yQ2FsbGJhY2sgIT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAgIHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBcIkF1dG9tYXRpYyBpbnN0cnVtZW50YXRpb24gb2YgJ25vZGUtc2NoZWR1bGUnIHJlcXVpcmVzIHRoZSBmaXJzdCBwYXJhbWV0ZXIgb2YgJ3NjaGVkdWxlSm9iJyB0byBiZSBhIGpvYiBuYW1lIHN0cmluZyBhbmQgdGhlIHNlY29uZCBwYXJhbWV0ZXIgdG8gYmUgYSBjcm9udGFiIHN0cmluZ1wiLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBtb25pdG9yU2x1ZyA9IG5hbWVPckV4cHJlc3Npb247XG4gICAgICAgICAgICBjb25zdCBleHByZXNzaW9uID0gZXhwcmVzc2lvbk9yQ2FsbGJhY2s7XG5cbiAgICAgICAgICAgIGFzeW5jIGZ1bmN0aW9uIG1vbml0b3JlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgICByZXR1cm4gY29yZS53aXRoTW9uaXRvcihcbiAgICAgICAgICAgICAgICBtb25pdG9yU2x1ZyxcbiAgICAgICAgICAgICAgICBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBhd2FpdCBjYWxsYmFjaz8uKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBzY2hlZHVsZTogeyB0eXBlOiAnY3JvbnRhYicsIHZhbHVlOiBjb21tb24ucmVwbGFjZUNyb25OYW1lcyhleHByZXNzaW9uKSB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkodGhpc0FyZywgW21vbml0b3JTbHVnLCBleHByZXNzaW9uLCBtb25pdG9yZWRDYWxsYmFja10pO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGFyZ2V0W3Byb3BdO1xuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLmluc3RydW1lbnROb2RlU2NoZWR1bGUgPSBpbnN0cnVtZW50Tm9kZVNjaGVkdWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9kZS1zY2hlZHVsZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/cron/node-schedule.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/debug-build.js":(__unused_webpack_module,exports)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\nexports.DEBUG_BUILD = DEBUG_BUILD;\n//# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9kZWJ1Zy1idWlsZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAc2VudHJ5XFxub2RlXFxidWlsZFxcY2pzXFxkZWJ1Zy1idWlsZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLyoqXG4gKiBUaGlzIHNlcnZlcyBhcyBhIGJ1aWxkIHRpbWUgZmxhZyB0aGF0IHdpbGwgYmUgdHJ1ZSBieSBkZWZhdWx0LCBidXQgZmFsc2UgaW4gbm9uLWRlYnVnIGJ1aWxkcyBvciBpZiB1c2VycyByZXBsYWNlIGBfX1NFTlRSWV9ERUJVR19fYCBpbiB0aGVpciBnZW5lcmF0ZWQgY29kZS5cbiAqXG4gKiBBVFRFTlRJT046IFRoaXMgY29uc3RhbnQgbXVzdCBuZXZlciBjcm9zcyBwYWNrYWdlIGJvdW5kYXJpZXMgKGkuZS4gYmUgZXhwb3J0ZWQpIHRvIGd1YXJhbnRlZSB0aGF0IGl0IGNhbiBiZSB1c2VkIGZvciB0cmVlIHNoYWtpbmcuXG4gKi9cbmNvbnN0IERFQlVHX0JVSUxEID0gKHR5cGVvZiBfX1NFTlRSWV9ERUJVR19fID09PSAndW5kZWZpbmVkJyB8fCBfX1NFTlRSWV9ERUJVR19fKTtcblxuZXhwb3J0cy5ERUJVR19CVUlMRCA9IERFQlVHX0JVSUxEO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVidWctYnVpbGQuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/debug-build.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('Object.defineProperty(exports, Symbol.toStringTag, { value: \'Module\' });\n\nconst exports$1 = __webpack_require__(/*! ./logs/exports.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/logs/exports.js");\nconst index = __webpack_require__(/*! ./integrations/http/index.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/http/index.js");\nconst index$1 = __webpack_require__(/*! ./integrations/node-fetch/index.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/node-fetch/index.js");\nconst fs = __webpack_require__(/*! ./integrations/fs.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/fs.js");\nconst context = __webpack_require__(/*! ./integrations/context.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/context.js");\nconst contextlines = __webpack_require__(/*! ./integrations/contextlines.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/contextlines.js");\nconst index$2 = __webpack_require__(/*! ./integrations/local-variables/index.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js");\nconst modules = __webpack_require__(/*! ./integrations/modules.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/modules.js");\nconst onuncaughtexception = __webpack_require__(/*! ./integrations/onuncaughtexception.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js");\nconst onunhandledrejection = __webpack_require__(/*! ./integrations/onunhandledrejection.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js");\nconst index$3 = __webpack_require__(/*! ./integrations/anr/index.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/anr/index.js");\nconst express = __webpack_require__(/*! ./integrations/tracing/express.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express.js");\nconst index$4 = __webpack_require__(/*! ./integrations/tracing/fastify/index.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js");\nconst graphql = __webpack_require__(/*! ./integrations/tracing/graphql.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js");\nconst kafka = __webpack_require__(/*! ./integrations/tracing/kafka.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js");\nconst lrumemoizer = __webpack_require__(/*! ./integrations/tracing/lrumemoizer.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js");\nconst mongo = __webpack_require__(/*! ./integrations/tracing/mongo.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js");\nconst mongoose = __webpack_require__(/*! ./integrations/tracing/mongoose.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js");\nconst mysql = __webpack_require__(/*! ./integrations/tracing/mysql.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js");\nconst mysql2 = __webpack_require__(/*! ./integrations/tracing/mysql2.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js");\nconst redis = __webpack_require__(/*! ./integrations/tracing/redis.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js");\nconst postgres = __webpack_require__(/*! ./integrations/tracing/postgres.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js");\nconst prisma = __webpack_require__(/*! ./integrations/tracing/prisma.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js");\nconst index$5 = __webpack_require__(/*! ./integrations/tracing/hapi/index.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js");\nconst koa = __webpack_require__(/*! ./integrations/tracing/koa.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js");\nconst connect = __webpack_require__(/*! ./integrations/tracing/connect.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js");\nconst spotlight = __webpack_require__(/*! ./integrations/spotlight.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/spotlight.js");\nconst knex = __webpack_require__(/*! ./integrations/tracing/knex.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js");\nconst tedious = __webpack_require__(/*! ./integrations/tracing/tedious.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js");\nconst genericPool = __webpack_require__(/*! ./integrations/tracing/genericPool.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js");\nconst dataloader = __webpack_require__(/*! ./integrations/tracing/dataloader.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js");\nconst amqplib = __webpack_require__(/*! ./integrations/tracing/amqplib.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js");\nconst index$6 = __webpack_require__(/*! ./integrations/tracing/vercelai/index.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js");\nconst childProcess = __webpack_require__(/*! ./integrations/childProcess.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/childProcess.js");\nconst winston = __webpack_require__(/*! ./integrations/winston.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/winston.js");\nconst contextManager = __webpack_require__(/*! ./otel/contextManager.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/otel/contextManager.js");\nconst instrument = __webpack_require__(/*! ./otel/instrument.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js");\nconst index$7 = __webpack_require__(/*! ./sdk/index.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/sdk/index.js");\nconst initOtel = __webpack_require__(/*! ./sdk/initOtel.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/sdk/initOtel.js");\nconst index$8 = __webpack_require__(/*! ./integrations/tracing/index.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/index.js");\nconst api = __webpack_require__(/*! ./sdk/api.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/sdk/api.js");\nconst module$1 = __webpack_require__(/*! ./utils/module.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/utils/module.js");\nconst http = __webpack_require__(/*! ./transports/http.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/transports/http.js");\nconst client = __webpack_require__(/*! ./sdk/client.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/sdk/client.js");\nconst index$9 = __webpack_require__(/*! ./cron/index.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/cron/index.js");\nconst nodeVersion = __webpack_require__(/*! ./nodeVersion.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/nodeVersion.js");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ "(ssr)/./node_modules/@sentry/opentelemetry/build/cjs/index.js");\nconst core = __webpack_require__(/*! @sentry/core */ "(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js");\n\n\n\nexports.logger = exports$1;\nexports.httpIntegration = index.httpIntegration;\nexports.nativeNodeFetchIntegration = index$1.nativeNodeFetchIntegration;\nexports.fsIntegration = fs.fsIntegration;\nexports.nodeContextIntegration = context.nodeContextIntegration;\nexports.contextLinesIntegration = contextlines.contextLinesIntegration;\nexports.localVariablesIntegration = index$2.localVariablesIntegration;\nexports.modulesIntegration = modules.modulesIntegration;\nexports.onUncaughtExceptionIntegration = onuncaughtexception.onUncaughtExceptionIntegration;\nexports.onUnhandledRejectionIntegration = onunhandledrejection.onUnhandledRejectionIntegration;\nexports.anrIntegration = index$3.anrIntegration;\nexports.disableAnrDetectionForCallback = index$3.disableAnrDetectionForCallback;\nexports.expressErrorHandler = express.expressErrorHandler;\nexports.expressIntegration = express.expressIntegration;\nexports.setupExpressErrorHandler = express.setupExpressErrorHandler;\nexports.fastifyIntegration = index$4.fastifyIntegration;\nexports.setupFastifyErrorHandler = index$4.setupFastifyErrorHandler;\nexports.graphqlIntegration = graphql.graphqlIntegration;\nexports.kafkaIntegration = kafka.kafkaIntegration;\nexports.lruMemoizerIntegration = lrumemoizer.lruMemoizerIntegration;\nexports.mongoIntegration = mongo.mongoIntegration;\nexports.mongooseIntegration = mongoose.mongooseIntegration;\nexports.mysqlIntegration = mysql.mysqlIntegration;\nexports.mysql2Integration = mysql2.mysql2Integration;\nexports.redisIntegration = redis.redisIntegration;\nexports.postgresIntegration = postgres.postgresIntegration;\nexports.prismaIntegration = prisma.prismaIntegration;\nexports.hapiIntegration = index$5.hapiIntegration;\nexports.setupHapiErrorHandler = index$5.setupHapiErrorHandler;\nexports.koaIntegration = koa.koaIntegration;\nexports.setupKoaErrorHandler = koa.setupKoaErrorHandler;\nexports.connectIntegration = connect.connectIntegration;\nexports.setupConnectErrorHandler = connect.setupConnectErrorHandler;\nexports.spotlightIntegration = spotlight.spotlightIntegration;\nexports.knexIntegration = knex.knexIntegration;\nexports.tediousIntegration = tedious.tediousIntegration;\nexports.genericPoolIntegration = genericPool.genericPoolIntegration;\nexports.dataloaderIntegration = dataloader.dataloaderIntegration;\nexports.amqplibIntegration = amqplib.amqplibIntegration;\nexports.vercelAIIntegration = index$6.vercelAIIntegration;\nexports.childProcessIntegration = childProcess.childProcessIntegration;\nexports.createSentryWinstonTransport = winston.createSentryWinstonTransport;\nexports.SentryContextManager = contextManager.SentryContextManager;\nexports.generateInstrumentOnce = instrument.generateInstrumentOnce;\nexports.getDefaultIntegrations = index$7.getDefaultIntegrations;\nexports.getDefaultIntegrationsWithoutPerformance = index$7.getDefaultIntegrationsWithoutPerformance;\nexports.init = index$7.init;\nexports.initWithoutDefaultIntegrations = index$7.initWithoutDefaultIntegrations;\nexports.validateOpenTelemetrySetup = index$7.validateOpenTelemetrySetup;\nexports.initOpenTelemetry = initOtel.initOpenTelemetry;\nexports.preloadOpenTelemetry = initOtel.preloadOpenTelemetry;\nexports.getAutoPerformanceIntegrations = index$8.getAutoPerformanceIntegrations;\nexports.defaultStackParser = api.defaultStackParser;\nexports.getSentryRelease = api.getSentryRelease;\nexports.createGetModuleFromFilename = module$1.createGetModuleFromFilename;\nexports.makeNodeTransport = http.makeNodeTransport;\nexports.NodeClient = client.NodeClient;\nexports.cron = index$9.cron;\nexports.NODE_VERSION = nodeVersion.NODE_VERSION;\nexports.setNodeAsyncContextStrategy = opentelemetry.setOpenTelemetryContextAsyncContextStrategy;\nexports.SDK_VERSION = core.SDK_VERSION;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_OP = core.SEMANTIC_ATTRIBUTE_SENTRY_OP;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;\nexports.Scope = core.Scope;\nexports.addBreadcrumb = core.addBreadcrumb;\nexports.addEventProcessor = core.addEventProcessor;\nexports.addIntegration = core.addIntegration;\nexports.captureCheckIn = core.captureCheckIn;\nexports.captureConsoleIntegration = core.captureConsoleIntegration;\nexports.captureEvent = core.captureEvent;\nexports.captureException = core.captureException;\nexports.captureFeedback = core.captureFeedback;\nexports.captureMessage = core.captureMessage;\nexports.captureSession = core.captureSession;\nexports.close = core.close;\nexports.consoleIntegration = core.consoleIntegration;\nexports.consoleLoggingIntegration = core.consoleLoggingIntegration;\nexports.continueTrace = core.continueTrace;\nexports.createTransport = core.createTransport;\nexports.dedupeIntegration = core.dedupeIntegration;\nexports.endSession = core.endSession;\nexports.eventFiltersIntegration = core.eventFiltersIntegration;\nexports.extraErrorDataIntegration = core.extraErrorDataIntegration;\nexports.flush = core.flush;\nexports.functionToStringIntegration = core.functionToStringIntegration;\nexports.getActiveSpan = core.getActiveSpan;\nexports.getClient = core.getClient;\nexports.getCurrentScope = core.getCurrentScope;\nexports.getGlobalScope = core.getGlobalScope;\nexports.getIsolationScope = core.getIsolationScope;\nexports.getRootSpan = core.getRootSpan;\nexports.getSpanDescendants = core.getSpanDescendants;\nexports.getSpanStatusFromHttpCode = core.getSpanStatusFromHttpCode;\nexports.getTraceData = core.getTraceData;\nexports.getTraceMetaTags = core.getTraceMetaTags;\nexports.inboundFiltersIntegration = core.inboundFiltersIntegration;\nexports.instrumentSupabaseClient = core.instrumentSupabaseClient;\nexports.isEnabled = core.isEnabled;\nexports.isInitialized = core.isInitialized;\nexports.lastEventId = core.lastEventId;\nexports.linkedErrorsIntegration = core.linkedErrorsIntegration;\nexports.parameterize = core.parameterize;\nexports.profiler = core.profiler;\nexports.requestDataIntegration = core.requestDataIntegration;\nexports.rewriteFramesIntegration = core.rewriteFramesIntegration;\nexports.setContext = core.setContext;\nexports.setCurrentClient = core.setCurrentClient;\nexports.setExtra = core.setExtra;\nexports.setExtras = core.setExtras;\nexports.setHttpStatus = core.setHttpStatus;\nexports.setMeasurement = core.setMeasurement;\nexports.setTag = core.setTag;\nexports.setTags = core.setTags;\nexports.setUser = core.setUser;\nexports.spanToBaggageHeader = core.spanToBaggageHeader;\nexports.spanToJSON = core.spanToJSON;\nexports.spanToTraceHeader = core.spanToTraceHeader;\nexports.startInactiveSpan = core.startInactiveSpan;\nexports.startNewTrace = core.startNewTrace;\nexports.startSession = core.startSession;\nexports.startSpan = core.startSpan;\nexports.startSpanManual = core.startSpanManual;\nexports.supabaseIntegration = core.supabaseIntegration;\nexports.suppressTracing = core.suppressTracing;\nexports.trpcMiddleware = core.trpcMiddleware;\nexports.updateSpanName = core.updateSpanName;\nexports.withActiveSpan = core.withActiveSpan;\nexports.withIsolationScope = core.withIsolationScope;\nexports.withMonitor = core.withMonitor;\nexports.withScope = core.withScope;\nexports.wrapMcpServerWithSentry = core.wrapMcpServerWithSentry;\nexports.zodErrorsIntegration = core.zodErrorsIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/index.js\n')},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/anr/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst node_util = __webpack_require__(/*! node:util */ \"node:util\");\nconst node_worker_threads = __webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/nodeVersion.js\");\nconst debug = __webpack_require__(/*! ../../utils/debug.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/debug.js\");\n\nconst { isPromise } = node_util.types;\n\n// This string is a placeholder that gets overwritten with the worker code.\nconst base64WorkerScript = '';\n\nconst DEFAULT_INTERVAL = 50;\nconst DEFAULT_HANG_THRESHOLD = 5000;\n\nfunction log(message, ...args) {\n  core.logger.log(`[ANR] ${message}`, ...args);\n}\n\nfunction globalWithScopeFetchFn() {\n  return core.GLOBAL_OBJ;\n}\n\n/** Fetches merged scope data */\nfunction getScopeData() {\n  const scope = core.getGlobalScope().getScopeData();\n  core.mergeScopeData(scope, core.getIsolationScope().getScopeData());\n  core.mergeScopeData(scope, core.getCurrentScope().getScopeData());\n\n  // We remove attachments because they likely won't serialize well as json\n  scope.attachments = [];\n  // We can't serialize event processor functions\n  scope.eventProcessors = [];\n\n  return scope;\n}\n\n/**\n * Gets contexts by calling all event processors. This shouldn't be called until all integrations are setup\n */\nasync function getContexts(client) {\n  let event = { message: 'ANR' };\n  const eventHint = {};\n\n  for (const processor of client.getEventProcessors()) {\n    if (event === null) break;\n    event = await processor(event, eventHint);\n  }\n\n  return event?.contexts || {};\n}\n\nconst INTEGRATION_NAME = 'Anr';\n\nconst _anrIntegration = ((options = {}) => {\n  if (nodeVersion.NODE_VERSION.major < 16 || (nodeVersion.NODE_VERSION.major === 16 && nodeVersion.NODE_VERSION.minor < 17)) {\n    throw new Error('ANR detection requires Node 16.17.0 or later');\n  }\n\n  let worker;\n  let client;\n\n  // Hookup the scope fetch function to the global object so that it can be called from the worker thread via the\n  // debugger when it pauses\n  const gbl = globalWithScopeFetchFn();\n  gbl.__SENTRY_GET_SCOPES__ = getScopeData;\n\n  return {\n    name: INTEGRATION_NAME,\n    startWorker: () => {\n      if (worker) {\n        return;\n      }\n\n      if (client) {\n        worker = _startWorker(client, options);\n      }\n    },\n    stopWorker: () => {\n      if (worker) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        worker.then(stop => {\n          stop();\n          worker = undefined;\n        });\n      }\n    },\n    async setup(initClient) {\n      client = initClient;\n\n      if (options.captureStackTrace && (await debug.isDebuggerEnabled())) {\n        core.logger.warn('ANR captureStackTrace has been disabled because the debugger was already enabled');\n        options.captureStackTrace = false;\n      }\n\n      // setImmediate is used to ensure that all other integrations have had their setup called first.\n      // This allows us to call into all integrations to fetch the full context\n      setImmediate(() => this.startWorker());\n    },\n  } ;\n}) ;\n\nconst anrIntegration = core.defineIntegration(_anrIntegration) ;\n\n/**\n * Starts the ANR worker thread\n *\n * @returns A function to stop the worker\n */\nasync function _startWorker(\n  client,\n  integrationOptions,\n) {\n  const dsn = client.getDsn();\n\n  if (!dsn) {\n    return () => {\n      //\n    };\n  }\n\n  const contexts = await getContexts(client);\n\n  // These will not be accurate if sent later from the worker thread\n  delete contexts.app?.app_memory;\n  delete contexts.device?.free_memory;\n\n  const initOptions = client.getOptions();\n\n  const sdkMetadata = client.getSdkMetadata() || {};\n  if (sdkMetadata.sdk) {\n    sdkMetadata.sdk.integrations = initOptions.integrations.map(i => i.name);\n  }\n\n  const options = {\n    debug: core.logger.isEnabled(),\n    dsn,\n    tunnel: initOptions.tunnel,\n    environment: initOptions.environment || 'production',\n    release: initOptions.release,\n    dist: initOptions.dist,\n    sdkMetadata,\n    appRootPath: integrationOptions.appRootPath,\n    pollInterval: integrationOptions.pollInterval || DEFAULT_INTERVAL,\n    anrThreshold: integrationOptions.anrThreshold || DEFAULT_HANG_THRESHOLD,\n    captureStackTrace: !!integrationOptions.captureStackTrace,\n    maxAnrEvents: integrationOptions.maxAnrEvents || 1,\n    staticTags: integrationOptions.staticTags || {},\n    contexts,\n  };\n\n  if (options.captureStackTrace) {\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    if (!inspector.url()) {\n      inspector.open(0);\n    }\n  }\n\n  const worker = new node_worker_threads.Worker(new URL(`data:application/javascript;base64,${base64WorkerScript}`), {\n    workerData: options,\n    // We don't want any Node args to be passed to the worker\n    execArgv: [],\n    env: { ...process.env, NODE_OPTIONS: undefined },\n  });\n\n  process.on('exit', () => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    worker.terminate();\n  });\n\n  const timer = setInterval(() => {\n    try {\n      const currentSession = core.getIsolationScope().getSession();\n      // We need to copy the session object and remove the toJSON method so it can be sent to the worker\n      // serialized without making it a SerializedSession\n      const session = currentSession ? { ...currentSession, toJSON: undefined } : undefined;\n      // message the worker to tell it the main event loop is still running\n      worker.postMessage({ session, debugImages: core.getFilenameToDebugIdMap(initOptions.stackParser) });\n    } catch (_) {\n      //\n    }\n  }, options.pollInterval);\n  // Timer should not block exit\n  timer.unref();\n\n  worker.on('message', (msg) => {\n    if (msg === 'session-ended') {\n      log('ANR event sent from ANR worker. Clearing session in this thread.');\n      core.getIsolationScope().setSession(undefined);\n    }\n  });\n\n  worker.once('error', (err) => {\n    clearInterval(timer);\n    log('ANR worker error', err);\n  });\n\n  worker.once('exit', (code) => {\n    clearInterval(timer);\n    log('ANR worker exit', code);\n  });\n\n  // Ensure this thread can't block app exit\n  worker.unref();\n\n  return () => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    worker.terminate();\n    clearInterval(timer);\n  };\n}\n\n/**\n * Disables ANR detection for the duration of the callback\n */\nfunction disableAnrDetectionForCallback(callback) {\n  const integration = core.getClient()?.getIntegrationByName(INTEGRATION_NAME) ;\n\n  if (!integration) {\n    return callback();\n  }\n\n  integration.stopWorker();\n\n  const result = callback();\n  if (isPromise(result)) {\n    return result.finally(() => integration.startWorker());\n  }\n\n  integration.startWorker();\n  return result;\n}\n\nexports.anrIntegration = anrIntegration;\nexports.base64WorkerScript = base64WorkerScript;\nexports.disableAnrDetectionForCallback = disableAnrDetectionForCallback;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/anr/index.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/childProcess.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst diagnosticsChannel = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'ChildProcess';\n\n/**\n * Capture breadcrumbs and events for child processes and worker threads.\n */\nconst childProcessIntegration = core.defineIntegration((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setup() {\n      diagnosticsChannel.channel('child_process').subscribe((event) => {\n        if (event && typeof event === 'object' && 'process' in event) {\n          captureChildProcessEvents(event.process , options);\n        }\n      });\n\n      diagnosticsChannel.channel('worker_threads').subscribe((event) => {\n        if (event && typeof event === 'object' && 'worker' in event) {\n          captureWorkerThreadEvents(event.worker , options);\n        }\n      });\n    },\n  };\n});\n\nfunction captureChildProcessEvents(child, options) {\n  let hasExited = false;\n  let data;\n\n  child\n    .on('spawn', () => {\n      // This is Sentry getting macOS OS context\n      if (child.spawnfile === '/usr/bin/sw_vers') {\n        hasExited = true;\n        return;\n      }\n\n      data = { spawnfile: child.spawnfile };\n      if (options.includeChildProcessArgs) {\n        data.spawnargs = child.spawnargs;\n      }\n    })\n    .on('exit', code => {\n      if (!hasExited) {\n        hasExited = true;\n\n        // Only log for non-zero exit codes\n        if (code !== null && code !== 0) {\n          core.addBreadcrumb({\n            category: 'child_process',\n            message: `Child process exited with code '${code}'`,\n            level: code === 0 ? 'info' : 'warning',\n            data,\n          });\n        }\n      }\n    })\n    .on('error', error => {\n      if (!hasExited) {\n        hasExited = true;\n\n        core.addBreadcrumb({\n          category: 'child_process',\n          message: `Child process errored with '${error.message}'`,\n          level: 'error',\n          data,\n        });\n      }\n    });\n}\n\nfunction captureWorkerThreadEvents(worker, options) {\n  let threadId;\n\n  worker\n    .on('online', () => {\n      threadId = worker.threadId;\n    })\n    .on('error', error => {\n      if (options.captureWorkerErrors !== false) {\n        core.captureException(error, {\n          mechanism: { type: 'instrument', handled: false, data: { threadId: String(threadId) } },\n        });\n      } else {\n        core.addBreadcrumb({\n          category: 'worker_thread',\n          message: `Worker thread errored with '${error.message}'`,\n          level: 'error',\n          data: { threadId },\n        });\n      }\n    });\n}\n\nexports.childProcessIntegration = childProcessIntegration;\n//# sourceMappingURL=childProcess.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvY2hpbGRQcm9jZXNzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLDJCQUEyQixtQkFBTyxDQUFDLDBEQUEwQjtBQUM3RCxhQUFhLG1CQUFPLENBQUMsb0dBQWM7O0FBRW5DOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRTtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsS0FBSztBQUM3RDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrREFBa0QsY0FBYztBQUNoRTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw0Q0FBNEMsOEJBQThCO0FBQ2pHLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBLGtEQUFrRCxjQUFjO0FBQ2hFO0FBQ0Esa0JBQWtCLFVBQVU7QUFDNUIsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMOztBQUVBLCtCQUErQjtBQUMvQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFwxXFxEb3dubG9hZHNcXHRhYm9yQWNhZGVteVVwZGF0ZWRcXHRhYm9yLWFjYWRlbXlcXG5vZGVfbW9kdWxlc1xcQHNlbnRyeVxcbm9kZVxcYnVpbGRcXGNqc1xcaW50ZWdyYXRpb25zXFxjaGlsZFByb2Nlc3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGRpYWdub3N0aWNzQ2hhbm5lbCA9IHJlcXVpcmUoJ25vZGU6ZGlhZ25vc3RpY3NfY2hhbm5lbCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0NoaWxkUHJvY2Vzcyc7XG5cbi8qKlxuICogQ2FwdHVyZSBicmVhZGNydW1icyBhbmQgZXZlbnRzIGZvciBjaGlsZCBwcm9jZXNzZXMgYW5kIHdvcmtlciB0aHJlYWRzLlxuICovXG5jb25zdCBjaGlsZFByb2Nlc3NJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oKG9wdGlvbnMgPSB7fSkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXAoKSB7XG4gICAgICBkaWFnbm9zdGljc0NoYW5uZWwuY2hhbm5lbCgnY2hpbGRfcHJvY2VzcycpLnN1YnNjcmliZSgoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50ICYmIHR5cGVvZiBldmVudCA9PT0gJ29iamVjdCcgJiYgJ3Byb2Nlc3MnIGluIGV2ZW50KSB7XG4gICAgICAgICAgY2FwdHVyZUNoaWxkUHJvY2Vzc0V2ZW50cyhldmVudC5wcm9jZXNzICwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBkaWFnbm9zdGljc0NoYW5uZWwuY2hhbm5lbCgnd29ya2VyX3RocmVhZHMnKS5zdWJzY3JpYmUoKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudCAmJiB0eXBlb2YgZXZlbnQgPT09ICdvYmplY3QnICYmICd3b3JrZXInIGluIGV2ZW50KSB7XG4gICAgICAgICAgY2FwdHVyZVdvcmtlclRocmVhZEV2ZW50cyhldmVudC53b3JrZXIgLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn0pO1xuXG5mdW5jdGlvbiBjYXB0dXJlQ2hpbGRQcm9jZXNzRXZlbnRzKGNoaWxkLCBvcHRpb25zKSB7XG4gIGxldCBoYXNFeGl0ZWQgPSBmYWxzZTtcbiAgbGV0IGRhdGE7XG5cbiAgY2hpbGRcbiAgICAub24oJ3NwYXduJywgKCkgPT4ge1xuICAgICAgLy8gVGhpcyBpcyBTZW50cnkgZ2V0dGluZyBtYWNPUyBPUyBjb250ZXh0XG4gICAgICBpZiAoY2hpbGQuc3Bhd25maWxlID09PSAnL3Vzci9iaW4vc3dfdmVycycpIHtcbiAgICAgICAgaGFzRXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBkYXRhID0geyBzcGF3bmZpbGU6IGNoaWxkLnNwYXduZmlsZSB9O1xuICAgICAgaWYgKG9wdGlvbnMuaW5jbHVkZUNoaWxkUHJvY2Vzc0FyZ3MpIHtcbiAgICAgICAgZGF0YS5zcGF3bmFyZ3MgPSBjaGlsZC5zcGF3bmFyZ3M7XG4gICAgICB9XG4gICAgfSlcbiAgICAub24oJ2V4aXQnLCBjb2RlID0+IHtcbiAgICAgIGlmICghaGFzRXhpdGVkKSB7XG4gICAgICAgIGhhc0V4aXRlZCA9IHRydWU7XG5cbiAgICAgICAgLy8gT25seSBsb2cgZm9yIG5vbi16ZXJvIGV4aXQgY29kZXNcbiAgICAgICAgaWYgKGNvZGUgIT09IG51bGwgJiYgY29kZSAhPT0gMCkge1xuICAgICAgICAgIGNvcmUuYWRkQnJlYWRjcnVtYih7XG4gICAgICAgICAgICBjYXRlZ29yeTogJ2NoaWxkX3Byb2Nlc3MnLFxuICAgICAgICAgICAgbWVzc2FnZTogYENoaWxkIHByb2Nlc3MgZXhpdGVkIHdpdGggY29kZSAnJHtjb2RlfSdgLFxuICAgICAgICAgICAgbGV2ZWw6IGNvZGUgPT09IDAgPyAnaW5mbycgOiAnd2FybmluZycsXG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgICAub24oJ2Vycm9yJywgZXJyb3IgPT4ge1xuICAgICAgaWYgKCFoYXNFeGl0ZWQpIHtcbiAgICAgICAgaGFzRXhpdGVkID0gdHJ1ZTtcblxuICAgICAgICBjb3JlLmFkZEJyZWFkY3J1bWIoe1xuICAgICAgICAgIGNhdGVnb3J5OiAnY2hpbGRfcHJvY2VzcycsXG4gICAgICAgICAgbWVzc2FnZTogYENoaWxkIHByb2Nlc3MgZXJyb3JlZCB3aXRoICcke2Vycm9yLm1lc3NhZ2V9J2AsXG4gICAgICAgICAgbGV2ZWw6ICdlcnJvcicsXG4gICAgICAgICAgZGF0YSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNhcHR1cmVXb3JrZXJUaHJlYWRFdmVudHMod29ya2VyLCBvcHRpb25zKSB7XG4gIGxldCB0aHJlYWRJZDtcblxuICB3b3JrZXJcbiAgICAub24oJ29ubGluZScsICgpID0+IHtcbiAgICAgIHRocmVhZElkID0gd29ya2VyLnRocmVhZElkO1xuICAgIH0pXG4gICAgLm9uKCdlcnJvcicsIGVycm9yID0+IHtcbiAgICAgIGlmIChvcHRpb25zLmNhcHR1cmVXb3JrZXJFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlcnJvciwge1xuICAgICAgICAgIG1lY2hhbmlzbTogeyB0eXBlOiAnaW5zdHJ1bWVudCcsIGhhbmRsZWQ6IGZhbHNlLCBkYXRhOiB7IHRocmVhZElkOiBTdHJpbmcodGhyZWFkSWQpIH0gfSxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb3JlLmFkZEJyZWFkY3J1bWIoe1xuICAgICAgICAgIGNhdGVnb3J5OiAnd29ya2VyX3RocmVhZCcsXG4gICAgICAgICAgbWVzc2FnZTogYFdvcmtlciB0aHJlYWQgZXJyb3JlZCB3aXRoICcke2Vycm9yLm1lc3NhZ2V9J2AsXG4gICAgICAgICAgbGV2ZWw6ICdlcnJvcicsXG4gICAgICAgICAgZGF0YTogeyB0aHJlYWRJZCB9LFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbn1cblxuZXhwb3J0cy5jaGlsZFByb2Nlc3NJbnRlZ3JhdGlvbiA9IGNoaWxkUHJvY2Vzc0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hpbGRQcm9jZXNzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/childProcess.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/context.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst node_child_process = __webpack_require__(/*! node:child_process */ \"node:child_process\");\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst os = __webpack_require__(/*! node:os */ \"node:os\");\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst node_util = __webpack_require__(/*! node:util */ \"node:util\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\n\n/* eslint-disable max-lines */\n\n\nconst readFileAsync = node_util.promisify(node_fs.readFile);\nconst readDirAsync = node_util.promisify(node_fs.readdir);\n\n// Process enhanced with methods from Node 18, 20, 22 as @types/node\n// is on `14.18.0` to match minimum version requirements of the SDK\n\nconst INTEGRATION_NAME = 'Context';\n\nconst _nodeContextIntegration = ((options = {}) => {\n  let cachedContext;\n\n  const _options = {\n    app: true,\n    os: true,\n    device: true,\n    culture: true,\n    cloudResource: true,\n    ...options,\n  };\n\n  /** Add contexts to the event. Caches the context so we only look it up once. */\n  async function addContext(event) {\n    if (cachedContext === undefined) {\n      cachedContext = _getContexts();\n    }\n\n    const updatedContext = _updateContext(await cachedContext);\n\n    // TODO(v10): conditional with `sendDefaultPii` here?\n    event.contexts = {\n      ...event.contexts,\n      app: { ...updatedContext.app, ...event.contexts?.app },\n      os: { ...updatedContext.os, ...event.contexts?.os },\n      device: { ...updatedContext.device, ...event.contexts?.device },\n      culture: { ...updatedContext.culture, ...event.contexts?.culture },\n      cloud_resource: { ...updatedContext.cloud_resource, ...event.contexts?.cloud_resource },\n    };\n\n    return event;\n  }\n\n  /** Get the contexts from node. */\n  async function _getContexts() {\n    const contexts = {};\n\n    if (_options.os) {\n      contexts.os = await getOsContext();\n    }\n\n    if (_options.app) {\n      contexts.app = getAppContext();\n    }\n\n    if (_options.device) {\n      contexts.device = getDeviceContext(_options.device);\n    }\n\n    if (_options.culture) {\n      const culture = getCultureContext();\n\n      if (culture) {\n        contexts.culture = culture;\n      }\n    }\n\n    if (_options.cloudResource) {\n      contexts.cloud_resource = getCloudResourceContext();\n    }\n\n    return contexts;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      return addContext(event);\n    },\n  };\n}) ;\n\n/**\n * Capture context about the environment and the device that the client is running on, to events.\n */\nconst nodeContextIntegration = core.defineIntegration(_nodeContextIntegration);\n\n/**\n * Updates the context with dynamic values that can change\n */\nfunction _updateContext(contexts) {\n  // Only update properties if they exist\n\n  if (contexts.app?.app_memory) {\n    contexts.app.app_memory = process.memoryUsage().rss;\n  }\n\n  if (contexts.app?.free_memory && typeof (process ).availableMemory === 'function') {\n    const freeMemory = (process ).availableMemory?.();\n    if (freeMemory != null) {\n      contexts.app.free_memory = freeMemory;\n    }\n  }\n\n  if (contexts.device?.free_memory) {\n    contexts.device.free_memory = os.freemem();\n  }\n\n  return contexts;\n}\n\n/**\n * Returns the operating system context.\n *\n * Based on the current platform, this uses a different strategy to provide the\n * most accurate OS information. Since this might involve spawning subprocesses\n * or accessing the file system, this should only be executed lazily and cached.\n *\n *  - On macOS (Darwin), this will execute the `sw_vers` utility. The context\n *    has a `name`, `version`, `build` and `kernel_version` set.\n *  - On Linux, this will try to load a distribution release from `/etc` and set\n *    the `name`, `version` and `kernel_version` fields.\n *  - On all other platforms, only a `name` and `version` will be returned. Note\n *    that `version` might actually be the kernel version.\n */\nasync function getOsContext() {\n  const platformId = os.platform();\n  switch (platformId) {\n    case 'darwin':\n      return getDarwinInfo();\n    case 'linux':\n      return getLinuxInfo();\n    default:\n      return {\n        name: PLATFORM_NAMES[platformId] || platformId,\n        version: os.release(),\n      };\n  }\n}\n\nfunction getCultureContext() {\n  try {\n    if (typeof process.versions.icu !== 'string') {\n      // Node was built without ICU support\n      return;\n    }\n\n    // Check that node was built with full Intl support. Its possible it was built without support for non-English\n    // locales which will make resolvedOptions inaccurate\n    //\n    // https://nodejs.org/api/intl.html#detecting-internationalization-support\n    const january = new Date(9e8);\n    const spanish = new Intl.DateTimeFormat('es', { month: 'long' });\n    if (spanish.format(january) === 'enero') {\n      const options = Intl.DateTimeFormat().resolvedOptions();\n\n      return {\n        locale: options.locale,\n        timezone: options.timeZone,\n      };\n    }\n  } catch (err) {\n    //\n  }\n\n  return;\n}\n\n/**\n * Get app context information from process\n */\nfunction getAppContext() {\n  const app_memory = process.memoryUsage().rss;\n  const app_start_time = new Date(Date.now() - process.uptime() * 1000).toISOString();\n  // https://nodejs.org/api/process.html#processavailablememory\n  const appContext = { app_start_time, app_memory };\n\n  if (typeof (process ).availableMemory === 'function') {\n    const freeMemory = (process ).availableMemory?.();\n    if (freeMemory != null) {\n      appContext.free_memory = freeMemory;\n    }\n  }\n\n  return appContext;\n}\n\n/**\n * Gets device information from os\n */\nfunction getDeviceContext(deviceOpt) {\n  const device = {};\n\n  // Sometimes os.uptime() throws due to lacking permissions: https://github.com/getsentry/sentry-javascript/issues/8202\n  let uptime;\n  try {\n    uptime = os.uptime();\n  } catch (e) {\n    // noop\n  }\n\n  // os.uptime or its return value seem to be undefined in certain environments (e.g. Azure functions).\n  // Hence, we only set boot time, if we get a valid uptime value.\n  // @see https://github.com/getsentry/sentry-javascript/issues/5856\n  if (typeof uptime === 'number') {\n    device.boot_time = new Date(Date.now() - uptime * 1000).toISOString();\n  }\n\n  device.arch = os.arch();\n\n  if (deviceOpt === true || deviceOpt.memory) {\n    device.memory_size = os.totalmem();\n    device.free_memory = os.freemem();\n  }\n\n  if (deviceOpt === true || deviceOpt.cpu) {\n    const cpuInfo = os.cpus() ;\n    const firstCpu = cpuInfo?.[0];\n    if (firstCpu) {\n      device.processor_count = cpuInfo.length;\n      device.cpu_description = firstCpu.model;\n      device.processor_frequency = firstCpu.speed;\n    }\n  }\n\n  return device;\n}\n\n/** Mapping of Node's platform names to actual OS names. */\nconst PLATFORM_NAMES = {\n  aix: 'IBM AIX',\n  freebsd: 'FreeBSD',\n  openbsd: 'OpenBSD',\n  sunos: 'SunOS',\n  win32: 'Windows',\n};\n\n/** Linux version file to check for a distribution. */\n\n/** Mapping of linux release files located in /etc to distributions. */\nconst LINUX_DISTROS = [\n  { name: 'fedora-release', distros: ['Fedora'] },\n  { name: 'redhat-release', distros: ['Red Hat Linux', 'Centos'] },\n  { name: 'redhat_version', distros: ['Red Hat Linux'] },\n  { name: 'SuSE-release', distros: ['SUSE Linux'] },\n  { name: 'lsb-release', distros: ['Ubuntu Linux', 'Arch Linux'] },\n  { name: 'debian_version', distros: ['Debian'] },\n  { name: 'debian_release', distros: ['Debian'] },\n  { name: 'arch-release', distros: ['Arch Linux'] },\n  { name: 'gentoo-release', distros: ['Gentoo Linux'] },\n  { name: 'novell-release', distros: ['SUSE Linux'] },\n  { name: 'alpine-release', distros: ['Alpine Linux'] },\n];\n\n/** Functions to extract the OS version from Linux release files. */\nconst LINUX_VERSIONS\n\n = {\n  alpine: content => content,\n  arch: content => matchFirst(/distrib_release=(.*)/, content),\n  centos: content => matchFirst(/release ([^ ]+)/, content),\n  debian: content => content,\n  fedora: content => matchFirst(/release (..)/, content),\n  mint: content => matchFirst(/distrib_release=(.*)/, content),\n  red: content => matchFirst(/release ([^ ]+)/, content),\n  suse: content => matchFirst(/VERSION = (.*)\\n/, content),\n  ubuntu: content => matchFirst(/distrib_release=(.*)/, content),\n};\n\n/**\n * Executes a regular expression with one capture group.\n *\n * @param regex A regular expression to execute.\n * @param text Content to execute the RegEx on.\n * @returns The captured string if matched; otherwise undefined.\n */\nfunction matchFirst(regex, text) {\n  const match = regex.exec(text);\n  return match ? match[1] : undefined;\n}\n\n/** Loads the macOS operating system context. */\nasync function getDarwinInfo() {\n  // Default values that will be used in case no operating system information\n  // can be loaded. The default version is computed via heuristics from the\n  // kernel version, but the build ID is missing.\n  const darwinInfo = {\n    kernel_version: os.release(),\n    name: 'Mac OS X',\n    version: `10.${Number(os.release().split('.')[0]) - 4}`,\n  };\n\n  try {\n    // We try to load the actual macOS version by executing the `sw_vers` tool.\n    // This tool should be available on every standard macOS installation. In\n    // case this fails, we stick with the values computed above.\n\n    const output = await new Promise((resolve, reject) => {\n      node_child_process.execFile('/usr/bin/sw_vers', (error, stdout) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(stdout);\n      });\n    });\n\n    darwinInfo.name = matchFirst(/^ProductName:\\s+(.*)$/m, output);\n    darwinInfo.version = matchFirst(/^ProductVersion:\\s+(.*)$/m, output);\n    darwinInfo.build = matchFirst(/^BuildVersion:\\s+(.*)$/m, output);\n  } catch (e) {\n    // ignore\n  }\n\n  return darwinInfo;\n}\n\n/** Returns a distribution identifier to look up version callbacks. */\nfunction getLinuxDistroId(name) {\n  return (name.split(' ') )[0].toLowerCase();\n}\n\n/** Loads the Linux operating system context. */\nasync function getLinuxInfo() {\n  // By default, we cannot assume anything about the distribution or Linux\n  // version. `os.release()` returns the kernel version and we assume a generic\n  // \"Linux\" name, which will be replaced down below.\n  const linuxInfo = {\n    kernel_version: os.release(),\n    name: 'Linux',\n  };\n\n  try {\n    // We start guessing the distribution by listing files in the /etc\n    // directory. This is were most Linux distributions (except Knoppix) store\n    // release files with certain distribution-dependent meta data. We search\n    // for exactly one known file defined in `LINUX_DISTROS` and exit if none\n    // are found. In case there are more than one file, we just stick with the\n    // first one.\n    const etcFiles = await readDirAsync('/etc');\n    const distroFile = LINUX_DISTROS.find(file => etcFiles.includes(file.name));\n    if (!distroFile) {\n      return linuxInfo;\n    }\n\n    // Once that file is known, load its contents. To make searching in those\n    // files easier, we lowercase the file contents. Since these files are\n    // usually quite small, this should not allocate too much memory and we only\n    // hold on to it for a very short amount of time.\n    const distroPath = node_path.join('/etc', distroFile.name);\n    const contents = ((await readFileAsync(distroPath, { encoding: 'utf-8' })) ).toLowerCase();\n\n    // Some Linux distributions store their release information in the same file\n    // (e.g. RHEL and Centos). In those cases, we scan the file for an\n    // identifier, that basically consists of the first word of the linux\n    // distribution name (e.g. \"red\" for Red Hat). In case there is no match, we\n    // just assume the first distribution in our list.\n    const { distros } = distroFile;\n    linuxInfo.name = distros.find(d => contents.indexOf(getLinuxDistroId(d)) >= 0) || distros[0];\n\n    // Based on the found distribution, we can now compute the actual version\n    // number. This is different for every distribution, so several strategies\n    // are computed in `LINUX_VERSIONS`.\n    const id = getLinuxDistroId(linuxInfo.name);\n    linuxInfo.version = LINUX_VERSIONS[id]?.(contents);\n  } catch (e) {\n    // ignore\n  }\n\n  return linuxInfo;\n}\n\n/**\n * Grabs some information about hosting provider based on best effort.\n */\nfunction getCloudResourceContext() {\n  if (process.env.VERCEL) {\n    // https://vercel.com/docs/concepts/projects/environment-variables/system-environment-variables#system-environment-variables\n    return {\n      'cloud.provider': 'vercel',\n      'cloud.region': process.env.VERCEL_REGION,\n    };\n  } else if (process.env.AWS_REGION) {\n    // https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html\n    return {\n      'cloud.provider': 'aws',\n      'cloud.region': process.env.AWS_REGION,\n      'cloud.platform': process.env.AWS_EXECUTION_ENV,\n    };\n  } else if (process.env.GCP_PROJECT) {\n    // https://cloud.google.com/composer/docs/how-to/managing/environment-variables#reserved_variables\n    return {\n      'cloud.provider': 'gcp',\n    };\n  } else if (process.env.ALIYUN_REGION_ID) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'alibaba_cloud',\n      'cloud.region': process.env.ALIYUN_REGION_ID,\n    };\n  } else if (process.env.WEBSITE_SITE_NAME && process.env.REGION_NAME) {\n    // https://learn.microsoft.com/en-us/azure/app-service/reference-app-settings?tabs=kudu%2Cdotnet#app-environment\n    return {\n      'cloud.provider': 'azure',\n      'cloud.region': process.env.REGION_NAME,\n    };\n  } else if (process.env.IBM_CLOUD_REGION) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'ibm_cloud',\n      'cloud.region': process.env.IBM_CLOUD_REGION,\n    };\n  } else if (process.env.TENCENTCLOUD_REGION) {\n    // https://www.tencentcloud.com/document/product/583/32748\n    return {\n      'cloud.provider': 'tencent_cloud',\n      'cloud.region': process.env.TENCENTCLOUD_REGION,\n      'cloud.account.id': process.env.TENCENTCLOUD_APPID,\n      'cloud.availability_zone': process.env.TENCENTCLOUD_ZONE,\n    };\n  } else if (process.env.NETLIFY) {\n    // https://docs.netlify.com/configure-builds/environment-variables/#read-only-variables\n    return {\n      'cloud.provider': 'netlify',\n    };\n  } else if (process.env.FLY_REGION) {\n    // https://fly.io/docs/reference/runtime-environment/\n    return {\n      'cloud.provider': 'fly.io',\n      'cloud.region': process.env.FLY_REGION,\n    };\n  } else if (process.env.DYNO) {\n    // https://devcenter.heroku.com/articles/dynos#local-environment-variables\n    return {\n      'cloud.provider': 'heroku',\n    };\n  } else {\n    return undefined;\n  }\n}\n\nexports.getAppContext = getAppContext;\nexports.getDeviceContext = getDeviceContext;\nexports.nodeContextIntegration = nodeContextIntegration;\nexports.readDirAsync = readDirAsync;\nexports.readFileAsync = readFileAsync;\n//# sourceMappingURL=context.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/context.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/contextlines.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst node_readline = __webpack_require__(/*! node:readline */ \"node:readline\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\n\nconst LRU_FILE_CONTENTS_CACHE = new core.LRUMap(10);\nconst LRU_FILE_CONTENTS_FS_READ_FAILED = new core.LRUMap(20);\nconst DEFAULT_LINES_OF_CONTEXT = 7;\nconst INTEGRATION_NAME = 'ContextLines';\n// Determines the upper bound of lineno/colno that we will attempt to read. Large colno values are likely to be\n// minified code while large lineno values are likely to be bundled code.\n// Exported for testing purposes.\nconst MAX_CONTEXTLINES_COLNO = 1000;\nconst MAX_CONTEXTLINES_LINENO = 10000;\n\n/**\n * Get or init map value\n */\nfunction emplace(map, key, contents) {\n  const value = map.get(key);\n\n  if (value === undefined) {\n    map.set(key, contents);\n    return contents;\n  }\n\n  return value;\n}\n\n/**\n * Determines if context lines should be skipped for a file.\n * - .min.(mjs|cjs|js) files are and not useful since they dont point to the original source\n * - node: prefixed modules are part of the runtime and cannot be resolved to a file\n * - data: skip json, wasm and inline js https://nodejs.org/api/esm.html#data-imports\n */\nfunction shouldSkipContextLinesForFile(path) {\n  // Test the most common prefix and extension first. These are the ones we\n  // are most likely to see in user applications and are the ones we can break out of first.\n  if (path.startsWith('node:')) return true;\n  if (path.endsWith('.min.js')) return true;\n  if (path.endsWith('.min.cjs')) return true;\n  if (path.endsWith('.min.mjs')) return true;\n  if (path.startsWith('data:')) return true;\n  return false;\n}\n\n/**\n * Determines if we should skip contextlines based off the max lineno and colno values.\n */\nfunction shouldSkipContextLinesForFrame(frame) {\n  if (frame.lineno !== undefined && frame.lineno > MAX_CONTEXTLINES_LINENO) return true;\n  if (frame.colno !== undefined && frame.colno > MAX_CONTEXTLINES_COLNO) return true;\n  return false;\n}\n/**\n * Checks if we have all the contents that we need in the cache.\n */\nfunction rangeExistsInContentCache(file, range) {\n  const contents = LRU_FILE_CONTENTS_CACHE.get(file);\n  if (contents === undefined) return false;\n\n  for (let i = range[0]; i <= range[1]; i++) {\n    if (contents[i] === undefined) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Creates contiguous ranges of lines to read from a file. In the case where context lines overlap,\n * the ranges are merged to create a single range.\n */\nfunction makeLineReaderRanges(lines, linecontext) {\n  if (!lines.length) {\n    return [];\n  }\n\n  let i = 0;\n  const line = lines[0];\n\n  if (typeof line !== 'number') {\n    return [];\n  }\n\n  let current = makeContextRange(line, linecontext);\n  const out = [];\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (i === lines.length - 1) {\n      out.push(current);\n      break;\n    }\n\n    // If the next line falls into the current range, extend the current range to lineno + linecontext.\n    const next = lines[i + 1];\n    if (typeof next !== 'number') {\n      break;\n    }\n    if (next <= current[1]) {\n      current[1] = next + linecontext;\n    } else {\n      out.push(current);\n      current = makeContextRange(next, linecontext);\n    }\n\n    i++;\n  }\n\n  return out;\n}\n\n/**\n * Extracts lines from a file and stores them in a cache.\n */\nfunction getContextLinesFromFile(path, ranges, output) {\n  return new Promise((resolve, _reject) => {\n    // It is important *not* to have any async code between createInterface and the 'line' event listener\n    // as it will cause the 'line' event to\n    // be emitted before the listener is attached.\n    const stream = node_fs.createReadStream(path);\n    const lineReaded = node_readline.createInterface({\n      input: stream,\n    });\n\n    // We need to explicitly destroy the stream to prevent memory leaks,\n    // removing the listeners on the readline interface is not enough.\n    // See: https://github.com/nodejs/node/issues/9002 and https://github.com/getsentry/sentry-javascript/issues/14892\n    function destroyStreamAndResolve() {\n      stream.destroy();\n      resolve();\n    }\n\n    // Init at zero and increment at the start of the loop because lines are 1 indexed.\n    let lineNumber = 0;\n    let currentRangeIndex = 0;\n    const range = ranges[currentRangeIndex];\n    if (range === undefined) {\n      // We should never reach this point, but if we do, we should resolve the promise to prevent it from hanging.\n      destroyStreamAndResolve();\n      return;\n    }\n    let rangeStart = range[0];\n    let rangeEnd = range[1];\n\n    // We use this inside Promise.all, so we need to resolve the promise even if there is an error\n    // to prevent Promise.all from short circuiting the rest.\n    function onStreamError(e) {\n      // Mark file path as failed to read and prevent multiple read attempts.\n      LRU_FILE_CONTENTS_FS_READ_FAILED.set(path, 1);\n      debugBuild.DEBUG_BUILD && core.logger.error(`Failed to read file: ${path}. Error: ${e}`);\n      lineReaded.close();\n      lineReaded.removeAllListeners();\n      destroyStreamAndResolve();\n    }\n\n    // We need to handle the error event to prevent the process from crashing in < Node 16\n    // https://github.com/nodejs/node/pull/31603\n    stream.on('error', onStreamError);\n    lineReaded.on('error', onStreamError);\n    lineReaded.on('close', destroyStreamAndResolve);\n\n    lineReaded.on('line', line => {\n      lineNumber++;\n      if (lineNumber < rangeStart) return;\n\n      // !Warning: This mutates the cache by storing the snipped line into the cache.\n      output[lineNumber] = core.snipLine(line, 0);\n\n      if (lineNumber >= rangeEnd) {\n        if (currentRangeIndex === ranges.length - 1) {\n          // We need to close the file stream and remove listeners, else the reader will continue to run our listener;\n          lineReaded.close();\n          lineReaded.removeAllListeners();\n          return;\n        }\n        currentRangeIndex++;\n        const range = ranges[currentRangeIndex];\n        if (range === undefined) {\n          // This should never happen as it means we have a bug in the context.\n          lineReaded.close();\n          lineReaded.removeAllListeners();\n          return;\n        }\n        rangeStart = range[0];\n        rangeEnd = range[1];\n      }\n    });\n  });\n}\n\n/**\n * Adds surrounding (context) lines of the line that an exception occurred on to the event.\n * This is done by reading the file line by line and extracting the lines. The extracted lines are stored in\n * a cache to prevent multiple reads of the same file. Failures to read a file are similarly cached to prevent multiple\n * failing reads from happening.\n */\n/* eslint-disable complexity */\nasync function addSourceContext(event, contextLines) {\n  // keep a lookup map of which files we've already enqueued to read,\n  // so we don't enqueue the same file multiple times which would cause multiple i/o reads\n  const filesToLines = {};\n\n  if (contextLines > 0 && event.exception?.values) {\n    for (const exception of event.exception.values) {\n      if (!exception.stacktrace?.frames?.length) {\n        continue;\n      }\n\n      // Maps preserve insertion order, so we iterate in reverse, starting at the\n      // outermost frame and closer to where the exception has occurred (poor mans priority)\n      for (let i = exception.stacktrace.frames.length - 1; i >= 0; i--) {\n        const frame = exception.stacktrace.frames[i];\n        const filename = frame?.filename;\n\n        if (\n          !frame ||\n          typeof filename !== 'string' ||\n          typeof frame.lineno !== 'number' ||\n          shouldSkipContextLinesForFile(filename) ||\n          shouldSkipContextLinesForFrame(frame)\n        ) {\n          continue;\n        }\n\n        const filesToLinesOutput = filesToLines[filename];\n        if (!filesToLinesOutput) filesToLines[filename] = [];\n        // @ts-expect-error this is defined above\n        filesToLines[filename].push(frame.lineno);\n      }\n    }\n  }\n\n  const files = Object.keys(filesToLines);\n  if (files.length == 0) {\n    return event;\n  }\n\n  const readlinePromises = [];\n  for (const file of files) {\n    // If we failed to read this before, dont try reading it again.\n    if (LRU_FILE_CONTENTS_FS_READ_FAILED.get(file)) {\n      continue;\n    }\n\n    const filesToLineRanges = filesToLines[file];\n    if (!filesToLineRanges) {\n      continue;\n    }\n\n    // Sort ranges so that they are sorted by line increasing order and match how the file is read.\n    filesToLineRanges.sort((a, b) => a - b);\n    // Check if the contents are already in the cache and if we can avoid reading the file again.\n    const ranges = makeLineReaderRanges(filesToLineRanges, contextLines);\n    if (ranges.every(r => rangeExistsInContentCache(file, r))) {\n      continue;\n    }\n\n    const cache = emplace(LRU_FILE_CONTENTS_CACHE, file, {});\n    readlinePromises.push(getContextLinesFromFile(file, ranges, cache));\n  }\n\n  // The promise rejections are caught in order to prevent them from short circuiting Promise.all\n  await Promise.all(readlinePromises).catch(() => {\n    debugBuild.DEBUG_BUILD && core.logger.log('Failed to read one or more source files and resolve context lines');\n  });\n\n  // Perform the same loop as above, but this time we can assume all files are in the cache\n  // and attempt to add source context to frames.\n  if (contextLines > 0 && event.exception?.values) {\n    for (const exception of event.exception.values) {\n      if (exception.stacktrace?.frames && exception.stacktrace.frames.length > 0) {\n        addSourceContextToFrames(exception.stacktrace.frames, contextLines, LRU_FILE_CONTENTS_CACHE);\n      }\n    }\n  }\n\n  return event;\n}\n/* eslint-enable complexity */\n\n/** Adds context lines to frames */\nfunction addSourceContextToFrames(\n  frames,\n  contextLines,\n  cache,\n) {\n  for (const frame of frames) {\n    // Only add context if we have a filename and it hasn't already been added\n    if (frame.filename && frame.context_line === undefined && typeof frame.lineno === 'number') {\n      const contents = cache.get(frame.filename);\n      if (contents === undefined) {\n        continue;\n      }\n\n      addContextToFrame(frame.lineno, frame, contextLines, contents);\n    }\n  }\n}\n\n/**\n * Clears the context lines from a frame, used to reset a frame to its original state\n * if we fail to resolve all context lines for it.\n */\nfunction clearLineContext(frame) {\n  delete frame.pre_context;\n  delete frame.context_line;\n  delete frame.post_context;\n}\n\n/**\n * Resolves context lines before and after the given line number and appends them to the frame;\n */\nfunction addContextToFrame(\n  lineno,\n  frame,\n  contextLines,\n  contents,\n) {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping.\n  // We already check for lineno before calling this, but since StackFrame lineno ism optional, we check it again.\n  if (frame.lineno === undefined || contents === undefined) {\n    debugBuild.DEBUG_BUILD && core.logger.error('Cannot resolve context for frame with no lineno or file contents');\n    return;\n  }\n\n  frame.pre_context = [];\n  for (let i = makeRangeStart(lineno, contextLines); i < lineno; i++) {\n    // We always expect the start context as line numbers cannot be negative. If we dont find a line, then\n    // something went wrong somewhere. Clear the context and return without adding any linecontext.\n    const line = contents[i];\n    if (line === undefined) {\n      clearLineContext(frame);\n      debugBuild.DEBUG_BUILD && core.logger.error(`Could not find line ${i} in file ${frame.filename}`);\n      return;\n    }\n\n    frame.pre_context.push(line);\n  }\n\n  // We should always have the context line. If we dont, something went wrong, so we clear the context and return\n  // without adding any linecontext.\n  if (contents[lineno] === undefined) {\n    clearLineContext(frame);\n    debugBuild.DEBUG_BUILD && core.logger.error(`Could not find line ${lineno} in file ${frame.filename}`);\n    return;\n  }\n\n  frame.context_line = contents[lineno];\n\n  const end = makeRangeEnd(lineno, contextLines);\n  frame.post_context = [];\n  for (let i = lineno + 1; i <= end; i++) {\n    // Since we dont track when the file ends, we cant clear the context if we dont find a line as it could\n    // just be that we reached the end of the file.\n    const line = contents[i];\n    if (line === undefined) {\n      break;\n    }\n    frame.post_context.push(line);\n  }\n}\n\n// Helper functions for generating line context ranges. They take a line number and the number of lines of context to\n// include before and after the line and generate an inclusive range of indices.\n\n// Compute inclusive end context range\nfunction makeRangeStart(line, linecontext) {\n  return Math.max(1, line - linecontext);\n}\n// Compute inclusive start context range\nfunction makeRangeEnd(line, linecontext) {\n  return line + linecontext;\n}\n// Determine start and end indices for context range (inclusive);\nfunction makeContextRange(line, linecontext) {\n  return [makeRangeStart(line, linecontext), makeRangeEnd(line, linecontext)];\n}\n\n/** Exported only for tests, as a type-safe variant. */\nconst _contextLinesIntegration = ((options = {}) => {\n  const contextLines = options.frameContextLines !== undefined ? options.frameContextLines : DEFAULT_LINES_OF_CONTEXT;\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      return addSourceContext(event, contextLines);\n    },\n  };\n}) ;\n\n/**\n * Capture the lines before and after the frame's context.\n */\nconst contextLinesIntegration = core.defineIntegration(_contextLinesIntegration);\n\nexports.MAX_CONTEXTLINES_COLNO = MAX_CONTEXTLINES_COLNO;\nexports.MAX_CONTEXTLINES_LINENO = MAX_CONTEXTLINES_LINENO;\nexports._contextLinesIntegration = _contextLinesIntegration;\nexports.addContextToFrame = addContextToFrame;\nexports.contextLinesIntegration = contextLinesIntegration;\n//# sourceMappingURL=contextlines.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/contextlines.js\n")}};