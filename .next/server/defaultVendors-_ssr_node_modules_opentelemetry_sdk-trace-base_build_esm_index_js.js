"use strict";exports.id="defaultVendors-_ssr_node_modules_opentelemetry_sdk-trace-base_build_esm_index_js",exports.ids=["defaultVendors-_ssr_node_modules_opentelemetry_sdk-trace-base_build_esm_index_js"],exports.modules={"(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasicTracerProvider: () => (/* binding */ BasicTracerProvider),\n/* harmony export */   ForceFlushState: () => (/* binding */ ForceFlushState)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @opentelemetry/api */ "(ssr)/./node_modules/@opentelemetry/api/build/esm/diag-api.js");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @opentelemetry/api */ "(ssr)/./node_modules/@opentelemetry/api/build/esm/trace-api.js");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @opentelemetry/api */ "(ssr)/./node_modules/@opentelemetry/api/build/esm/context-api.js");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @opentelemetry/api */ "(ssr)/./node_modules/@opentelemetry/api/build/esm/propagation-api.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/utils/merge.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/platform/node/environment.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/propagation/composite.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js");\n/* harmony import */ var _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/resources */ "(ssr)/./node_modules/@opentelemetry/resources/build/esm/Resource.js");\n/* harmony import */ var _Tracer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Tracer */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js");\n/* harmony import */ var _MultiSpanProcessor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./MultiSpanProcessor */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js");\n/* harmony import */ var _export_NoopSpanProcessor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./export/NoopSpanProcessor */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./platform */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/export/BatchSpanProcessor.js");\n/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utility */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === "function" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i["return"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n\n\n\n\n\n\n\n\nvar ForceFlushState;\n(function (ForceFlushState) {\n    ForceFlushState[ForceFlushState["resolved"] = 0] = "resolved";\n    ForceFlushState[ForceFlushState["timeout"] = 1] = "timeout";\n    ForceFlushState[ForceFlushState["error"] = 2] = "error";\n    ForceFlushState[ForceFlushState["unresolved"] = 3] = "unresolved";\n})(ForceFlushState || (ForceFlushState = {}));\n/**\n * This class represents a basic tracer provider which platform libraries can extend\n */\nvar BasicTracerProvider = /** @class */ (function () {\n    function BasicTracerProvider(config) {\n        if (config === void 0) { config = {}; }\n        var _a, _b;\n        this._registeredSpanProcessors = [];\n        this._tracers = new Map();\n        var mergedConfig = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.merge)({}, (0,_config__WEBPACK_IMPORTED_MODULE_1__.loadDefaultConfig)(), (0,_utility__WEBPACK_IMPORTED_MODULE_2__.reconfigureLimits)(config));\n        this.resource = (_a = mergedConfig.resource) !== null && _a !== void 0 ? _a : _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_3__.Resource.empty();\n        if (mergedConfig.mergeResourceWithDefaults) {\n            this.resource = _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_3__.Resource.default().merge(this.resource);\n        }\n        this._config = Object.assign({}, mergedConfig, {\n            resource: this.resource,\n        });\n        if ((_b = config.spanProcessors) === null || _b === void 0 ? void 0 : _b.length) {\n            this._registeredSpanProcessors = __spreadArray([], __read(config.spanProcessors), false);\n            this.activeSpanProcessor = new _MultiSpanProcessor__WEBPACK_IMPORTED_MODULE_4__.MultiSpanProcessor(this._registeredSpanProcessors);\n        }\n        else {\n            var defaultExporter = this._buildExporterFromEnv();\n            if (defaultExporter !== undefined) {\n                var batchProcessor = new _platform__WEBPACK_IMPORTED_MODULE_5__.BatchSpanProcessor(defaultExporter);\n                this.activeSpanProcessor = batchProcessor;\n            }\n            else {\n                this.activeSpanProcessor = new _export_NoopSpanProcessor__WEBPACK_IMPORTED_MODULE_6__.NoopSpanProcessor();\n            }\n        }\n    }\n    BasicTracerProvider.prototype.getTracer = function (name, version, options) {\n        var key = name + "@" + (version || \'\') + ":" + ((options === null || options === void 0 ? void 0 : options.schemaUrl) || \'\');\n        if (!this._tracers.has(key)) {\n            this._tracers.set(key, new _Tracer__WEBPACK_IMPORTED_MODULE_7__.Tracer({ name: name, version: version, schemaUrl: options === null || options === void 0 ? void 0 : options.schemaUrl }, this._config, this));\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this._tracers.get(key);\n    };\n    /**\n     * @deprecated please use {@link TracerConfig} spanProcessors property\n     * Adds a new {@link SpanProcessor} to this tracer.\n     * @param spanProcessor the new SpanProcessor to be added.\n     */\n    BasicTracerProvider.prototype.addSpanProcessor = function (spanProcessor) {\n        if (this._registeredSpanProcessors.length === 0) {\n            // since we might have enabled by default a batchProcessor, we disable it\n            // before adding the new one\n            this.activeSpanProcessor\n                .shutdown()\n                .catch(function (err) {\n                return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_8__.diag.error(\'Error while trying to shutdown current span processor\', err);\n            });\n        }\n        this._registeredSpanProcessors.push(spanProcessor);\n        this.activeSpanProcessor = new _MultiSpanProcessor__WEBPACK_IMPORTED_MODULE_4__.MultiSpanProcessor(this._registeredSpanProcessors);\n    };\n    BasicTracerProvider.prototype.getActiveSpanProcessor = function () {\n        return this.activeSpanProcessor;\n    };\n    /**\n     * Register this TracerProvider for use with the OpenTelemetry API.\n     * Undefined values may be replaced with defaults, and\n     * null values will be skipped.\n     *\n     * @param config Configuration object for SDK registration\n     */\n    BasicTracerProvider.prototype.register = function (config) {\n        if (config === void 0) { config = {}; }\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__.trace.setGlobalTracerProvider(this);\n        if (config.propagator === undefined) {\n            config.propagator = this._buildPropagatorFromEnv();\n        }\n        if (config.contextManager) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_10__.context.setGlobalContextManager(config.contextManager);\n        }\n        if (config.propagator) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_11__.propagation.setGlobalPropagator(config.propagator);\n        }\n    };\n    BasicTracerProvider.prototype.forceFlush = function () {\n        var timeout = this._config.forceFlushTimeoutMillis;\n        var promises = this._registeredSpanProcessors.map(function (spanProcessor) {\n            return new Promise(function (resolve) {\n                var state;\n                var timeoutInterval = setTimeout(function () {\n                    resolve(new Error("Span processor did not completed within timeout period of " + timeout + " ms"));\n                    state = ForceFlushState.timeout;\n                }, timeout);\n                spanProcessor\n                    .forceFlush()\n                    .then(function () {\n                    clearTimeout(timeoutInterval);\n                    if (state !== ForceFlushState.timeout) {\n                        state = ForceFlushState.resolved;\n                        resolve(state);\n                    }\n                })\n                    .catch(function (error) {\n                    clearTimeout(timeoutInterval);\n                    state = ForceFlushState.error;\n                    resolve(error);\n                });\n            });\n        });\n        return new Promise(function (resolve, reject) {\n            Promise.all(promises)\n                .then(function (results) {\n                var errors = results.filter(function (result) { return result !== ForceFlushState.resolved; });\n                if (errors.length > 0) {\n                    reject(errors);\n                }\n                else {\n                    resolve();\n                }\n            })\n                .catch(function (error) { return reject([error]); });\n        });\n    };\n    BasicTracerProvider.prototype.shutdown = function () {\n        return this.activeSpanProcessor.shutdown();\n    };\n    /**\n     * TS cannot yet infer the type of this.constructor:\n     * https://github.com/Microsoft/TypeScript/issues/3841#issuecomment-337560146\n     * There is no need to override either of the getters in your child class.\n     * The type of the registered component maps should be the same across all\n     * classes in the inheritance tree.\n     */\n    BasicTracerProvider.prototype._getPropagator = function (name) {\n        var _a;\n        return (_a = this.constructor._registeredPropagators.get(name)) === null || _a === void 0 ? void 0 : _a();\n    };\n    BasicTracerProvider.prototype._getSpanExporter = function (name) {\n        var _a;\n        return (_a = this.constructor._registeredExporters.get(name)) === null || _a === void 0 ? void 0 : _a();\n    };\n    BasicTracerProvider.prototype._buildPropagatorFromEnv = function () {\n        var _this = this;\n        // per spec, propagators from env must be deduplicated\n        var uniquePropagatorNames = Array.from(new Set((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_12__.getEnv)().OTEL_PROPAGATORS));\n        var propagators = uniquePropagatorNames.map(function (name) {\n            var propagator = _this._getPropagator(name);\n            if (!propagator) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_8__.diag.warn("Propagator \\"" + name + "\\" requested through environment variable is unavailable.");\n            }\n            return propagator;\n        });\n        var validPropagators = propagators.reduce(function (list, item) {\n            if (item) {\n                list.push(item);\n            }\n            return list;\n        }, []);\n        if (validPropagators.length === 0) {\n            return;\n        }\n        else if (uniquePropagatorNames.length === 1) {\n            return validPropagators[0];\n        }\n        else {\n            return new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_13__.CompositePropagator({\n                propagators: validPropagators,\n            });\n        }\n    };\n    BasicTracerProvider.prototype._buildExporterFromEnv = function () {\n        var exporterName = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_12__.getEnv)().OTEL_TRACES_EXPORTER;\n        if (exporterName === \'none\' || exporterName === \'\')\n            return;\n        var exporter = this._getSpanExporter(exporterName);\n        if (!exporter) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_8__.diag.error("Exporter \\"" + exporterName + "\\" requested through environment variable is unavailable.");\n        }\n        return exporter;\n    };\n    BasicTracerProvider._registeredPropagators = new Map([\n        [\'tracecontext\', function () { return new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_14__.W3CTraceContextPropagator(); }],\n        [\'baggage\', function () { return new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_15__.W3CBaggagePropagator(); }],\n    ]);\n    BasicTracerProvider._registeredExporters = new Map();\n    return BasicTracerProvider;\n}());\n\n//# sourceMappingURL=BasicTracerProvider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js\n')},"(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MultiSpanProcessor: () => (/* binding */ MultiSpanProcessor)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (undefined && undefined.__values) || function(o) {\n    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === "number") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");\n};\n\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nvar MultiSpanProcessor = /** @class */ (function () {\n    function MultiSpanProcessor(_spanProcessors) {\n        this._spanProcessors = _spanProcessors;\n    }\n    MultiSpanProcessor.prototype.forceFlush = function () {\n        var e_1, _a;\n        var promises = [];\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                promises.push(spanProcessor.forceFlush());\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return new Promise(function (resolve) {\n            Promise.all(promises)\n                .then(function () {\n                resolve();\n            })\n                .catch(function (error) {\n                (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.globalErrorHandler)(error || new Error(\'MultiSpanProcessor: forceFlush failed\'));\n                resolve();\n            });\n        });\n    };\n    MultiSpanProcessor.prototype.onStart = function (span, context) {\n        var e_2, _a;\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                spanProcessor.onStart(span, context);\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n    };\n    MultiSpanProcessor.prototype.onEnd = function (span) {\n        var e_3, _a;\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                spanProcessor.onEnd(span);\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n    };\n    MultiSpanProcessor.prototype.shutdown = function () {\n        var e_4, _a;\n        var promises = [];\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                promises.push(spanProcessor.shutdown());\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n        return new Promise(function (resolve, reject) {\n            Promise.all(promises).then(function () {\n                resolve();\n            }, reject);\n        });\n    };\n    return MultiSpanProcessor;\n}());\n\n//# sourceMappingURL=MultiSpanProcessor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UvYnVpbGQvZXNtL011bHRpU3BhblByb2Nlc3Nvci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixTQUFJLElBQUksU0FBSTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ3lEO0FBQ3pEO0FBQ0EsMEJBQTBCLHFCQUFxQjtBQUMvQyxpQ0FBaUMsb0JBQW9CO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBFQUEwRSxVQUFVO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGdCQUFnQix1RUFBa0I7QUFDbEM7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFLFVBQVU7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsUUFBUTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFLFVBQVU7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsUUFBUTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEUsVUFBVTtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixRQUFRO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUM2QjtBQUM5QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFwxXFxEb3dubG9hZHNcXHRhYm9yQWNhZGVteVVwZGF0ZWRcXHRhYm9yLWFjYWRlbXlcXG5vZGVfbW9kdWxlc1xcQG9wZW50ZWxlbWV0cnlcXHNkay10cmFjZS1iYXNlXFxidWlsZFxcZXNtXFxNdWx0aVNwYW5Qcm9jZXNzb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfX3ZhbHVlcyA9ICh0aGlzICYmIHRoaXMuX192YWx1ZXMpIHx8IGZ1bmN0aW9uKG8pIHtcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xufTtcbmltcG9ydCB7IGdsb2JhbEVycm9ySGFuZGxlciB9IGZyb20gJ0BvcGVudGVsZW1ldHJ5L2NvcmUnO1xuLyoqXG4gKiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUge0BsaW5rIFNwYW5Qcm9jZXNzb3J9IHRoYXQgc2ltcGx5IGZvcndhcmRzIGFsbFxuICogcmVjZWl2ZWQgZXZlbnRzIHRvIGEgbGlzdCBvZiB7QGxpbmsgU3BhblByb2Nlc3Nvcn1zLlxuICovXG52YXIgTXVsdGlTcGFuUHJvY2Vzc29yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE11bHRpU3BhblByb2Nlc3Nvcihfc3BhblByb2Nlc3NvcnMpIHtcbiAgICAgICAgdGhpcy5fc3BhblByb2Nlc3NvcnMgPSBfc3BhblByb2Nlc3NvcnM7XG4gICAgfVxuICAgIE11bHRpU3BhblByb2Nlc3Nvci5wcm90b3R5cGUuZm9yY2VGbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgIHZhciBwcm9taXNlcyA9IFtdO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyh0aGlzLl9zcGFuUHJvY2Vzc29ycyksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3BhblByb2Nlc3NvciA9IF9jLnZhbHVlO1xuICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2goc3BhblByb2Nlc3Nvci5mb3JjZUZsdXNoKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsRXJyb3JIYW5kbGVyKGVycm9yIHx8IG5ldyBFcnJvcignTXVsdGlTcGFuUHJvY2Vzc29yOiBmb3JjZUZsdXNoIGZhaWxlZCcpKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBNdWx0aVNwYW5Qcm9jZXNzb3IucHJvdG90eXBlLm9uU3RhcnQgPSBmdW5jdGlvbiAoc3BhbiwgY29udGV4dCkge1xuICAgICAgICB2YXIgZV8yLCBfYTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIF9iID0gX192YWx1ZXModGhpcy5fc3BhblByb2Nlc3NvcnMpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNwYW5Qcm9jZXNzb3IgPSBfYy52YWx1ZTtcbiAgICAgICAgICAgICAgICBzcGFuUHJvY2Vzc29yLm9uU3RhcnQoc3BhbiwgY29udGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgTXVsdGlTcGFuUHJvY2Vzc29yLnByb3RvdHlwZS5vbkVuZCA9IGZ1bmN0aW9uIChzcGFuKSB7XG4gICAgICAgIHZhciBlXzMsIF9hO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyh0aGlzLl9zcGFuUHJvY2Vzc29ycyksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3BhblByb2Nlc3NvciA9IF9jLnZhbHVlO1xuICAgICAgICAgICAgICAgIHNwYW5Qcm9jZXNzb3Iub25FbmQoc3Bhbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfM18xKSB7IGVfMyA9IHsgZXJyb3I6IGVfM18xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8zKSB0aHJvdyBlXzMuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgTXVsdGlTcGFuUHJvY2Vzc29yLnByb3RvdHlwZS5zaHV0ZG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVfNCwgX2E7XG4gICAgICAgIHZhciBwcm9taXNlcyA9IFtdO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyh0aGlzLl9zcGFuUHJvY2Vzc29ycyksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3BhblByb2Nlc3NvciA9IF9jLnZhbHVlO1xuICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2goc3BhblByb2Nlc3Nvci5zaHV0ZG93bigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV80XzEpIHsgZV80ID0geyBlcnJvcjogZV80XzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzQpIHRocm93IGVfNC5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gTXVsdGlTcGFuUHJvY2Vzc29yO1xufSgpKTtcbmV4cG9ydCB7IE11bHRpU3BhblByb2Nlc3NvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TXVsdGlTcGFuUHJvY2Vzc29yLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js\n')},"(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SamplingDecision: () => (/* binding */ SamplingDecision)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nvar SamplingDecision;\n(function (SamplingDecision) {\n    /**\n     * `Span.isRecording() === false`, span will not be recorded and all events\n     * and attributes will be dropped.\n     */\n    SamplingDecision[SamplingDecision["NOT_RECORD"] = 0] = "NOT_RECORD";\n    /**\n     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n     * MUST NOT be set.\n     */\n    SamplingDecision[SamplingDecision["RECORD"] = 1] = "RECORD";\n    /**\n     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n     * MUST be set.\n     */\n    SamplingDecision[SamplingDecision["RECORD_AND_SAMPLED"] = 2] = "RECORD_AND_SAMPLED";\n})(SamplingDecision || (SamplingDecision = {}));\n//# sourceMappingURL=Sampler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UvYnVpbGQvZXNtL1NhbXBsZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLFlBQVk7QUFDMUQ7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQ7QUFDNUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0Q0FBNEM7QUFDN0MiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBvcGVudGVsZW1ldHJ5XFxzZGstdHJhY2UtYmFzZVxcYnVpbGRcXGVzbVxcU2FtcGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIHNhbXBsaW5nIGRlY2lzaW9uIHRoYXQgZGV0ZXJtaW5lcyBob3cgYSB7QGxpbmsgU3Bhbn0gd2lsbCBiZSByZWNvcmRlZFxuICogYW5kIGNvbGxlY3RlZC5cbiAqL1xuZXhwb3J0IHZhciBTYW1wbGluZ0RlY2lzaW9uO1xuKGZ1bmN0aW9uIChTYW1wbGluZ0RlY2lzaW9uKSB7XG4gICAgLyoqXG4gICAgICogYFNwYW4uaXNSZWNvcmRpbmcoKSA9PT0gZmFsc2VgLCBzcGFuIHdpbGwgbm90IGJlIHJlY29yZGVkIGFuZCBhbGwgZXZlbnRzXG4gICAgICogYW5kIGF0dHJpYnV0ZXMgd2lsbCBiZSBkcm9wcGVkLlxuICAgICAqL1xuICAgIFNhbXBsaW5nRGVjaXNpb25bU2FtcGxpbmdEZWNpc2lvbltcIk5PVF9SRUNPUkRcIl0gPSAwXSA9IFwiTk9UX1JFQ09SRFwiO1xuICAgIC8qKlxuICAgICAqIGBTcGFuLmlzUmVjb3JkaW5nKCkgPT09IHRydWVgLCBidXQgYFNhbXBsZWRgIGZsYWcgaW4ge0BsaW5rIFRyYWNlRmxhZ3N9XG4gICAgICogTVVTVCBOT1QgYmUgc2V0LlxuICAgICAqL1xuICAgIFNhbXBsaW5nRGVjaXNpb25bU2FtcGxpbmdEZWNpc2lvbltcIlJFQ09SRFwiXSA9IDFdID0gXCJSRUNPUkRcIjtcbiAgICAvKipcbiAgICAgKiBgU3Bhbi5pc1JlY29yZGluZygpID09PSB0cnVlYCBBTkQgYFNhbXBsZWRgIGZsYWcgaW4ge0BsaW5rIFRyYWNlRmxhZ3N9XG4gICAgICogTVVTVCBiZSBzZXQuXG4gICAgICovXG4gICAgU2FtcGxpbmdEZWNpc2lvbltTYW1wbGluZ0RlY2lzaW9uW1wiUkVDT1JEX0FORF9TQU1QTEVEXCJdID0gMl0gPSBcIlJFQ09SRF9BTkRfU0FNUExFRFwiO1xufSkoU2FtcGxpbmdEZWNpc2lvbiB8fCAoU2FtcGxpbmdEZWNpc2lvbiA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TYW1wbGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js\n')},"(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Span: () => (/* binding */ Span)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "(ssr)/./node_modules/@opentelemetry/api/build/esm/trace/status.js");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ "(ssr)/./node_modules/@opentelemetry/api/build/esm/diag-api.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/platform/node/performance.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/common/time.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/common/attributes.js");\n/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js");\n/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./enums */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (undefined && undefined.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __values = (undefined && undefined.__values) || function(o) {\n    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === "number") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");\n};\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === "function" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i["return"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n\n\n\n/**\n * This class represents a span.\n */\nvar Span = /** @class */ (function () {\n    /**\n     * Constructs a new Span instance.\n     *\n     * @deprecated calling Span constructor directly is not supported. Please use tracer.startSpan.\n     * */\n    function Span(parentTracer, context, spanName, spanContext, kind, parentSpanId, links, startTime, _deprecatedClock, // keeping this argument even though it is unused to ensure backwards compatibility\n    attributes) {\n        if (links === void 0) { links = []; }\n        this.attributes = {};\n        this.links = [];\n        this.events = [];\n        this._droppedAttributesCount = 0;\n        this._droppedEventsCount = 0;\n        this._droppedLinksCount = 0;\n        this.status = {\n            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.SpanStatusCode.UNSET,\n        };\n        this.endTime = [0, 0];\n        this._ended = false;\n        this._duration = [-1, -1];\n        this.name = spanName;\n        this._spanContext = spanContext;\n        this.parentSpanId = parentSpanId;\n        this.kind = kind;\n        this.links = links;\n        var now = Date.now();\n        this._performanceStartTime = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.otperformance.now();\n        this._performanceOffset =\n            now - (this._performanceStartTime + (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.getTimeOrigin)());\n        this._startTimeProvided = startTime != null;\n        this.startTime = this._getTime(startTime !== null && startTime !== void 0 ? startTime : now);\n        this.resource = parentTracer.resource;\n        this.instrumentationLibrary = parentTracer.instrumentationLibrary;\n        this._spanLimits = parentTracer.getSpanLimits();\n        this._attributeValueLengthLimit =\n            this._spanLimits.attributeValueLengthLimit || 0;\n        if (attributes != null) {\n            this.setAttributes(attributes);\n        }\n        this._spanProcessor = parentTracer.getActiveSpanProcessor();\n        this._spanProcessor.onStart(this, context);\n    }\n    Span.prototype.spanContext = function () {\n        return this._spanContext;\n    };\n    Span.prototype.setAttribute = function (key, value) {\n        if (value == null || this._isSpanEnded())\n            return this;\n        if (key.length === 0) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn("Invalid attribute key: " + key);\n            return this;\n        }\n        if (!(0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.isAttributeValue)(value)) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn("Invalid attribute value set for key: " + key);\n            return this;\n        }\n        if (Object.keys(this.attributes).length >=\n            this._spanLimits.attributeCountLimit &&\n            !Object.prototype.hasOwnProperty.call(this.attributes, key)) {\n            this._droppedAttributesCount++;\n            return this;\n        }\n        this.attributes[key] = this._truncateToSize(value);\n        return this;\n    };\n    Span.prototype.setAttributes = function (attributes) {\n        var e_1, _a;\n        try {\n            for (var _b = __values(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = __read(_c.value, 2), k = _d[0], v = _d[1];\n                this.setAttribute(k, v);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return this;\n    };\n    /**\n     *\n     * @param name Span Name\n     * @param [attributesOrStartTime] Span attributes or start time\n     *     if type is {@type TimeInput} and 3rd param is undefined\n     * @param [timeStamp] Specified time stamp for the event\n     */\n    Span.prototype.addEvent = function (name, attributesOrStartTime, timeStamp) {\n        if (this._isSpanEnded())\n            return this;\n        if (this._spanLimits.eventCountLimit === 0) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn(\'No events allowed.\');\n            this._droppedEventsCount++;\n            return this;\n        }\n        if (this.events.length >= this._spanLimits.eventCountLimit) {\n            if (this._droppedEventsCount === 0) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.debug(\'Dropping extra events.\');\n            }\n            this.events.shift();\n            this._droppedEventsCount++;\n        }\n        if ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.isTimeInput)(attributesOrStartTime)) {\n            if (!(0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.isTimeInput)(timeStamp)) {\n                timeStamp = attributesOrStartTime;\n            }\n            attributesOrStartTime = undefined;\n        }\n        var attributes = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.sanitizeAttributes)(attributesOrStartTime);\n        this.events.push({\n            name: name,\n            attributes: attributes,\n            time: this._getTime(timeStamp),\n            droppedAttributesCount: 0,\n        });\n        return this;\n    };\n    Span.prototype.addLink = function (link) {\n        this.links.push(link);\n        return this;\n    };\n    Span.prototype.addLinks = function (links) {\n        var _a;\n        (_a = this.links).push.apply(_a, __spreadArray([], __read(links), false));\n        return this;\n    };\n    Span.prototype.setStatus = function (status) {\n        if (this._isSpanEnded())\n            return this;\n        this.status = __assign({}, status);\n        // When using try-catch, the caught "error" is of type `any`. When then assigning `any` to `status.message`,\n        // TypeScript will not error. While this can happen during use of any API, it is more common on Span#setStatus()\n        // as it\'s likely used in a catch-block. Therefore, we validate if `status.message` is actually a string, null, or\n        // undefined to avoid an incorrect type causing issues downstream.\n        if (this.status.message != null && typeof status.message !== \'string\') {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn("Dropping invalid status.message of type \'" + typeof status.message + "\', expected \'string\'");\n            delete this.status.message;\n        }\n        return this;\n    };\n    Span.prototype.updateName = function (name) {\n        if (this._isSpanEnded())\n            return this;\n        this.name = name;\n        return this;\n    };\n    Span.prototype.end = function (endTime) {\n        if (this._isSpanEnded()) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.error(this.name + " " + this._spanContext.traceId + "-" + this._spanContext.spanId + " - You can only call end() on a span once.");\n            return;\n        }\n        this._ended = true;\n        this.endTime = this._getTime(endTime);\n        this._duration = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeDuration)(this.startTime, this.endTime);\n        if (this._duration[0] < 0) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn(\'Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.\', this.startTime, this.endTime);\n            this.endTime = this.startTime.slice();\n            this._duration = [0, 0];\n        }\n        if (this._droppedEventsCount > 0) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn("Dropped " + this._droppedEventsCount + " events because eventCountLimit reached");\n        }\n        this._spanProcessor.onEnd(this);\n    };\n    Span.prototype._getTime = function (inp) {\n        if (typeof inp === \'number\' && inp <= _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.otperformance.now()) {\n            // must be a performance timestamp\n            // apply correction and convert to hrtime\n            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTime)(inp + this._performanceOffset);\n        }\n        if (typeof inp === \'number\') {\n            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.millisToHrTime)(inp);\n        }\n        if (inp instanceof Date) {\n            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.millisToHrTime)(inp.getTime());\n        }\n        if ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.isTimeInputHrTime)(inp)) {\n            return inp;\n        }\n        if (this._startTimeProvided) {\n            // if user provided a time for the start manually\n            // we can\'t use duration to calculate event/end times\n            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.millisToHrTime)(Date.now());\n        }\n        var msDuration = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.otperformance.now() - this._performanceStartTime;\n        return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.addHrTimes)(this.startTime, (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.millisToHrTime)(msDuration));\n    };\n    Span.prototype.isRecording = function () {\n        return this._ended === false;\n    };\n    Span.prototype.recordException = function (exception, time) {\n        var attributes = {};\n        if (typeof exception === \'string\') {\n            attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SEMATTRS_EXCEPTION_MESSAGE] = exception;\n        }\n        else if (exception) {\n            if (exception.code) {\n                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SEMATTRS_EXCEPTION_TYPE] = exception.code.toString();\n            }\n            else if (exception.name) {\n                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SEMATTRS_EXCEPTION_TYPE] = exception.name;\n            }\n            if (exception.message) {\n                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SEMATTRS_EXCEPTION_MESSAGE] = exception.message;\n            }\n            if (exception.stack) {\n                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SEMATTRS_EXCEPTION_STACKTRACE] = exception.stack;\n            }\n        }\n        // these are minimum requirements from spec\n        if (attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SEMATTRS_EXCEPTION_TYPE] ||\n            attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SEMATTRS_EXCEPTION_MESSAGE]) {\n            this.addEvent(_enums__WEBPACK_IMPORTED_MODULE_6__.ExceptionEventName, attributes, time);\n        }\n        else {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn("Failed to record an exception " + exception);\n        }\n    };\n    Object.defineProperty(Span.prototype, "duration", {\n        get: function () {\n            return this._duration;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, "ended", {\n        get: function () {\n            return this._ended;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, "droppedAttributesCount", {\n        get: function () {\n            return this._droppedAttributesCount;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, "droppedEventsCount", {\n        get: function () {\n            return this._droppedEventsCount;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, "droppedLinksCount", {\n        get: function () {\n            return this._droppedLinksCount;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Span.prototype._isSpanEnded = function () {\n        if (this._ended) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn("Can not execute the operation on ended Span {traceId: " + this._spanContext.traceId + ", spanId: " + this._spanContext.spanId + "}");\n        }\n        return this._ended;\n    };\n    // Utility function to truncate given value within size\n    // for value type of string, will truncate to given limit\n    // for type of non-string, will return same value\n    Span.prototype._truncateToLimitUtil = function (value, limit) {\n        if (value.length <= limit) {\n            return value;\n        }\n        return value.substring(0, limit);\n    };\n    /**\n     * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then\n     * return string with truncated to {@code attributeValueLengthLimit} characters\n     *\n     * If the given attribute value is array of strings then\n     * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters\n     *\n     * Otherwise return same Attribute {@code value}\n     *\n     * @param value Attribute value\n     * @returns truncated attribute value if required, otherwise same value\n     */\n    Span.prototype._truncateToSize = function (value) {\n        var _this = this;\n        var limit = this._attributeValueLengthLimit;\n        // Check limit\n        if (limit <= 0) {\n            // Negative values are invalid, so do not truncate\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn("Attribute value limit must be positive, got " + limit);\n            return value;\n        }\n        // String\n        if (typeof value === \'string\') {\n            return this._truncateToLimitUtil(value, limit);\n        }\n        // Array of strings\n        if (Array.isArray(value)) {\n            return value.map(function (val) {\n                return typeof val === \'string\' ? _this._truncateToLimitUtil(val, limit) : val;\n            });\n        }\n        // Other types, no need to apply value length limit\n        return value;\n    };\n    return Span;\n}());\n\n//# sourceMappingURL=Span.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UvYnVpbGQvZXNtL1NwYW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsU0FBSSxJQUFJLFNBQUk7QUFDNUI7QUFDQSxpREFBaUQsT0FBTztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFNBQUksSUFBSSxTQUFJO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFNBQUksSUFBSSxTQUFJO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixNQUFNO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixTQUFJLElBQUksU0FBSTtBQUNqQyw2RUFBNkUsT0FBTztBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMyRDtBQUNtSTtBQUNwRDtBQUM3RjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDhEQUFjO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLDhEQUFhO0FBQ2xEO0FBQ0EsZ0RBQWdELGtFQUFhO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9EQUFJO0FBQ2hCO0FBQ0E7QUFDQSxhQUFhLHFFQUFnQjtBQUM3QixZQUFZLG9EQUFJO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFBZ0YsVUFBVTtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixRQUFRO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGlCQUFpQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9EQUFJO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isb0RBQUk7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGdFQUFXO0FBQ3ZCLGlCQUFpQixnRUFBVztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix1RUFBa0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9EQUFJO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0RBQUk7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsbUVBQWM7QUFDdkM7QUFDQSxZQUFZLG9EQUFJO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxvREFBSTtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4Qyw4REFBYTtBQUMzRDtBQUNBO0FBQ0EsbUJBQW1CLDJEQUFNO0FBQ3pCO0FBQ0E7QUFDQSxtQkFBbUIsbUVBQWM7QUFDakM7QUFDQTtBQUNBLG1CQUFtQixtRUFBYztBQUNqQztBQUNBLFlBQVksc0VBQWlCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsbUVBQWM7QUFDakM7QUFDQSx5QkFBeUIsOERBQWE7QUFDdEMsZUFBZSwrREFBVSxpQkFBaUIsbUVBQWM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsMkZBQTBCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix3RkFBdUI7QUFDbEQ7QUFDQTtBQUNBLDJCQUEyQix3RkFBdUI7QUFDbEQ7QUFDQTtBQUNBLDJCQUEyQiwyRkFBMEI7QUFDckQ7QUFDQTtBQUNBLDJCQUEyQiw4RkFBNkI7QUFDeEQ7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHdGQUF1QjtBQUM5Qyx1QkFBdUIsMkZBQTBCO0FBQ2pELDBCQUEwQixzREFBa0I7QUFDNUM7QUFDQTtBQUNBLFlBQVksb0RBQUk7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZLG9EQUFJLG9EQUFvRCxxRkFBcUY7QUFDeko7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRkFBMEYsaUNBQWlDO0FBQzNILHdDQUF3QyxpQ0FBaUM7QUFDekU7QUFDQTtBQUNBLG1FQUFtRSxpQ0FBaUM7QUFDcEc7QUFDQSx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9EQUFJO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ2U7QUFDaEIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBvcGVudGVsZW1ldHJ5XFxzZGstdHJhY2UtYmFzZVxcYnVpbGRcXGVzbVxcU3Bhbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbnZhciBfX3ZhbHVlcyA9ICh0aGlzICYmIHRoaXMuX192YWx1ZXMpIHx8IGZ1bmN0aW9uKG8pIHtcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xufTtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20sIHBhY2spIHtcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xufTtcbmltcG9ydCB7IGRpYWcsIFNwYW5TdGF0dXNDb2RlLCB9IGZyb20gJ0BvcGVudGVsZW1ldHJ5L2FwaSc7XG5pbXBvcnQgeyBhZGRIclRpbWVzLCBtaWxsaXNUb0hyVGltZSwgZ2V0VGltZU9yaWdpbiwgaHJUaW1lLCBoclRpbWVEdXJhdGlvbiwgaXNBdHRyaWJ1dGVWYWx1ZSwgaXNUaW1lSW5wdXQsIGlzVGltZUlucHV0SHJUaW1lLCBvdHBlcmZvcm1hbmNlLCBzYW5pdGl6ZUF0dHJpYnV0ZXMsIH0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvY29yZSc7XG5pbXBvcnQgeyBTRU1BVFRSU19FWENFUFRJT05fTUVTU0FHRSwgU0VNQVRUUlNfRVhDRVBUSU9OX1NUQUNLVFJBQ0UsIFNFTUFUVFJTX0VYQ0VQVElPTl9UWVBFLCB9IGZyb20gJ0BvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zJztcbmltcG9ydCB7IEV4Y2VwdGlvbkV2ZW50TmFtZSB9IGZyb20gJy4vZW51bXMnO1xuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBzcGFuLlxuICovXG52YXIgU3BhbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFNwYW4gaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCBjYWxsaW5nIFNwYW4gY29uc3RydWN0b3IgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZC4gUGxlYXNlIHVzZSB0cmFjZXIuc3RhcnRTcGFuLlxuICAgICAqICovXG4gICAgZnVuY3Rpb24gU3BhbihwYXJlbnRUcmFjZXIsIGNvbnRleHQsIHNwYW5OYW1lLCBzcGFuQ29udGV4dCwga2luZCwgcGFyZW50U3BhbklkLCBsaW5rcywgc3RhcnRUaW1lLCBfZGVwcmVjYXRlZENsb2NrLCAvLyBrZWVwaW5nIHRoaXMgYXJndW1lbnQgZXZlbiB0aG91Z2ggaXQgaXMgdW51c2VkIHRvIGVuc3VyZSBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICAgIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgaWYgKGxpbmtzID09PSB2b2lkIDApIHsgbGlua3MgPSBbXTsgfVxuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgICAgdGhpcy5saW5rcyA9IFtdO1xuICAgICAgICB0aGlzLmV2ZW50cyA9IFtdO1xuICAgICAgICB0aGlzLl9kcm9wcGVkQXR0cmlidXRlc0NvdW50ID0gMDtcbiAgICAgICAgdGhpcy5fZHJvcHBlZEV2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgdGhpcy5fZHJvcHBlZExpbmtzQ291bnQgPSAwO1xuICAgICAgICB0aGlzLnN0YXR1cyA9IHtcbiAgICAgICAgICAgIGNvZGU6IFNwYW5TdGF0dXNDb2RlLlVOU0VULFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmVuZFRpbWUgPSBbMCwgMF07XG4gICAgICAgIHRoaXMuX2VuZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2R1cmF0aW9uID0gWy0xLCAtMV07XG4gICAgICAgIHRoaXMubmFtZSA9IHNwYW5OYW1lO1xuICAgICAgICB0aGlzLl9zcGFuQ29udGV4dCA9IHNwYW5Db250ZXh0O1xuICAgICAgICB0aGlzLnBhcmVudFNwYW5JZCA9IHBhcmVudFNwYW5JZDtcbiAgICAgICAgdGhpcy5raW5kID0ga2luZDtcbiAgICAgICAgdGhpcy5saW5rcyA9IGxpbmtzO1xuICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGhpcy5fcGVyZm9ybWFuY2VTdGFydFRpbWUgPSBvdHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICB0aGlzLl9wZXJmb3JtYW5jZU9mZnNldCA9XG4gICAgICAgICAgICBub3cgLSAodGhpcy5fcGVyZm9ybWFuY2VTdGFydFRpbWUgKyBnZXRUaW1lT3JpZ2luKCkpO1xuICAgICAgICB0aGlzLl9zdGFydFRpbWVQcm92aWRlZCA9IHN0YXJ0VGltZSAhPSBudWxsO1xuICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IHRoaXMuX2dldFRpbWUoc3RhcnRUaW1lICE9PSBudWxsICYmIHN0YXJ0VGltZSAhPT0gdm9pZCAwID8gc3RhcnRUaW1lIDogbm93KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHBhcmVudFRyYWNlci5yZXNvdXJjZTtcbiAgICAgICAgdGhpcy5pbnN0cnVtZW50YXRpb25MaWJyYXJ5ID0gcGFyZW50VHJhY2VyLmluc3RydW1lbnRhdGlvbkxpYnJhcnk7XG4gICAgICAgIHRoaXMuX3NwYW5MaW1pdHMgPSBwYXJlbnRUcmFjZXIuZ2V0U3BhbkxpbWl0cygpO1xuICAgICAgICB0aGlzLl9hdHRyaWJ1dGVWYWx1ZUxlbmd0aExpbWl0ID1cbiAgICAgICAgICAgIHRoaXMuX3NwYW5MaW1pdHMuYXR0cmlidXRlVmFsdWVMZW5ndGhMaW1pdCB8fCAwO1xuICAgICAgICBpZiAoYXR0cmlidXRlcyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZXMoYXR0cmlidXRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3BhblByb2Nlc3NvciA9IHBhcmVudFRyYWNlci5nZXRBY3RpdmVTcGFuUHJvY2Vzc29yKCk7XG4gICAgICAgIHRoaXMuX3NwYW5Qcm9jZXNzb3Iub25TdGFydCh0aGlzLCBjb250ZXh0KTtcbiAgICB9XG4gICAgU3Bhbi5wcm90b3R5cGUuc3BhbkNvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zcGFuQ29udGV4dDtcbiAgICB9O1xuICAgIFNwYW4ucHJvdG90eXBlLnNldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IHRoaXMuX2lzU3BhbkVuZGVkKCkpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgaWYgKGtleS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGRpYWcud2FybihcIkludmFsaWQgYXR0cmlidXRlIGtleTogXCIgKyBrZXkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0F0dHJpYnV0ZVZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgICAgZGlhZy53YXJuKFwiSW52YWxpZCBhdHRyaWJ1dGUgdmFsdWUgc2V0IGZvciBrZXk6IFwiICsga2V5KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLmF0dHJpYnV0ZXMpLmxlbmd0aCA+PVxuICAgICAgICAgICAgdGhpcy5fc3BhbkxpbWl0cy5hdHRyaWJ1dGVDb3VudExpbWl0ICYmXG4gICAgICAgICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuYXR0cmlidXRlcywga2V5KSkge1xuICAgICAgICAgICAgdGhpcy5fZHJvcHBlZEF0dHJpYnV0ZXNDb3VudCsrO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzW2tleV0gPSB0aGlzLl90cnVuY2F0ZVRvU2l6ZSh2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgU3Bhbi5wcm90b3R5cGUuc2V0QXR0cmlidXRlcyA9IGZ1bmN0aW9uIChhdHRyaWJ1dGVzKSB7XG4gICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyhPYmplY3QuZW50cmllcyhhdHRyaWJ1dGVzKSksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2QgPSBfX3JlYWQoX2MudmFsdWUsIDIpLCBrID0gX2RbMF0sIHYgPSBfZFsxXTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShrLCB2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSBTcGFuIE5hbWVcbiAgICAgKiBAcGFyYW0gW2F0dHJpYnV0ZXNPclN0YXJ0VGltZV0gU3BhbiBhdHRyaWJ1dGVzIG9yIHN0YXJ0IHRpbWVcbiAgICAgKiAgICAgaWYgdHlwZSBpcyB7QHR5cGUgVGltZUlucHV0fSBhbmQgM3JkIHBhcmFtIGlzIHVuZGVmaW5lZFxuICAgICAqIEBwYXJhbSBbdGltZVN0YW1wXSBTcGVjaWZpZWQgdGltZSBzdGFtcCBmb3IgdGhlIGV2ZW50XG4gICAgICovXG4gICAgU3Bhbi5wcm90b3R5cGUuYWRkRXZlbnQgPSBmdW5jdGlvbiAobmFtZSwgYXR0cmlidXRlc09yU3RhcnRUaW1lLCB0aW1lU3RhbXApIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzU3BhbkVuZGVkKCkpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX3NwYW5MaW1pdHMuZXZlbnRDb3VudExpbWl0ID09PSAwKSB7XG4gICAgICAgICAgICBkaWFnLndhcm4oJ05vIGV2ZW50cyBhbGxvd2VkLicpO1xuICAgICAgICAgICAgdGhpcy5fZHJvcHBlZEV2ZW50c0NvdW50Kys7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5ldmVudHMubGVuZ3RoID49IHRoaXMuX3NwYW5MaW1pdHMuZXZlbnRDb3VudExpbWl0KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZHJvcHBlZEV2ZW50c0NvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZGlhZy5kZWJ1ZygnRHJvcHBpbmcgZXh0cmEgZXZlbnRzLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ldmVudHMuc2hpZnQoKTtcbiAgICAgICAgICAgIHRoaXMuX2Ryb3BwZWRFdmVudHNDb3VudCsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1RpbWVJbnB1dChhdHRyaWJ1dGVzT3JTdGFydFRpbWUpKSB7XG4gICAgICAgICAgICBpZiAoIWlzVGltZUlucHV0KHRpbWVTdGFtcCkpIHtcbiAgICAgICAgICAgICAgICB0aW1lU3RhbXAgPSBhdHRyaWJ1dGVzT3JTdGFydFRpbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhdHRyaWJ1dGVzT3JTdGFydFRpbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBzYW5pdGl6ZUF0dHJpYnV0ZXMoYXR0cmlidXRlc09yU3RhcnRUaW1lKTtcbiAgICAgICAgdGhpcy5ldmVudHMucHVzaCh7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgYXR0cmlidXRlczogYXR0cmlidXRlcyxcbiAgICAgICAgICAgIHRpbWU6IHRoaXMuX2dldFRpbWUodGltZVN0YW1wKSxcbiAgICAgICAgICAgIGRyb3BwZWRBdHRyaWJ1dGVzQ291bnQ6IDAsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFNwYW4ucHJvdG90eXBlLmFkZExpbmsgPSBmdW5jdGlvbiAobGluaykge1xuICAgICAgICB0aGlzLmxpbmtzLnB1c2gobGluayk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgU3Bhbi5wcm90b3R5cGUuYWRkTGlua3MgPSBmdW5jdGlvbiAobGlua3MpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSB0aGlzLmxpbmtzKS5wdXNoLmFwcGx5KF9hLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQobGlua3MpLCBmYWxzZSkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFNwYW4ucHJvdG90eXBlLnNldFN0YXR1cyA9IGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzU3BhbkVuZGVkKCkpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgdGhpcy5zdGF0dXMgPSBfX2Fzc2lnbih7fSwgc3RhdHVzKTtcbiAgICAgICAgLy8gV2hlbiB1c2luZyB0cnktY2F0Y2gsIHRoZSBjYXVnaHQgXCJlcnJvclwiIGlzIG9mIHR5cGUgYGFueWAuIFdoZW4gdGhlbiBhc3NpZ25pbmcgYGFueWAgdG8gYHN0YXR1cy5tZXNzYWdlYCxcbiAgICAgICAgLy8gVHlwZVNjcmlwdCB3aWxsIG5vdCBlcnJvci4gV2hpbGUgdGhpcyBjYW4gaGFwcGVuIGR1cmluZyB1c2Ugb2YgYW55IEFQSSwgaXQgaXMgbW9yZSBjb21tb24gb24gU3BhbiNzZXRTdGF0dXMoKVxuICAgICAgICAvLyBhcyBpdCdzIGxpa2VseSB1c2VkIGluIGEgY2F0Y2gtYmxvY2suIFRoZXJlZm9yZSwgd2UgdmFsaWRhdGUgaWYgYHN0YXR1cy5tZXNzYWdlYCBpcyBhY3R1YWxseSBhIHN0cmluZywgbnVsbCwgb3JcbiAgICAgICAgLy8gdW5kZWZpbmVkIHRvIGF2b2lkIGFuIGluY29ycmVjdCB0eXBlIGNhdXNpbmcgaXNzdWVzIGRvd25zdHJlYW0uXG4gICAgICAgIGlmICh0aGlzLnN0YXR1cy5tZXNzYWdlICE9IG51bGwgJiYgdHlwZW9mIHN0YXR1cy5tZXNzYWdlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZGlhZy53YXJuKFwiRHJvcHBpbmcgaW52YWxpZCBzdGF0dXMubWVzc2FnZSBvZiB0eXBlICdcIiArIHR5cGVvZiBzdGF0dXMubWVzc2FnZSArIFwiJywgZXhwZWN0ZWQgJ3N0cmluZydcIik7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5zdGF0dXMubWVzc2FnZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFNwYW4ucHJvdG90eXBlLnVwZGF0ZU5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBpZiAodGhpcy5faXNTcGFuRW5kZWQoKSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFNwYW4ucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChlbmRUaW1lKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1NwYW5FbmRlZCgpKSB7XG4gICAgICAgICAgICBkaWFnLmVycm9yKHRoaXMubmFtZSArIFwiIFwiICsgdGhpcy5fc3BhbkNvbnRleHQudHJhY2VJZCArIFwiLVwiICsgdGhpcy5fc3BhbkNvbnRleHQuc3BhbklkICsgXCIgLSBZb3UgY2FuIG9ubHkgY2FsbCBlbmQoKSBvbiBhIHNwYW4gb25jZS5cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZW5kZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmVuZFRpbWUgPSB0aGlzLl9nZXRUaW1lKGVuZFRpbWUpO1xuICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IGhyVGltZUR1cmF0aW9uKHRoaXMuc3RhcnRUaW1lLCB0aGlzLmVuZFRpbWUpO1xuICAgICAgICBpZiAodGhpcy5fZHVyYXRpb25bMF0gPCAwKSB7XG4gICAgICAgICAgICBkaWFnLndhcm4oJ0luY29uc2lzdGVudCBzdGFydCBhbmQgZW5kIHRpbWUsIHN0YXJ0VGltZSA+IGVuZFRpbWUuIFNldHRpbmcgc3BhbiBkdXJhdGlvbiB0byAwbXMuJywgdGhpcy5zdGFydFRpbWUsIHRoaXMuZW5kVGltZSk7XG4gICAgICAgICAgICB0aGlzLmVuZFRpbWUgPSB0aGlzLnN0YXJ0VGltZS5zbGljZSgpO1xuICAgICAgICAgICAgdGhpcy5fZHVyYXRpb24gPSBbMCwgMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2Ryb3BwZWRFdmVudHNDb3VudCA+IDApIHtcbiAgICAgICAgICAgIGRpYWcud2FybihcIkRyb3BwZWQgXCIgKyB0aGlzLl9kcm9wcGVkRXZlbnRzQ291bnQgKyBcIiBldmVudHMgYmVjYXVzZSBldmVudENvdW50TGltaXQgcmVhY2hlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zcGFuUHJvY2Vzc29yLm9uRW5kKHRoaXMpO1xuICAgIH07XG4gICAgU3Bhbi5wcm90b3R5cGUuX2dldFRpbWUgPSBmdW5jdGlvbiAoaW5wKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wID09PSAnbnVtYmVyJyAmJiBpbnAgPD0gb3RwZXJmb3JtYW5jZS5ub3coKSkge1xuICAgICAgICAgICAgLy8gbXVzdCBiZSBhIHBlcmZvcm1hbmNlIHRpbWVzdGFtcFxuICAgICAgICAgICAgLy8gYXBwbHkgY29ycmVjdGlvbiBhbmQgY29udmVydCB0byBocnRpbWVcbiAgICAgICAgICAgIHJldHVybiBoclRpbWUoaW5wICsgdGhpcy5fcGVyZm9ybWFuY2VPZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgaW5wID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIG1pbGxpc1RvSHJUaW1lKGlucCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlucCBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBtaWxsaXNUb0hyVGltZShpbnAuZ2V0VGltZSgpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNUaW1lSW5wdXRIclRpbWUoaW5wKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fc3RhcnRUaW1lUHJvdmlkZWQpIHtcbiAgICAgICAgICAgIC8vIGlmIHVzZXIgcHJvdmlkZWQgYSB0aW1lIGZvciB0aGUgc3RhcnQgbWFudWFsbHlcbiAgICAgICAgICAgIC8vIHdlIGNhbid0IHVzZSBkdXJhdGlvbiB0byBjYWxjdWxhdGUgZXZlbnQvZW5kIHRpbWVzXG4gICAgICAgICAgICByZXR1cm4gbWlsbGlzVG9IclRpbWUoRGF0ZS5ub3coKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1zRHVyYXRpb24gPSBvdHBlcmZvcm1hbmNlLm5vdygpIC0gdGhpcy5fcGVyZm9ybWFuY2VTdGFydFRpbWU7XG4gICAgICAgIHJldHVybiBhZGRIclRpbWVzKHRoaXMuc3RhcnRUaW1lLCBtaWxsaXNUb0hyVGltZShtc0R1cmF0aW9uKSk7XG4gICAgfTtcbiAgICBTcGFuLnByb3RvdHlwZS5pc1JlY29yZGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZGVkID09PSBmYWxzZTtcbiAgICB9O1xuICAgIFNwYW4ucHJvdG90eXBlLnJlY29yZEV4Y2VwdGlvbiA9IGZ1bmN0aW9uIChleGNlcHRpb24sIHRpbWUpIHtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgICAgaWYgKHR5cGVvZiBleGNlcHRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzW1NFTUFUVFJTX0VYQ0VQVElPTl9NRVNTQUdFXSA9IGV4Y2VwdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgIGlmIChleGNlcHRpb24uY29kZSkge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXNbU0VNQVRUUlNfRVhDRVBUSU9OX1RZUEVdID0gZXhjZXB0aW9uLmNvZGUudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGV4Y2VwdGlvbi5uYW1lKSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlc1tTRU1BVFRSU19FWENFUFRJT05fVFlQRV0gPSBleGNlcHRpb24ubmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChleGNlcHRpb24ubWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXNbU0VNQVRUUlNfRVhDRVBUSU9OX01FU1NBR0VdID0gZXhjZXB0aW9uLm1lc3NhZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXhjZXB0aW9uLnN0YWNrKSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlc1tTRU1BVFRSU19FWENFUFRJT05fU1RBQ0tUUkFDRV0gPSBleGNlcHRpb24uc3RhY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhlc2UgYXJlIG1pbmltdW0gcmVxdWlyZW1lbnRzIGZyb20gc3BlY1xuICAgICAgICBpZiAoYXR0cmlidXRlc1tTRU1BVFRSU19FWENFUFRJT05fVFlQRV0gfHxcbiAgICAgICAgICAgIGF0dHJpYnV0ZXNbU0VNQVRUUlNfRVhDRVBUSU9OX01FU1NBR0VdKSB7XG4gICAgICAgICAgICB0aGlzLmFkZEV2ZW50KEV4Y2VwdGlvbkV2ZW50TmFtZSwgYXR0cmlidXRlcywgdGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkaWFnLndhcm4oXCJGYWlsZWQgdG8gcmVjb3JkIGFuIGV4Y2VwdGlvbiBcIiArIGV4Y2VwdGlvbik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTcGFuLnByb3RvdHlwZSwgXCJkdXJhdGlvblwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2R1cmF0aW9uO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNwYW4ucHJvdG90eXBlLCBcImVuZGVkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZW5kZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3Bhbi5wcm90b3R5cGUsIFwiZHJvcHBlZEF0dHJpYnV0ZXNDb3VudFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Ryb3BwZWRBdHRyaWJ1dGVzQ291bnQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3Bhbi5wcm90b3R5cGUsIFwiZHJvcHBlZEV2ZW50c0NvdW50XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZHJvcHBlZEV2ZW50c0NvdW50O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNwYW4ucHJvdG90eXBlLCBcImRyb3BwZWRMaW5rc0NvdW50XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZHJvcHBlZExpbmtzQ291bnQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBTcGFuLnByb3RvdHlwZS5faXNTcGFuRW5kZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9lbmRlZCkge1xuICAgICAgICAgICAgZGlhZy53YXJuKFwiQ2FuIG5vdCBleGVjdXRlIHRoZSBvcGVyYXRpb24gb24gZW5kZWQgU3BhbiB7dHJhY2VJZDogXCIgKyB0aGlzLl9zcGFuQ29udGV4dC50cmFjZUlkICsgXCIsIHNwYW5JZDogXCIgKyB0aGlzLl9zcGFuQ29udGV4dC5zcGFuSWQgKyBcIn1cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZGVkO1xuICAgIH07XG4gICAgLy8gVXRpbGl0eSBmdW5jdGlvbiB0byB0cnVuY2F0ZSBnaXZlbiB2YWx1ZSB3aXRoaW4gc2l6ZVxuICAgIC8vIGZvciB2YWx1ZSB0eXBlIG9mIHN0cmluZywgd2lsbCB0cnVuY2F0ZSB0byBnaXZlbiBsaW1pdFxuICAgIC8vIGZvciB0eXBlIG9mIG5vbi1zdHJpbmcsIHdpbGwgcmV0dXJuIHNhbWUgdmFsdWVcbiAgICBTcGFuLnByb3RvdHlwZS5fdHJ1bmNhdGVUb0xpbWl0VXRpbCA9IGZ1bmN0aW9uICh2YWx1ZSwgbGltaXQpIHtcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA8PSBsaW1pdCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZS5zdWJzdHJpbmcoMCwgbGltaXQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSWYgdGhlIGdpdmVuIGF0dHJpYnV0ZSB2YWx1ZSBpcyBvZiB0eXBlIHN0cmluZyBhbmQgaGFzIG1vcmUgY2hhcmFjdGVycyB0aGFuIGdpdmVuIHtAY29kZSBhdHRyaWJ1dGVWYWx1ZUxlbmd0aExpbWl0fSB0aGVuXG4gICAgICogcmV0dXJuIHN0cmluZyB3aXRoIHRydW5jYXRlZCB0byB7QGNvZGUgYXR0cmlidXRlVmFsdWVMZW5ndGhMaW1pdH0gY2hhcmFjdGVyc1xuICAgICAqXG4gICAgICogSWYgdGhlIGdpdmVuIGF0dHJpYnV0ZSB2YWx1ZSBpcyBhcnJheSBvZiBzdHJpbmdzIHRoZW5cbiAgICAgKiByZXR1cm4gbmV3IGFycmF5IG9mIHN0cmluZ3Mgd2l0aCBlYWNoIGVsZW1lbnQgdHJ1bmNhdGVkIHRvIHtAY29kZSBhdHRyaWJ1dGVWYWx1ZUxlbmd0aExpbWl0fSBjaGFyYWN0ZXJzXG4gICAgICpcbiAgICAgKiBPdGhlcndpc2UgcmV0dXJuIHNhbWUgQXR0cmlidXRlIHtAY29kZSB2YWx1ZX1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSBBdHRyaWJ1dGUgdmFsdWVcbiAgICAgKiBAcmV0dXJucyB0cnVuY2F0ZWQgYXR0cmlidXRlIHZhbHVlIGlmIHJlcXVpcmVkLCBvdGhlcndpc2Ugc2FtZSB2YWx1ZVxuICAgICAqL1xuICAgIFNwYW4ucHJvdG90eXBlLl90cnVuY2F0ZVRvU2l6ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgbGltaXQgPSB0aGlzLl9hdHRyaWJ1dGVWYWx1ZUxlbmd0aExpbWl0O1xuICAgICAgICAvLyBDaGVjayBsaW1pdFxuICAgICAgICBpZiAobGltaXQgPD0gMCkge1xuICAgICAgICAgICAgLy8gTmVnYXRpdmUgdmFsdWVzIGFyZSBpbnZhbGlkLCBzbyBkbyBub3QgdHJ1bmNhdGVcbiAgICAgICAgICAgIGRpYWcud2FybihcIkF0dHJpYnV0ZSB2YWx1ZSBsaW1pdCBtdXN0IGJlIHBvc2l0aXZlLCBnb3QgXCIgKyBsaW1pdCk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU3RyaW5nXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJ1bmNhdGVUb0xpbWl0VXRpbCh2YWx1ZSwgbGltaXQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFycmF5IG9mIHN0cmluZ3NcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUubWFwKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgPyBfdGhpcy5fdHJ1bmNhdGVUb0xpbWl0VXRpbCh2YWwsIGxpbWl0KSA6IHZhbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIE90aGVyIHR5cGVzLCBubyBuZWVkIHRvIGFwcGx5IHZhbHVlIGxlbmd0aCBsaW1pdFxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICByZXR1cm4gU3Bhbjtcbn0oKSk7XG5leHBvcnQgeyBTcGFuIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TcGFuLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js\n')},"(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Tracer: () => (/* binding */ Tracer)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ "(ssr)/./node_modules/@opentelemetry/api/build/esm/context-api.js");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ "(ssr)/./node_modules/@opentelemetry/api/build/esm/trace-api.js");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/api */ "(ssr)/./node_modules/@opentelemetry/api/build/esm/diag-api.js");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @opentelemetry/api */ "(ssr)/./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @opentelemetry/api */ "(ssr)/./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @opentelemetry/api */ "(ssr)/./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @opentelemetry/api */ "(ssr)/./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/common/attributes.js");\n/* harmony import */ var _Span__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Span */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js");\n/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utility */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./platform */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/RandomIdGenerator.js");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * This class represents a basic tracer.\n */\nvar Tracer = /** @class */ (function () {\n    /**\n     * Constructs a new Tracer instance.\n     */\n    function Tracer(instrumentationLibrary, config, _tracerProvider) {\n        this._tracerProvider = _tracerProvider;\n        var localConfig = (0,_utility__WEBPACK_IMPORTED_MODULE_0__.mergeConfig)(config);\n        this._sampler = localConfig.sampler;\n        this._generalLimits = localConfig.generalLimits;\n        this._spanLimits = localConfig.spanLimits;\n        this._idGenerator = config.idGenerator || new _platform__WEBPACK_IMPORTED_MODULE_1__.RandomIdGenerator();\n        this.resource = _tracerProvider.resource;\n        this.instrumentationLibrary = instrumentationLibrary;\n    }\n    /**\n     * Starts a new Span or returns the default NoopSpan based on the sampling\n     * decision.\n     */\n    Tracer.prototype.startSpan = function (name, options, context) {\n        var _a, _b, _c;\n        if (options === void 0) { options = {}; }\n        if (context === void 0) { context = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.context.active(); }\n        // remove span from context in case a root span is requested via options\n        if (options.root) {\n            context = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.deleteSpan(context);\n        }\n        var parentSpan = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.getSpan(context);\n        if ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.isTracingSuppressed)(context)) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.diag.debug(\'Instrumentation suppressed, returning Noop Span\');\n            var nonRecordingSpan = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.wrapSpanContext(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__.INVALID_SPAN_CONTEXT);\n            return nonRecordingSpan;\n        }\n        var parentSpanContext = parentSpan === null || parentSpan === void 0 ? void 0 : parentSpan.spanContext();\n        var spanId = this._idGenerator.generateSpanId();\n        var traceId;\n        var traceState;\n        var parentSpanId;\n        if (!parentSpanContext ||\n            !_opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.isSpanContextValid(parentSpanContext)) {\n            // New root span.\n            traceId = this._idGenerator.generateTraceId();\n        }\n        else {\n            // New child span.\n            traceId = parentSpanContext.traceId;\n            traceState = parentSpanContext.traceState;\n            parentSpanId = parentSpanContext.spanId;\n        }\n        var spanKind = (_a = options.kind) !== null && _a !== void 0 ? _a : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_7__.SpanKind.INTERNAL;\n        var links = ((_b = options.links) !== null && _b !== void 0 ? _b : []).map(function (link) {\n            return {\n                context: link.context,\n                attributes: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__.sanitizeAttributes)(link.attributes),\n            };\n        });\n        var attributes = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__.sanitizeAttributes)(options.attributes);\n        // make sampling decision\n        var samplingResult = this._sampler.shouldSample(context, traceId, name, spanKind, attributes, links);\n        traceState = (_c = samplingResult.traceState) !== null && _c !== void 0 ? _c : traceState;\n        var traceFlags = samplingResult.decision === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__.SamplingDecision.RECORD_AND_SAMPLED\n            ? _opentelemetry_api__WEBPACK_IMPORTED_MODULE_10__.TraceFlags.SAMPLED\n            : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_10__.TraceFlags.NONE;\n        var spanContext = { traceId: traceId, spanId: spanId, traceFlags: traceFlags, traceState: traceState };\n        if (samplingResult.decision === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__.SamplingDecision.NOT_RECORD) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.diag.debug(\'Recording is off, propagating context in a non-recording span\');\n            var nonRecordingSpan = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.wrapSpanContext(spanContext);\n            return nonRecordingSpan;\n        }\n        // Set initial span attributes. The attributes object may have been mutated\n        // by the sampler, so we sanitize the merged attributes before setting them.\n        var initAttributes = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__.sanitizeAttributes)(Object.assign(attributes, samplingResult.attributes));\n        var span = new _Span__WEBPACK_IMPORTED_MODULE_11__.Span(this, context, name, spanContext, spanKind, parentSpanId, links, options.startTime, undefined, initAttributes);\n        return span;\n    };\n    Tracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n        var opts;\n        var ctx;\n        var fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        var parentContext = ctx !== null && ctx !== void 0 ? ctx : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.context.active();\n        var span = this.startSpan(name, opts, parentContext);\n        var contextWithSpanSet = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.setSpan(parentContext, span);\n        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.context.with(contextWithSpanSet, fn, undefined, span);\n    };\n    /** Returns the active {@link GeneralLimits}. */\n    Tracer.prototype.getGeneralLimits = function () {\n        return this._generalLimits;\n    };\n    /** Returns the active {@link SpanLimits}. */\n    Tracer.prototype.getSpanLimits = function () {\n        return this._spanLimits;\n    };\n    Tracer.prototype.getActiveSpanProcessor = function () {\n        return this._tracerProvider.getActiveSpanProcessor();\n    };\n    return Tracer;\n}());\n\n//# sourceMappingURL=Tracer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js\n')},"(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildSamplerFromEnv: () => (/* binding */ buildSamplerFromEnv),\n/* harmony export */   loadDefaultConfig: () => (/* binding */ loadDefaultConfig)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @opentelemetry/api */ "(ssr)/./node_modules/@opentelemetry/api/build/esm/diag-api.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/utils/sampling.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/platform/node/environment.js");\n/* harmony import */ var _sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sampler/AlwaysOffSampler */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js");\n/* harmony import */ var _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sampler/AlwaysOnSampler */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js");\n/* harmony import */ var _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sampler/ParentBasedSampler */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js");\n/* harmony import */ var _sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sampler/TraceIdRatioBasedSampler */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\nvar FALLBACK_OTEL_TRACES_SAMPLER = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.TracesSamplerValues.AlwaysOn;\nvar DEFAULT_RATIO = 1;\n/**\n * Load default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n// object needs to be wrapped in this function and called when needed otherwise\n// envs are parsed before tests are ran - causes tests using these envs to fail\nfunction loadDefaultConfig() {\n    var env = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getEnv)();\n    return {\n        sampler: buildSamplerFromEnv(env),\n        forceFlushTimeoutMillis: 30000,\n        generalLimits: {\n            attributeValueLengthLimit: env.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n            attributeCountLimit: env.OTEL_ATTRIBUTE_COUNT_LIMIT,\n        },\n        spanLimits: {\n            attributeValueLengthLimit: env.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n            attributeCountLimit: env.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n            linkCountLimit: env.OTEL_SPAN_LINK_COUNT_LIMIT,\n            eventCountLimit: env.OTEL_SPAN_EVENT_COUNT_LIMIT,\n            attributePerEventCountLimit: env.OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n            attributePerLinkCountLimit: env.OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n        },\n        mergeResourceWithDefaults: true,\n    };\n}\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param environment optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\nfunction buildSamplerFromEnv(environment) {\n    if (environment === void 0) { environment = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getEnv)(); }\n    switch (environment.OTEL_TRACES_SAMPLER) {\n        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.TracesSamplerValues.AlwaysOn:\n            return new _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOnSampler();\n        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.TracesSamplerValues.AlwaysOff:\n            return new _sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_3__.AlwaysOffSampler();\n        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.TracesSamplerValues.ParentBasedAlwaysOn:\n            return new _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_4__.ParentBasedSampler({\n                root: new _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOnSampler(),\n            });\n        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.TracesSamplerValues.ParentBasedAlwaysOff:\n            return new _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_4__.ParentBasedSampler({\n                root: new _sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_3__.AlwaysOffSampler(),\n            });\n        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.TracesSamplerValues.TraceIdRatio:\n            return new _sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_5__.TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment));\n        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.TracesSamplerValues.ParentBasedTraceIdRatio:\n            return new _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_4__.ParentBasedSampler({\n                root: new _sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_5__.TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment)),\n            });\n        default:\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__.diag.error("OTEL_TRACES_SAMPLER value \\"" + environment.OTEL_TRACES_SAMPLER + " invalid, defaulting to " + FALLBACK_OTEL_TRACES_SAMPLER + "\\".");\n            return new _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOnSampler();\n    }\n}\nfunction getSamplerProbabilityFromEnv(environment) {\n    if (environment.OTEL_TRACES_SAMPLER_ARG === undefined ||\n        environment.OTEL_TRACES_SAMPLER_ARG === \'\') {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__.diag.error("OTEL_TRACES_SAMPLER_ARG is blank, defaulting to " + DEFAULT_RATIO + ".");\n        return DEFAULT_RATIO;\n    }\n    var probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);\n    if (isNaN(probability)) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__.diag.error("OTEL_TRACES_SAMPLER_ARG=" + environment.OTEL_TRACES_SAMPLER_ARG + " was given, but it is invalid, defaulting to " + DEFAULT_RATIO + ".");\n        return DEFAULT_RATIO;\n    }\n    if (probability < 0 || probability > 1) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__.diag.error("OTEL_TRACES_SAMPLER_ARG=" + environment.OTEL_TRACES_SAMPLER_ARG + " was given, but it is out of range ([0..1]), defaulting to " + DEFAULT_RATIO + ".");\n        return DEFAULT_RATIO;\n    }\n    return probability;\n}\n//# sourceMappingURL=config.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UvYnVpbGQvZXNtL2NvbmZpZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDMEM7QUFDd0I7QUFDSjtBQUNGO0FBQ007QUFDWTtBQUM5RSxtQ0FBbUMsb0VBQW1CO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsY0FBYywyREFBTTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGtDQUFrQyxjQUFjLDJEQUFNO0FBQ3REO0FBQ0EsYUFBYSxvRUFBbUI7QUFDaEMsdUJBQXVCLHFFQUFlO0FBQ3RDLGFBQWEsb0VBQW1CO0FBQ2hDLHVCQUF1Qix1RUFBZ0I7QUFDdkMsYUFBYSxvRUFBbUI7QUFDaEMsdUJBQXVCLDJFQUFrQjtBQUN6QywwQkFBMEIscUVBQWU7QUFDekMsYUFBYTtBQUNiLGFBQWEsb0VBQW1CO0FBQ2hDLHVCQUF1QiwyRUFBa0I7QUFDekMsMEJBQTBCLHVFQUFnQjtBQUMxQyxhQUFhO0FBQ2IsYUFBYSxvRUFBbUI7QUFDaEMsdUJBQXVCLHVGQUF3QjtBQUMvQyxhQUFhLG9FQUFtQjtBQUNoQyx1QkFBdUIsMkVBQWtCO0FBQ3pDLDBCQUEwQix1RkFBd0I7QUFDbEQsYUFBYTtBQUNiO0FBQ0EsWUFBWSxvREFBSTtBQUNoQix1QkFBdUIscUVBQWU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsb0RBQUk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsb0RBQUk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxRQUFRLG9EQUFJO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFwxXFxEb3dubG9hZHNcXHRhYm9yQWNhZGVteVVwZGF0ZWRcXHRhYm9yLWFjYWRlbXlcXG5vZGVfbW9kdWxlc1xcQG9wZW50ZWxlbWV0cnlcXHNkay10cmFjZS1iYXNlXFxidWlsZFxcZXNtXFxjb25maWcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IGRpYWcgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9hcGknO1xuaW1wb3J0IHsgZ2V0RW52LCBUcmFjZXNTYW1wbGVyVmFsdWVzIH0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvY29yZSc7XG5pbXBvcnQgeyBBbHdheXNPZmZTYW1wbGVyIH0gZnJvbSAnLi9zYW1wbGVyL0Fsd2F5c09mZlNhbXBsZXInO1xuaW1wb3J0IHsgQWx3YXlzT25TYW1wbGVyIH0gZnJvbSAnLi9zYW1wbGVyL0Fsd2F5c09uU2FtcGxlcic7XG5pbXBvcnQgeyBQYXJlbnRCYXNlZFNhbXBsZXIgfSBmcm9tICcuL3NhbXBsZXIvUGFyZW50QmFzZWRTYW1wbGVyJztcbmltcG9ydCB7IFRyYWNlSWRSYXRpb0Jhc2VkU2FtcGxlciB9IGZyb20gJy4vc2FtcGxlci9UcmFjZUlkUmF0aW9CYXNlZFNhbXBsZXInO1xudmFyIEZBTExCQUNLX09URUxfVFJBQ0VTX1NBTVBMRVIgPSBUcmFjZXNTYW1wbGVyVmFsdWVzLkFsd2F5c09uO1xudmFyIERFRkFVTFRfUkFUSU8gPSAxO1xuLyoqXG4gKiBMb2FkIGRlZmF1bHQgY29uZmlndXJhdGlvbi4gRm9yIGZpZWxkcyB3aXRoIHByaW1pdGl2ZSB2YWx1ZXMsIGFueSB1c2VyLXByb3ZpZGVkXG4gKiB2YWx1ZSB3aWxsIG92ZXJyaWRlIHRoZSBjb3JyZXNwb25kaW5nIGRlZmF1bHQgdmFsdWUuIEZvciBmaWVsZHMgd2l0aFxuICogbm9uLXByaW1pdGl2ZSB2YWx1ZXMgKGxpa2UgYHNwYW5MaW1pdHNgKSwgdGhlIHVzZXItcHJvdmlkZWQgdmFsdWUgd2lsbCBiZVxuICogdXNlZCB0byBleHRlbmQgdGhlIGRlZmF1bHQgdmFsdWUuXG4gKi9cbi8vIG9iamVjdCBuZWVkcyB0byBiZSB3cmFwcGVkIGluIHRoaXMgZnVuY3Rpb24gYW5kIGNhbGxlZCB3aGVuIG5lZWRlZCBvdGhlcndpc2Vcbi8vIGVudnMgYXJlIHBhcnNlZCBiZWZvcmUgdGVzdHMgYXJlIHJhbiAtIGNhdXNlcyB0ZXN0cyB1c2luZyB0aGVzZSBlbnZzIHRvIGZhaWxcbmV4cG9ydCBmdW5jdGlvbiBsb2FkRGVmYXVsdENvbmZpZygpIHtcbiAgICB2YXIgZW52ID0gZ2V0RW52KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2FtcGxlcjogYnVpbGRTYW1wbGVyRnJvbUVudihlbnYpLFxuICAgICAgICBmb3JjZUZsdXNoVGltZW91dE1pbGxpczogMzAwMDAsXG4gICAgICAgIGdlbmVyYWxMaW1pdHM6IHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZVZhbHVlTGVuZ3RoTGltaXQ6IGVudi5PVEVMX0FUVFJJQlVURV9WQUxVRV9MRU5HVEhfTElNSVQsXG4gICAgICAgICAgICBhdHRyaWJ1dGVDb3VudExpbWl0OiBlbnYuT1RFTF9BVFRSSUJVVEVfQ09VTlRfTElNSVQsXG4gICAgICAgIH0sXG4gICAgICAgIHNwYW5MaW1pdHM6IHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZVZhbHVlTGVuZ3RoTGltaXQ6IGVudi5PVEVMX1NQQU5fQVRUUklCVVRFX1ZBTFVFX0xFTkdUSF9MSU1JVCxcbiAgICAgICAgICAgIGF0dHJpYnV0ZUNvdW50TGltaXQ6IGVudi5PVEVMX1NQQU5fQVRUUklCVVRFX0NPVU5UX0xJTUlULFxuICAgICAgICAgICAgbGlua0NvdW50TGltaXQ6IGVudi5PVEVMX1NQQU5fTElOS19DT1VOVF9MSU1JVCxcbiAgICAgICAgICAgIGV2ZW50Q291bnRMaW1pdDogZW52Lk9URUxfU1BBTl9FVkVOVF9DT1VOVF9MSU1JVCxcbiAgICAgICAgICAgIGF0dHJpYnV0ZVBlckV2ZW50Q291bnRMaW1pdDogZW52Lk9URUxfU1BBTl9BVFRSSUJVVEVfUEVSX0VWRU5UX0NPVU5UX0xJTUlULFxuICAgICAgICAgICAgYXR0cmlidXRlUGVyTGlua0NvdW50TGltaXQ6IGVudi5PVEVMX1NQQU5fQVRUUklCVVRFX1BFUl9MSU5LX0NPVU5UX0xJTUlULFxuICAgICAgICB9LFxuICAgICAgICBtZXJnZVJlc291cmNlV2l0aERlZmF1bHRzOiB0cnVlLFxuICAgIH07XG59XG4vKipcbiAqIEJhc2VkIG9uIGVudmlyb25tZW50LCBidWlsZHMgYSBzYW1wbGVyLCBjb21wbGllcyB3aXRoIHNwZWNpZmljYXRpb24uXG4gKiBAcGFyYW0gZW52aXJvbm1lbnQgb3B0aW9uYWwsIGJ5IGRlZmF1bHQgdXNlcyBnZXRFbnYoKSwgYnV0IGFsbG93cyBwYXNzaW5nIGEgdmFsdWUgdG8gcmV1c2UgcGFyc2VkIGVudmlyb25tZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBidWlsZFNhbXBsZXJGcm9tRW52KGVudmlyb25tZW50KSB7XG4gICAgaWYgKGVudmlyb25tZW50ID09PSB2b2lkIDApIHsgZW52aXJvbm1lbnQgPSBnZXRFbnYoKTsgfVxuICAgIHN3aXRjaCAoZW52aXJvbm1lbnQuT1RFTF9UUkFDRVNfU0FNUExFUikge1xuICAgICAgICBjYXNlIFRyYWNlc1NhbXBsZXJWYWx1ZXMuQWx3YXlzT246XG4gICAgICAgICAgICByZXR1cm4gbmV3IEFsd2F5c09uU2FtcGxlcigpO1xuICAgICAgICBjYXNlIFRyYWNlc1NhbXBsZXJWYWx1ZXMuQWx3YXlzT2ZmOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBBbHdheXNPZmZTYW1wbGVyKCk7XG4gICAgICAgIGNhc2UgVHJhY2VzU2FtcGxlclZhbHVlcy5QYXJlbnRCYXNlZEFsd2F5c09uOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQYXJlbnRCYXNlZFNhbXBsZXIoe1xuICAgICAgICAgICAgICAgIHJvb3Q6IG5ldyBBbHdheXNPblNhbXBsZXIoKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBjYXNlIFRyYWNlc1NhbXBsZXJWYWx1ZXMuUGFyZW50QmFzZWRBbHdheXNPZmY6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFBhcmVudEJhc2VkU2FtcGxlcih7XG4gICAgICAgICAgICAgICAgcm9vdDogbmV3IEFsd2F5c09mZlNhbXBsZXIoKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBjYXNlIFRyYWNlc1NhbXBsZXJWYWx1ZXMuVHJhY2VJZFJhdGlvOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBUcmFjZUlkUmF0aW9CYXNlZFNhbXBsZXIoZ2V0U2FtcGxlclByb2JhYmlsaXR5RnJvbUVudihlbnZpcm9ubWVudCkpO1xuICAgICAgICBjYXNlIFRyYWNlc1NhbXBsZXJWYWx1ZXMuUGFyZW50QmFzZWRUcmFjZUlkUmF0aW86XG4gICAgICAgICAgICByZXR1cm4gbmV3IFBhcmVudEJhc2VkU2FtcGxlcih7XG4gICAgICAgICAgICAgICAgcm9vdDogbmV3IFRyYWNlSWRSYXRpb0Jhc2VkU2FtcGxlcihnZXRTYW1wbGVyUHJvYmFiaWxpdHlGcm9tRW52KGVudmlyb25tZW50KSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGRpYWcuZXJyb3IoXCJPVEVMX1RSQUNFU19TQU1QTEVSIHZhbHVlIFxcXCJcIiArIGVudmlyb25tZW50Lk9URUxfVFJBQ0VTX1NBTVBMRVIgKyBcIiBpbnZhbGlkLCBkZWZhdWx0aW5nIHRvIFwiICsgRkFMTEJBQ0tfT1RFTF9UUkFDRVNfU0FNUExFUiArIFwiXFxcIi5cIik7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEFsd2F5c09uU2FtcGxlcigpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFNhbXBsZXJQcm9iYWJpbGl0eUZyb21FbnYoZW52aXJvbm1lbnQpIHtcbiAgICBpZiAoZW52aXJvbm1lbnQuT1RFTF9UUkFDRVNfU0FNUExFUl9BUkcgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICBlbnZpcm9ubWVudC5PVEVMX1RSQUNFU19TQU1QTEVSX0FSRyA9PT0gJycpIHtcbiAgICAgICAgZGlhZy5lcnJvcihcIk9URUxfVFJBQ0VTX1NBTVBMRVJfQVJHIGlzIGJsYW5rLCBkZWZhdWx0aW5nIHRvIFwiICsgREVGQVVMVF9SQVRJTyArIFwiLlwiKTtcbiAgICAgICAgcmV0dXJuIERFRkFVTFRfUkFUSU87XG4gICAgfVxuICAgIHZhciBwcm9iYWJpbGl0eSA9IE51bWJlcihlbnZpcm9ubWVudC5PVEVMX1RSQUNFU19TQU1QTEVSX0FSRyk7XG4gICAgaWYgKGlzTmFOKHByb2JhYmlsaXR5KSkge1xuICAgICAgICBkaWFnLmVycm9yKFwiT1RFTF9UUkFDRVNfU0FNUExFUl9BUkc9XCIgKyBlbnZpcm9ubWVudC5PVEVMX1RSQUNFU19TQU1QTEVSX0FSRyArIFwiIHdhcyBnaXZlbiwgYnV0IGl0IGlzIGludmFsaWQsIGRlZmF1bHRpbmcgdG8gXCIgKyBERUZBVUxUX1JBVElPICsgXCIuXCIpO1xuICAgICAgICByZXR1cm4gREVGQVVMVF9SQVRJTztcbiAgICB9XG4gICAgaWYgKHByb2JhYmlsaXR5IDwgMCB8fCBwcm9iYWJpbGl0eSA+IDEpIHtcbiAgICAgICAgZGlhZy5lcnJvcihcIk9URUxfVFJBQ0VTX1NBTVBMRVJfQVJHPVwiICsgZW52aXJvbm1lbnQuT1RFTF9UUkFDRVNfU0FNUExFUl9BUkcgKyBcIiB3YXMgZ2l2ZW4sIGJ1dCBpdCBpcyBvdXQgb2YgcmFuZ2UgKFswLi4xXSksIGRlZmF1bHRpbmcgdG8gXCIgKyBERUZBVUxUX1JBVElPICsgXCIuXCIpO1xuICAgICAgICByZXR1cm4gREVGQVVMVF9SQVRJTztcbiAgICB9XG4gICAgcmV0dXJuIHByb2JhYmlsaXR5O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlnLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js\n')},"(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExceptionEventName: () => (/* binding */ ExceptionEventName)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Event name definitions\nvar ExceptionEventName = \'exception\';\n//# sourceMappingURL=enums.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UvYnVpbGQvZXNtL2VudW1zLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBvcGVudGVsZW1ldHJ5XFxzZGstdHJhY2UtYmFzZVxcYnVpbGRcXGVzbVxcZW51bXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIEV2ZW50IG5hbWUgZGVmaW5pdGlvbnNcbmV4cG9ydCB2YXIgRXhjZXB0aW9uRXZlbnROYW1lID0gJ2V4Y2VwdGlvbic7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnVtcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js\n')},"(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchSpanProcessorBase: () => (/* binding */ BatchSpanProcessorBase)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ "(ssr)/./node_modules/@opentelemetry/api/build/esm/diag-api.js");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ "(ssr)/./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/api */ "(ssr)/./node_modules/@opentelemetry/api/build/esm/context-api.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/platform/node/environment.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/utils/callback.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/ExportResult.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/platform/node/timer-util.js");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Implementation of the {@link SpanProcessor} that batches spans exported by\n * the SDK then pushes them to the exporter pipeline.\n */\nvar BatchSpanProcessorBase = /** @class */ (function () {\n    function BatchSpanProcessorBase(_exporter, config) {\n        this._exporter = _exporter;\n        this._isExporting = false;\n        this._finishedSpans = [];\n        this._droppedSpansCount = 0;\n        var env = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getEnv)();\n        this._maxExportBatchSize =\n            typeof (config === null || config === void 0 ? void 0 : config.maxExportBatchSize) === \'number\'\n                ? config.maxExportBatchSize\n                : env.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;\n        this._maxQueueSize =\n            typeof (config === null || config === void 0 ? void 0 : config.maxQueueSize) === \'number\'\n                ? config.maxQueueSize\n                : env.OTEL_BSP_MAX_QUEUE_SIZE;\n        this._scheduledDelayMillis =\n            typeof (config === null || config === void 0 ? void 0 : config.scheduledDelayMillis) === \'number\'\n                ? config.scheduledDelayMillis\n                : env.OTEL_BSP_SCHEDULE_DELAY;\n        this._exportTimeoutMillis =\n            typeof (config === null || config === void 0 ? void 0 : config.exportTimeoutMillis) === \'number\'\n                ? config.exportTimeoutMillis\n                : env.OTEL_BSP_EXPORT_TIMEOUT;\n        this._shutdownOnce = new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.BindOnceFuture(this._shutdown, this);\n        if (this._maxExportBatchSize > this._maxQueueSize) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.diag.warn(\'BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize\');\n            this._maxExportBatchSize = this._maxQueueSize;\n        }\n    }\n    BatchSpanProcessorBase.prototype.forceFlush = function () {\n        if (this._shutdownOnce.isCalled) {\n            return this._shutdownOnce.promise;\n        }\n        return this._flushAll();\n    };\n    // does nothing.\n    BatchSpanProcessorBase.prototype.onStart = function (_span, _parentContext) { };\n    BatchSpanProcessorBase.prototype.onEnd = function (span) {\n        if (this._shutdownOnce.isCalled) {\n            return;\n        }\n        if ((span.spanContext().traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.TraceFlags.SAMPLED) === 0) {\n            return;\n        }\n        this._addToBuffer(span);\n    };\n    BatchSpanProcessorBase.prototype.shutdown = function () {\n        return this._shutdownOnce.call();\n    };\n    BatchSpanProcessorBase.prototype._shutdown = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.onShutdown();\n        })\n            .then(function () {\n            return _this._flushAll();\n        })\n            .then(function () {\n            return _this._exporter.shutdown();\n        });\n    };\n    /** Add a span in the buffer. */\n    BatchSpanProcessorBase.prototype._addToBuffer = function (span) {\n        if (this._finishedSpans.length >= this._maxQueueSize) {\n            // limit reached, drop span\n            if (this._droppedSpansCount === 0) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.diag.debug(\'maxQueueSize reached, dropping spans\');\n            }\n            this._droppedSpansCount++;\n            return;\n        }\n        if (this._droppedSpansCount > 0) {\n            // some spans were dropped, log once with count of spans dropped\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.diag.warn("Dropped " + this._droppedSpansCount + " spans because maxQueueSize reached");\n            this._droppedSpansCount = 0;\n        }\n        this._finishedSpans.push(span);\n        this._maybeStartTimer();\n    };\n    /**\n     * Send all spans to the exporter respecting the batch size limit\n     * This function is used only on forceFlush or shutdown,\n     * for all other cases _flush should be used\n     * */\n    BatchSpanProcessorBase.prototype._flushAll = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var promises = [];\n            // calculate number of batches\n            var count = Math.ceil(_this._finishedSpans.length / _this._maxExportBatchSize);\n            for (var i = 0, j = count; i < j; i++) {\n                promises.push(_this._flushOneBatch());\n            }\n            Promise.all(promises)\n                .then(function () {\n                resolve();\n            })\n                .catch(reject);\n        });\n    };\n    BatchSpanProcessorBase.prototype._flushOneBatch = function () {\n        var _this = this;\n        this._clearTimer();\n        if (this._finishedSpans.length === 0) {\n            return Promise.resolve();\n        }\n        return new Promise(function (resolve, reject) {\n            var timer = setTimeout(function () {\n                // don\'t wait anymore for export, this way the next batch can start\n                reject(new Error(\'Timeout\'));\n            }, _this._exportTimeoutMillis);\n            // prevent downstream exporter calls from generating spans\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.context.with((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_5__.suppressTracing)(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.context.active()), function () {\n                // Reset the finished spans buffer here because the next invocations of the _flush method\n                // could pass the same finished spans to the exporter if the buffer is cleared\n                // outside the execution of this callback.\n                var spans;\n                if (_this._finishedSpans.length <= _this._maxExportBatchSize) {\n                    spans = _this._finishedSpans;\n                    _this._finishedSpans = [];\n                }\n                else {\n                    spans = _this._finishedSpans.splice(0, _this._maxExportBatchSize);\n                }\n                var doExport = function () {\n                    return _this._exporter.export(spans, function (result) {\n                        var _a;\n                        clearTimeout(timer);\n                        if (result.code === _opentelemetry_core__WEBPACK_IMPORTED_MODULE_6__.ExportResultCode.SUCCESS) {\n                            resolve();\n                        }\n                        else {\n                            reject((_a = result.error) !== null && _a !== void 0 ? _a : new Error(\'BatchSpanProcessor: span export failed\'));\n                        }\n                    });\n                };\n                var pendingResources = null;\n                for (var i = 0, len = spans.length; i < len; i++) {\n                    var span = spans[i];\n                    if (span.resource.asyncAttributesPending &&\n                        span.resource.waitForAsyncAttributes) {\n                        pendingResources !== null && pendingResources !== void 0 ? pendingResources : (pendingResources = []);\n                        pendingResources.push(span.resource.waitForAsyncAttributes());\n                    }\n                }\n                // Avoid scheduling a promise to make the behavior more predictable and easier to test\n                if (pendingResources === null) {\n                    doExport();\n                }\n                else {\n                    Promise.all(pendingResources).then(doExport, function (err) {\n                        (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_7__.globalErrorHandler)(err);\n                        reject(err);\n                    });\n                }\n            });\n        });\n    };\n    BatchSpanProcessorBase.prototype._maybeStartTimer = function () {\n        var _this = this;\n        if (this._isExporting)\n            return;\n        var flush = function () {\n            _this._isExporting = true;\n            _this._flushOneBatch()\n                .finally(function () {\n                _this._isExporting = false;\n                if (_this._finishedSpans.length > 0) {\n                    _this._clearTimer();\n                    _this._maybeStartTimer();\n                }\n            })\n                .catch(function (e) {\n                _this._isExporting = false;\n                (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_7__.globalErrorHandler)(e);\n            });\n        };\n        // we only wait if the queue doesn\'t have enough elements yet\n        if (this._finishedSpans.length >= this._maxExportBatchSize) {\n            return flush();\n        }\n        if (this._timer !== undefined)\n            return;\n        this._timer = setTimeout(function () { return flush(); }, this._scheduledDelayMillis);\n        (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__.unrefTimer)(this._timer);\n    };\n    BatchSpanProcessorBase.prototype._clearTimer = function () {\n        if (this._timer !== undefined) {\n            clearTimeout(this._timer);\n            this._timer = undefined;\n        }\n    };\n    return BatchSpanProcessorBase;\n}());\n\n//# sourceMappingURL=BatchSpanProcessorBase.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js\n')},"(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConsoleSpanExporter: () => (/* binding */ ConsoleSpanExporter)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/common/time.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/ExportResult.js");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (undefined && undefined.__values) || function(o) {\n    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === "number") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");\n};\n\n/**\n * This is implementation of {@link SpanExporter} that prints spans to the\n * console. This class can be used for diagnostic purposes.\n *\n * NOTE: This {@link SpanExporter} is intended for diagnostics use only, output rendered to the console may change at any time.\n */\n/* eslint-disable no-console */\nvar ConsoleSpanExporter = /** @class */ (function () {\n    function ConsoleSpanExporter() {\n    }\n    /**\n     * Export spans.\n     * @param spans\n     * @param resultCallback\n     */\n    ConsoleSpanExporter.prototype.export = function (spans, resultCallback) {\n        return this._sendSpans(spans, resultCallback);\n    };\n    /**\n     * Shutdown the exporter.\n     */\n    ConsoleSpanExporter.prototype.shutdown = function () {\n        this._sendSpans([]);\n        return this.forceFlush();\n    };\n    /**\n     * Exports any pending spans in exporter\n     */\n    ConsoleSpanExporter.prototype.forceFlush = function () {\n        return Promise.resolve();\n    };\n    /**\n     * converts span info into more readable format\n     * @param span\n     */\n    ConsoleSpanExporter.prototype._exportInfo = function (span) {\n        var _a;\n        return {\n            resource: {\n                attributes: span.resource.attributes,\n            },\n            instrumentationScope: span.instrumentationLibrary,\n            traceId: span.spanContext().traceId,\n            parentId: span.parentSpanId,\n            traceState: (_a = span.spanContext().traceState) === null || _a === void 0 ? void 0 : _a.serialize(),\n            name: span.name,\n            id: span.spanContext().spanId,\n            kind: span.kind,\n            timestamp: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hrTimeToMicroseconds)(span.startTime),\n            duration: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hrTimeToMicroseconds)(span.duration),\n            attributes: span.attributes,\n            status: span.status,\n            events: span.events,\n            links: span.links,\n        };\n    };\n    /**\n     * Showing spans in console\n     * @param spans\n     * @param done\n     */\n    ConsoleSpanExporter.prototype._sendSpans = function (spans, done) {\n        var e_1, _a;\n        try {\n            for (var spans_1 = __values(spans), spans_1_1 = spans_1.next(); !spans_1_1.done; spans_1_1 = spans_1.next()) {\n                var span = spans_1_1.value;\n                console.dir(this._exportInfo(span), { depth: 3 });\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (spans_1_1 && !spans_1_1.done && (_a = spans_1.return)) _a.call(spans_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        if (done) {\n            return done({ code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.ExportResultCode.SUCCESS });\n        }\n    };\n    return ConsoleSpanExporter;\n}());\n\n//# sourceMappingURL=ConsoleSpanExporter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UvYnVpbGQvZXNtL2V4cG9ydC9Db25zb2xlU3BhbkV4cG9ydGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixTQUFJLElBQUksU0FBSTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQzhFO0FBQzlFO0FBQ0EsOEJBQThCLG9CQUFvQjtBQUNsRDtBQUNBO0FBQ0EsZUFBZSxvQkFBb0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix5RUFBb0I7QUFDM0Msc0JBQXNCLHlFQUFvQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFLGlCQUFpQjtBQUM3RjtBQUNBLHNEQUFzRCxVQUFVO0FBQ2hFO0FBQ0E7QUFDQSx3QkFBd0IsUUFBUTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0EsMEJBQTBCLE1BQU0saUVBQWdCLFVBQVU7QUFDMUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUM4QjtBQUMvQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFwxXFxEb3dubG9hZHNcXHRhYm9yQWNhZGVteVVwZGF0ZWRcXHRhYm9yLWFjYWRlbXlcXG5vZGVfbW9kdWxlc1xcQG9wZW50ZWxlbWV0cnlcXHNkay10cmFjZS1iYXNlXFxidWlsZFxcZXNtXFxleHBvcnRcXENvbnNvbGVTcGFuRXhwb3J0ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfX3ZhbHVlcyA9ICh0aGlzICYmIHRoaXMuX192YWx1ZXMpIHx8IGZ1bmN0aW9uKG8pIHtcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xufTtcbmltcG9ydCB7IEV4cG9ydFJlc3VsdENvZGUsIGhyVGltZVRvTWljcm9zZWNvbmRzLCB9IGZyb20gJ0BvcGVudGVsZW1ldHJ5L2NvcmUnO1xuLyoqXG4gKiBUaGlzIGlzIGltcGxlbWVudGF0aW9uIG9mIHtAbGluayBTcGFuRXhwb3J0ZXJ9IHRoYXQgcHJpbnRzIHNwYW5zIHRvIHRoZVxuICogY29uc29sZS4gVGhpcyBjbGFzcyBjYW4gYmUgdXNlZCBmb3IgZGlhZ25vc3RpYyBwdXJwb3Nlcy5cbiAqXG4gKiBOT1RFOiBUaGlzIHtAbGluayBTcGFuRXhwb3J0ZXJ9IGlzIGludGVuZGVkIGZvciBkaWFnbm9zdGljcyB1c2Ugb25seSwgb3V0cHV0IHJlbmRlcmVkIHRvIHRoZSBjb25zb2xlIG1heSBjaGFuZ2UgYXQgYW55IHRpbWUuXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbnZhciBDb25zb2xlU3BhbkV4cG9ydGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbnNvbGVTcGFuRXhwb3J0ZXIoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4cG9ydCBzcGFucy5cbiAgICAgKiBAcGFyYW0gc3BhbnNcbiAgICAgKiBAcGFyYW0gcmVzdWx0Q2FsbGJhY2tcbiAgICAgKi9cbiAgICBDb25zb2xlU3BhbkV4cG9ydGVyLnByb3RvdHlwZS5leHBvcnQgPSBmdW5jdGlvbiAoc3BhbnMsIHJlc3VsdENhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZW5kU3BhbnMoc3BhbnMsIHJlc3VsdENhbGxiYWNrKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNodXRkb3duIHRoZSBleHBvcnRlci5cbiAgICAgKi9cbiAgICBDb25zb2xlU3BhbkV4cG9ydGVyLnByb3RvdHlwZS5zaHV0ZG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fc2VuZFNwYW5zKFtdKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9yY2VGbHVzaCgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRXhwb3J0cyBhbnkgcGVuZGluZyBzcGFucyBpbiBleHBvcnRlclxuICAgICAqL1xuICAgIENvbnNvbGVTcGFuRXhwb3J0ZXIucHJvdG90eXBlLmZvcmNlRmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIGNvbnZlcnRzIHNwYW4gaW5mbyBpbnRvIG1vcmUgcmVhZGFibGUgZm9ybWF0XG4gICAgICogQHBhcmFtIHNwYW5cbiAgICAgKi9cbiAgICBDb25zb2xlU3BhbkV4cG9ydGVyLnByb3RvdHlwZS5fZXhwb3J0SW5mbyA9IGZ1bmN0aW9uIChzcGFuKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc291cmNlOiB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczogc3Bhbi5yZXNvdXJjZS5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluc3RydW1lbnRhdGlvblNjb3BlOiBzcGFuLmluc3RydW1lbnRhdGlvbkxpYnJhcnksXG4gICAgICAgICAgICB0cmFjZUlkOiBzcGFuLnNwYW5Db250ZXh0KCkudHJhY2VJZCxcbiAgICAgICAgICAgIHBhcmVudElkOiBzcGFuLnBhcmVudFNwYW5JZCxcbiAgICAgICAgICAgIHRyYWNlU3RhdGU6IChfYSA9IHNwYW4uc3BhbkNvbnRleHQoKS50cmFjZVN0YXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2VyaWFsaXplKCksXG4gICAgICAgICAgICBuYW1lOiBzcGFuLm5hbWUsXG4gICAgICAgICAgICBpZDogc3Bhbi5zcGFuQ29udGV4dCgpLnNwYW5JZCxcbiAgICAgICAgICAgIGtpbmQ6IHNwYW4ua2luZCxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogaHJUaW1lVG9NaWNyb3NlY29uZHMoc3Bhbi5zdGFydFRpbWUpLFxuICAgICAgICAgICAgZHVyYXRpb246IGhyVGltZVRvTWljcm9zZWNvbmRzKHNwYW4uZHVyYXRpb24pLFxuICAgICAgICAgICAgYXR0cmlidXRlczogc3Bhbi5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgc3RhdHVzOiBzcGFuLnN0YXR1cyxcbiAgICAgICAgICAgIGV2ZW50czogc3Bhbi5ldmVudHMsXG4gICAgICAgICAgICBsaW5rczogc3Bhbi5saW5rcyxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNob3dpbmcgc3BhbnMgaW4gY29uc29sZVxuICAgICAqIEBwYXJhbSBzcGFuc1xuICAgICAqIEBwYXJhbSBkb25lXG4gICAgICovXG4gICAgQ29uc29sZVNwYW5FeHBvcnRlci5wcm90b3R5cGUuX3NlbmRTcGFucyA9IGZ1bmN0aW9uIChzcGFucywgZG9uZSkge1xuICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIHNwYW5zXzEgPSBfX3ZhbHVlcyhzcGFucyksIHNwYW5zXzFfMSA9IHNwYW5zXzEubmV4dCgpOyAhc3BhbnNfMV8xLmRvbmU7IHNwYW5zXzFfMSA9IHNwYW5zXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNwYW4gPSBzcGFuc18xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS5kaXIodGhpcy5fZXhwb3J0SW5mbyhzcGFuKSwgeyBkZXB0aDogMyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKHNwYW5zXzFfMSAmJiAhc3BhbnNfMV8xLmRvbmUgJiYgKF9hID0gc3BhbnNfMS5yZXR1cm4pKSBfYS5jYWxsKHNwYW5zXzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9uZSh7IGNvZGU6IEV4cG9ydFJlc3VsdENvZGUuU1VDQ0VTUyB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIENvbnNvbGVTcGFuRXhwb3J0ZXI7XG59KCkpO1xuZXhwb3J0IHsgQ29uc29sZVNwYW5FeHBvcnRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29uc29sZVNwYW5FeHBvcnRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js\n')},"(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InMemorySpanExporter: () => (/* binding */ InMemorySpanExporter)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/ExportResult.js");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === "function" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i["return"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n/**\n * This class can be used for testing purposes. It stores the exported spans\n * in a list in memory that can be retrieved using the `getFinishedSpans()`\n * method.\n */\nvar InMemorySpanExporter = /** @class */ (function () {\n    function InMemorySpanExporter() {\n        this._finishedSpans = [];\n        /**\n         * Indicates if the exporter has been "shutdown."\n         * When false, exported spans will not be stored in-memory.\n         */\n        this._stopped = false;\n    }\n    InMemorySpanExporter.prototype.export = function (spans, resultCallback) {\n        var _a;\n        if (this._stopped)\n            return resultCallback({\n                code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.ExportResultCode.FAILED,\n                error: new Error(\'Exporter has been stopped\'),\n            });\n        (_a = this._finishedSpans).push.apply(_a, __spreadArray([], __read(spans), false));\n        setTimeout(function () { return resultCallback({ code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.ExportResultCode.SUCCESS }); }, 0);\n    };\n    InMemorySpanExporter.prototype.shutdown = function () {\n        this._stopped = true;\n        this._finishedSpans = [];\n        return this.forceFlush();\n    };\n    /**\n     * Exports any pending spans in the exporter\n     */\n    InMemorySpanExporter.prototype.forceFlush = function () {\n        return Promise.resolve();\n    };\n    InMemorySpanExporter.prototype.reset = function () {\n        this._finishedSpans = [];\n    };\n    InMemorySpanExporter.prototype.getFinishedSpans = function () {\n        return this._finishedSpans;\n    };\n    return InMemorySpanExporter;\n}());\n\n//# sourceMappingURL=InMemorySpanExporter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UvYnVpbGQvZXNtL2V4cG9ydC9Jbk1lbW9yeVNwYW5FeHBvcnRlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsU0FBSSxJQUFJLFNBQUk7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLE1BQU07QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLFNBQUksSUFBSSxTQUFJO0FBQ2pDLDZFQUE2RSxPQUFPO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3VEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpRUFBZ0I7QUFDdEM7QUFDQSxhQUFhO0FBQ2I7QUFDQSxpQ0FBaUMsd0JBQXdCLE1BQU0saUVBQWdCLFVBQVUsSUFBSTtBQUM3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDK0I7QUFDaEMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBvcGVudGVsZW1ldHJ5XFxzZGstdHJhY2UtYmFzZVxcYnVpbGRcXGVzbVxcZXhwb3J0XFxJbk1lbW9yeVNwYW5FeHBvcnRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSwgcGFjaykge1xuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59O1xuaW1wb3J0IHsgRXhwb3J0UmVzdWx0Q29kZSB9IGZyb20gJ0BvcGVudGVsZW1ldHJ5L2NvcmUnO1xuLyoqXG4gKiBUaGlzIGNsYXNzIGNhbiBiZSB1c2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzLiBJdCBzdG9yZXMgdGhlIGV4cG9ydGVkIHNwYW5zXG4gKiBpbiBhIGxpc3QgaW4gbWVtb3J5IHRoYXQgY2FuIGJlIHJldHJpZXZlZCB1c2luZyB0aGUgYGdldEZpbmlzaGVkU3BhbnMoKWBcbiAqIG1ldGhvZC5cbiAqL1xudmFyIEluTWVtb3J5U3BhbkV4cG9ydGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEluTWVtb3J5U3BhbkV4cG9ydGVyKCkge1xuICAgICAgICB0aGlzLl9maW5pc2hlZFNwYW5zID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIGV4cG9ydGVyIGhhcyBiZWVuIFwic2h1dGRvd24uXCJcbiAgICAgICAgICogV2hlbiBmYWxzZSwgZXhwb3J0ZWQgc3BhbnMgd2lsbCBub3QgYmUgc3RvcmVkIGluLW1lbW9yeS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3N0b3BwZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgSW5NZW1vcnlTcGFuRXhwb3J0ZXIucHJvdG90eXBlLmV4cG9ydCA9IGZ1bmN0aW9uIChzcGFucywgcmVzdWx0Q2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGhpcy5fc3RvcHBlZClcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRDYWxsYmFjayh7XG4gICAgICAgICAgICAgICAgY29kZTogRXhwb3J0UmVzdWx0Q29kZS5GQUlMRUQsXG4gICAgICAgICAgICAgICAgZXJyb3I6IG5ldyBFcnJvcignRXhwb3J0ZXIgaGFzIGJlZW4gc3RvcHBlZCcpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIChfYSA9IHRoaXMuX2ZpbmlzaGVkU3BhbnMpLnB1c2guYXBwbHkoX2EsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChzcGFucyksIGZhbHNlKSk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzdWx0Q2FsbGJhY2soeyBjb2RlOiBFeHBvcnRSZXN1bHRDb2RlLlNVQ0NFU1MgfSk7IH0sIDApO1xuICAgIH07XG4gICAgSW5NZW1vcnlTcGFuRXhwb3J0ZXIucHJvdG90eXBlLnNodXRkb3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZmluaXNoZWRTcGFucyA9IFtdO1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JjZUZsdXNoKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBFeHBvcnRzIGFueSBwZW5kaW5nIHNwYW5zIGluIHRoZSBleHBvcnRlclxuICAgICAqL1xuICAgIEluTWVtb3J5U3BhbkV4cG9ydGVyLnByb3RvdHlwZS5mb3JjZUZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfTtcbiAgICBJbk1lbW9yeVNwYW5FeHBvcnRlci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2ZpbmlzaGVkU3BhbnMgPSBbXTtcbiAgICB9O1xuICAgIEluTWVtb3J5U3BhbkV4cG9ydGVyLnByb3RvdHlwZS5nZXRGaW5pc2hlZFNwYW5zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmluaXNoZWRTcGFucztcbiAgICB9O1xuICAgIHJldHVybiBJbk1lbW9yeVNwYW5FeHBvcnRlcjtcbn0oKSk7XG5leHBvcnQgeyBJbk1lbW9yeVNwYW5FeHBvcnRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW5NZW1vcnlTcGFuRXhwb3J0ZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js\n')},"(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoopSpanProcessor: () => (/* binding */ NoopSpanProcessor)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** No-op implementation of SpanProcessor */\nvar NoopSpanProcessor = /** @class */ (function () {\n    function NoopSpanProcessor() {\n    }\n    NoopSpanProcessor.prototype.onStart = function (_span, _context) { };\n    NoopSpanProcessor.prototype.onEnd = function (_span) { };\n    NoopSpanProcessor.prototype.shutdown = function () {\n        return Promise.resolve();\n    };\n    NoopSpanProcessor.prototype.forceFlush = function () {\n        return Promise.resolve();\n    };\n    return NoopSpanProcessor;\n}());\n\n//# sourceMappingURL=NoopSpanProcessor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UvYnVpbGQvZXNtL2V4cG9ydC9Ob29wU3BhblByb2Nlc3Nvci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQzRCO0FBQzdCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAb3BlbnRlbGVtZXRyeVxcc2RrLXRyYWNlLWJhc2VcXGJ1aWxkXFxlc21cXGV4cG9ydFxcTm9vcFNwYW5Qcm9jZXNzb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKiBOby1vcCBpbXBsZW1lbnRhdGlvbiBvZiBTcGFuUHJvY2Vzc29yICovXG52YXIgTm9vcFNwYW5Qcm9jZXNzb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTm9vcFNwYW5Qcm9jZXNzb3IoKSB7XG4gICAgfVxuICAgIE5vb3BTcGFuUHJvY2Vzc29yLnByb3RvdHlwZS5vblN0YXJ0ID0gZnVuY3Rpb24gKF9zcGFuLCBfY29udGV4dCkgeyB9O1xuICAgIE5vb3BTcGFuUHJvY2Vzc29yLnByb3RvdHlwZS5vbkVuZCA9IGZ1bmN0aW9uIChfc3BhbikgeyB9O1xuICAgIE5vb3BTcGFuUHJvY2Vzc29yLnByb3RvdHlwZS5zaHV0ZG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH07XG4gICAgTm9vcFNwYW5Qcm9jZXNzb3IucHJvdG90eXBlLmZvcmNlRmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9O1xuICAgIHJldHVybiBOb29wU3BhblByb2Nlc3Nvcjtcbn0oKSk7XG5leHBvcnQgeyBOb29wU3BhblByb2Nlc3NvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm9vcFNwYW5Qcm9jZXNzb3IuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js\n')},"(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SimpleSpanProcessor: () => (/* binding */ SimpleSpanProcessor)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ "(ssr)/./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/utils/callback.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/index.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/ExportResult.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError("Generator is already executing.");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n\n/**\n * An implementation of the {@link SpanProcessor} that converts the {@link Span}\n * to {@link ReadableSpan} and passes it to the configured exporter.\n *\n * Only spans that are sampled are converted.\n *\n * NOTE: This {@link SpanProcessor} exports every ended span individually instead of batching spans together, which causes significant performance overhead with most exporters. For production use, please consider using the {@link BatchSpanProcessor} instead.\n */\nvar SimpleSpanProcessor = /** @class */ (function () {\n    function SimpleSpanProcessor(_exporter) {\n        this._exporter = _exporter;\n        this._shutdownOnce = new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.BindOnceFuture(this._shutdown, this);\n        this._unresolvedExports = new Set();\n    }\n    SimpleSpanProcessor.prototype.forceFlush = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // await unresolved resources before resolving\n                    return [4 /*yield*/, Promise.all(Array.from(this._unresolvedExports))];\n                    case 1:\n                        // await unresolved resources before resolving\n                        _a.sent();\n                        if (!this._exporter.forceFlush) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this._exporter.forceFlush()];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    SimpleSpanProcessor.prototype.onStart = function (_span, _parentContext) { };\n    SimpleSpanProcessor.prototype.onEnd = function (span) {\n        var _this = this;\n        var _a, _b;\n        if (this._shutdownOnce.isCalled) {\n            return;\n        }\n        if ((span.spanContext().traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.TraceFlags.SAMPLED) === 0) {\n            return;\n        }\n        var doExport = function () {\n            return _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.internal\n                ._export(_this._exporter, [span])\n                .then(function (result) {\n                var _a;\n                if (result.code !== _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__.ExportResultCode.SUCCESS) {\n                    (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.globalErrorHandler)((_a = result.error) !== null && _a !== void 0 ? _a : new Error("SimpleSpanProcessor: span export failed (status " + result + ")"));\n                }\n            })\n                .catch(function (error) {\n                (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.globalErrorHandler)(error);\n            });\n        };\n        // Avoid scheduling a promise to make the behavior more predictable and easier to test\n        if (span.resource.asyncAttributesPending) {\n            var exportPromise_1 = (_b = (_a = span.resource).waitForAsyncAttributes) === null || _b === void 0 ? void 0 : _b.call(_a).then(function () {\n                if (exportPromise_1 != null) {\n                    _this._unresolvedExports.delete(exportPromise_1);\n                }\n                return doExport();\n            }, function (err) { return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.globalErrorHandler)(err); });\n            // store the unresolved exports\n            if (exportPromise_1 != null) {\n                this._unresolvedExports.add(exportPromise_1);\n            }\n        }\n        else {\n            void doExport();\n        }\n    };\n    SimpleSpanProcessor.prototype.shutdown = function () {\n        return this._shutdownOnce.call();\n    };\n    SimpleSpanProcessor.prototype._shutdown = function () {\n        return this._exporter.shutdown();\n    };\n    return SimpleSpanProcessor;\n}());\n\n//# sourceMappingURL=SimpleSpanProcessor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js\n')},"(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlwaysOffSampler: () => (/* reexport safe */ _sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_8__.AlwaysOffSampler),\n/* harmony export */   AlwaysOnSampler: () => (/* reexport safe */ _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_9__.AlwaysOnSampler),\n/* harmony export */   BasicTracerProvider: () => (/* reexport safe */ _BasicTracerProvider__WEBPACK_IMPORTED_MODULE_1__.BasicTracerProvider),\n/* harmony export */   BatchSpanProcessor: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_2__.BatchSpanProcessor),\n/* harmony export */   ConsoleSpanExporter: () => (/* reexport safe */ _export_ConsoleSpanExporter__WEBPACK_IMPORTED_MODULE_4__.ConsoleSpanExporter),\n/* harmony export */   ForceFlushState: () => (/* reexport safe */ _BasicTracerProvider__WEBPACK_IMPORTED_MODULE_1__.ForceFlushState),\n/* harmony export */   InMemorySpanExporter: () => (/* reexport safe */ _export_InMemorySpanExporter__WEBPACK_IMPORTED_MODULE_5__.InMemorySpanExporter),\n/* harmony export */   NoopSpanProcessor: () => (/* reexport safe */ _export_NoopSpanProcessor__WEBPACK_IMPORTED_MODULE_7__.NoopSpanProcessor),\n/* harmony export */   ParentBasedSampler: () => (/* reexport safe */ _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_10__.ParentBasedSampler),\n/* harmony export */   RandomIdGenerator: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_3__.RandomIdGenerator),\n/* harmony export */   SamplingDecision: () => (/* reexport safe */ _Sampler__WEBPACK_IMPORTED_MODULE_12__.SamplingDecision),\n/* harmony export */   SimpleSpanProcessor: () => (/* reexport safe */ _export_SimpleSpanProcessor__WEBPACK_IMPORTED_MODULE_6__.SimpleSpanProcessor),\n/* harmony export */   Span: () => (/* reexport safe */ _Span__WEBPACK_IMPORTED_MODULE_13__.Span),\n/* harmony export */   TraceIdRatioBasedSampler: () => (/* reexport safe */ _sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_11__.TraceIdRatioBasedSampler),\n/* harmony export */   Tracer: () => (/* reexport safe */ _Tracer__WEBPACK_IMPORTED_MODULE_0__.Tracer)\n/* harmony export */ });\n/* harmony import */ var _Tracer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Tracer */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js");\n/* harmony import */ var _BasicTracerProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BasicTracerProvider */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./platform */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/export/BatchSpanProcessor.js");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./platform */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/RandomIdGenerator.js");\n/* harmony import */ var _export_ConsoleSpanExporter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./export/ConsoleSpanExporter */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js");\n/* harmony import */ var _export_InMemorySpanExporter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./export/InMemorySpanExporter */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js");\n/* harmony import */ var _export_SimpleSpanProcessor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./export/SimpleSpanProcessor */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js");\n/* harmony import */ var _export_NoopSpanProcessor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./export/NoopSpanProcessor */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js");\n/* harmony import */ var _sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./sampler/AlwaysOffSampler */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js");\n/* harmony import */ var _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./sampler/AlwaysOnSampler */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js");\n/* harmony import */ var _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./sampler/ParentBasedSampler */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js");\n/* harmony import */ var _sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./sampler/TraceIdRatioBasedSampler */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js");\n/* harmony import */ var _Sampler__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Sampler */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js");\n/* harmony import */ var _Span__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Span */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UvYnVpbGQvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2tDO0FBQzRDO0FBQ1g7QUFDQTtBQUNFO0FBQ0Y7QUFDSjtBQUNEO0FBQ0Y7QUFDTTtBQUNZO0FBQ2pDO0FBQ2Y7QUFDOUIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBvcGVudGVsZW1ldHJ5XFxzZGstdHJhY2UtYmFzZVxcYnVpbGRcXGVzbVxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmV4cG9ydCB7IFRyYWNlciB9IGZyb20gJy4vVHJhY2VyJztcbmV4cG9ydCB7IEJhc2ljVHJhY2VyUHJvdmlkZXIsIEZvcmNlRmx1c2hTdGF0ZSwgfSBmcm9tICcuL0Jhc2ljVHJhY2VyUHJvdmlkZXInO1xuZXhwb3J0IHsgQmF0Y2hTcGFuUHJvY2Vzc29yLCBSYW5kb21JZEdlbmVyYXRvciB9IGZyb20gJy4vcGxhdGZvcm0nO1xuZXhwb3J0IHsgQ29uc29sZVNwYW5FeHBvcnRlciB9IGZyb20gJy4vZXhwb3J0L0NvbnNvbGVTcGFuRXhwb3J0ZXInO1xuZXhwb3J0IHsgSW5NZW1vcnlTcGFuRXhwb3J0ZXIgfSBmcm9tICcuL2V4cG9ydC9Jbk1lbW9yeVNwYW5FeHBvcnRlcic7XG5leHBvcnQgeyBTaW1wbGVTcGFuUHJvY2Vzc29yIH0gZnJvbSAnLi9leHBvcnQvU2ltcGxlU3BhblByb2Nlc3Nvcic7XG5leHBvcnQgeyBOb29wU3BhblByb2Nlc3NvciB9IGZyb20gJy4vZXhwb3J0L05vb3BTcGFuUHJvY2Vzc29yJztcbmV4cG9ydCB7IEFsd2F5c09mZlNhbXBsZXIgfSBmcm9tICcuL3NhbXBsZXIvQWx3YXlzT2ZmU2FtcGxlcic7XG5leHBvcnQgeyBBbHdheXNPblNhbXBsZXIgfSBmcm9tICcuL3NhbXBsZXIvQWx3YXlzT25TYW1wbGVyJztcbmV4cG9ydCB7IFBhcmVudEJhc2VkU2FtcGxlciB9IGZyb20gJy4vc2FtcGxlci9QYXJlbnRCYXNlZFNhbXBsZXInO1xuZXhwb3J0IHsgVHJhY2VJZFJhdGlvQmFzZWRTYW1wbGVyIH0gZnJvbSAnLi9zYW1wbGVyL1RyYWNlSWRSYXRpb0Jhc2VkU2FtcGxlcic7XG5leHBvcnQgeyBTYW1wbGluZ0RlY2lzaW9uIH0gZnJvbSAnLi9TYW1wbGVyJztcbmV4cG9ydCB7IFNwYW4gfSBmcm9tICcuL1NwYW4nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\n')},"(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/RandomIdGenerator.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RandomIdGenerator: () => (/* binding */ RandomIdGenerator)\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "buffer")["Buffer"];\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar SPAN_ID_BYTES = 8;\nvar TRACE_ID_BYTES = 16;\nvar RandomIdGenerator = /** @class */ (function () {\n    function RandomIdGenerator() {\n        /**\n         * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n         * characters corresponding to 128 bits.\n         */\n        this.generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n        /**\n         * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n         * characters corresponding to 64 bits.\n         */\n        this.generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n    }\n    return RandomIdGenerator;\n}());\n\nvar SHARED_BUFFER = Buffer.allocUnsafe(TRACE_ID_BYTES);\nfunction getIdGenerator(bytes) {\n    return function generateId() {\n        for (var i = 0; i < bytes / 4; i++) {\n            // unsigned right shift drops decimal part of the number\n            // it is required because if a number between 2**32 and 2**32 - 1 is generated, an out of range error is thrown by writeUInt32BE\n            SHARED_BUFFER.writeUInt32BE((Math.random() * Math.pow(2, 32)) >>> 0, i * 4);\n        }\n        // If buffer is all 0, set the last byte to 1 to guarantee a valid w3c id is generated\n        for (var i = 0; i < bytes; i++) {\n            if (SHARED_BUFFER[i] > 0) {\n                break;\n            }\n            else if (i === bytes - 1) {\n                SHARED_BUFFER[bytes - 1] = 1;\n            }\n        }\n        return SHARED_BUFFER.toString(\'hex\', 0, bytes);\n    };\n}\n//# sourceMappingURL=RandomIdGenerator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UvYnVpbGQvZXNtL3BsYXRmb3JtL25vZGUvUmFuZG9tSWRHZW5lcmF0b3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDNEI7QUFDN0Isb0JBQW9CLE1BQU07QUFDMUI7QUFDQTtBQUNBLHdCQUF3QixlQUFlO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsV0FBVztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAb3BlbnRlbGVtZXRyeVxcc2RrLXRyYWNlLWJhc2VcXGJ1aWxkXFxlc21cXHBsYXRmb3JtXFxub2RlXFxSYW5kb21JZEdlbmVyYXRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIFNQQU5fSURfQllURVMgPSA4O1xudmFyIFRSQUNFX0lEX0JZVEVTID0gMTY7XG52YXIgUmFuZG9tSWRHZW5lcmF0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmFuZG9tSWRHZW5lcmF0b3IoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIGEgcmFuZG9tIDE2LWJ5dGUgdHJhY2UgSUQgZm9ybWF0dGVkL2VuY29kZWQgYXMgYSAzMiBsb3dlcmNhc2UgaGV4XG4gICAgICAgICAqIGNoYXJhY3RlcnMgY29ycmVzcG9uZGluZyB0byAxMjggYml0cy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZ2VuZXJhdGVUcmFjZUlkID0gZ2V0SWRHZW5lcmF0b3IoVFJBQ0VfSURfQllURVMpO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyBhIHJhbmRvbSA4LWJ5dGUgc3BhbiBJRCBmb3JtYXR0ZWQvZW5jb2RlZCBhcyBhIDE2IGxvd2VyY2FzZSBoZXhcbiAgICAgICAgICogY2hhcmFjdGVycyBjb3JyZXNwb25kaW5nIHRvIDY0IGJpdHMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdlbmVyYXRlU3BhbklkID0gZ2V0SWRHZW5lcmF0b3IoU1BBTl9JRF9CWVRFUyk7XG4gICAgfVxuICAgIHJldHVybiBSYW5kb21JZEdlbmVyYXRvcjtcbn0oKSk7XG5leHBvcnQgeyBSYW5kb21JZEdlbmVyYXRvciB9O1xudmFyIFNIQVJFRF9CVUZGRVIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoVFJBQ0VfSURfQllURVMpO1xuZnVuY3Rpb24gZ2V0SWRHZW5lcmF0b3IoYnl0ZXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZ2VuZXJhdGVJZCgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcyAvIDQ7IGkrKykge1xuICAgICAgICAgICAgLy8gdW5zaWduZWQgcmlnaHQgc2hpZnQgZHJvcHMgZGVjaW1hbCBwYXJ0IG9mIHRoZSBudW1iZXJcbiAgICAgICAgICAgIC8vIGl0IGlzIHJlcXVpcmVkIGJlY2F1c2UgaWYgYSBudW1iZXIgYmV0d2VlbiAyKiozMiBhbmQgMioqMzIgLSAxIGlzIGdlbmVyYXRlZCwgYW4gb3V0IG9mIHJhbmdlIGVycm9yIGlzIHRocm93biBieSB3cml0ZVVJbnQzMkJFXG4gICAgICAgICAgICBTSEFSRURfQlVGRkVSLndyaXRlVUludDMyQkUoKE1hdGgucmFuZG9tKCkgKiBNYXRoLnBvdygyLCAzMikpID4+PiAwLCBpICogNCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgYnVmZmVyIGlzIGFsbCAwLCBzZXQgdGhlIGxhc3QgYnl0ZSB0byAxIHRvIGd1YXJhbnRlZSBhIHZhbGlkIHczYyBpZCBpcyBnZW5lcmF0ZWRcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoU0hBUkVEX0JVRkZFUltpXSA+IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGkgPT09IGJ5dGVzIC0gMSkge1xuICAgICAgICAgICAgICAgIFNIQVJFRF9CVUZGRVJbYnl0ZXMgLSAxXSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFNIQVJFRF9CVUZGRVIudG9TdHJpbmcoJ2hleCcsIDAsIGJ5dGVzKTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmFuZG9tSWRHZW5lcmF0b3IuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/RandomIdGenerator.js\n')},"(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/export/BatchSpanProcessor.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchSpanProcessor: () => (/* binding */ BatchSpanProcessor)\n/* harmony export */ });\n/* harmony import */ var _export_BatchSpanProcessorBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../export/BatchSpanProcessorBase */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== "function" && b !== null)\n            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\nvar BatchSpanProcessor = /** @class */ (function (_super) {\n    __extends(BatchSpanProcessor, _super);\n    function BatchSpanProcessor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    BatchSpanProcessor.prototype.onShutdown = function () { };\n    return BatchSpanProcessor;\n}(_export_BatchSpanProcessorBase__WEBPACK_IMPORTED_MODULE_0__.BatchSpanProcessorBase));\n\n//# sourceMappingURL=BatchSpanProcessor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UvYnVpbGQvZXNtL3BsYXRmb3JtL25vZGUvZXhwb3J0L0JhdGNoU3BhblByb2Nlc3Nvci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFJLElBQUksU0FBSTtBQUM3QjtBQUNBO0FBQ0EsZUFBZSxnQkFBZ0Isc0NBQXNDLGtCQUFrQjtBQUN2Riw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQSxDQUFDO0FBQytFO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxDQUFDLGtGQUFzQjtBQUNNO0FBQzlCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAb3BlbnRlbGVtZXRyeVxcc2RrLXRyYWNlLWJhc2VcXGJ1aWxkXFxlc21cXHBsYXRmb3JtXFxub2RlXFxleHBvcnRcXEJhdGNoU3BhblByb2Nlc3Nvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbmltcG9ydCB7IEJhdGNoU3BhblByb2Nlc3NvckJhc2UgfSBmcm9tICcuLi8uLi8uLi9leHBvcnQvQmF0Y2hTcGFuUHJvY2Vzc29yQmFzZSc7XG52YXIgQmF0Y2hTcGFuUHJvY2Vzc29yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhCYXRjaFNwYW5Qcm9jZXNzb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQmF0Y2hTcGFuUHJvY2Vzc29yKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEJhdGNoU3BhblByb2Nlc3Nvci5wcm90b3R5cGUub25TaHV0ZG93biA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICByZXR1cm4gQmF0Y2hTcGFuUHJvY2Vzc29yO1xufShCYXRjaFNwYW5Qcm9jZXNzb3JCYXNlKSk7XG5leHBvcnQgeyBCYXRjaFNwYW5Qcm9jZXNzb3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJhdGNoU3BhblByb2Nlc3Nvci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/export/BatchSpanProcessor.js\n')},"(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlwaysOffSampler: () => (/* binding */ AlwaysOffSampler)\n/* harmony export */ });\n/* harmony import */ var _Sampler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Sampler */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Sampler that samples no traces. */\nvar AlwaysOffSampler = /** @class */ (function () {\n    function AlwaysOffSampler() {\n    }\n    AlwaysOffSampler.prototype.shouldSample = function () {\n        return {\n            decision: _Sampler__WEBPACK_IMPORTED_MODULE_0__.SamplingDecision.NOT_RECORD,\n        };\n    };\n    AlwaysOffSampler.prototype.toString = function () {\n        return \'AlwaysOffSampler\';\n    };\n    return AlwaysOffSampler;\n}());\n\n//# sourceMappingURL=AlwaysOffSampler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UvYnVpbGQvZXNtL3NhbXBsZXIvQWx3YXlzT2ZmU2FtcGxlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUM4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0RBQWdCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDMkI7QUFDNUIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBvcGVudGVsZW1ldHJ5XFxzZGstdHJhY2UtYmFzZVxcYnVpbGRcXGVzbVxcc2FtcGxlclxcQWx3YXlzT2ZmU2FtcGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgU2FtcGxpbmdEZWNpc2lvbiB9IGZyb20gJy4uL1NhbXBsZXInO1xuLyoqIFNhbXBsZXIgdGhhdCBzYW1wbGVzIG5vIHRyYWNlcy4gKi9cbnZhciBBbHdheXNPZmZTYW1wbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFsd2F5c09mZlNhbXBsZXIoKSB7XG4gICAgfVxuICAgIEFsd2F5c09mZlNhbXBsZXIucHJvdG90eXBlLnNob3VsZFNhbXBsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRlY2lzaW9uOiBTYW1wbGluZ0RlY2lzaW9uLk5PVF9SRUNPUkQsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBBbHdheXNPZmZTYW1wbGVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICdBbHdheXNPZmZTYW1wbGVyJztcbiAgICB9O1xuICAgIHJldHVybiBBbHdheXNPZmZTYW1wbGVyO1xufSgpKTtcbmV4cG9ydCB7IEFsd2F5c09mZlNhbXBsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFsd2F5c09mZlNhbXBsZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js\n')},"(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlwaysOnSampler: () => (/* binding */ AlwaysOnSampler)\n/* harmony export */ });\n/* harmony import */ var _Sampler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Sampler */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Sampler that samples all traces. */\nvar AlwaysOnSampler = /** @class */ (function () {\n    function AlwaysOnSampler() {\n    }\n    AlwaysOnSampler.prototype.shouldSample = function () {\n        return {\n            decision: _Sampler__WEBPACK_IMPORTED_MODULE_0__.SamplingDecision.RECORD_AND_SAMPLED,\n        };\n    };\n    AlwaysOnSampler.prototype.toString = function () {\n        return \'AlwaysOnSampler\';\n    };\n    return AlwaysOnSampler;\n}());\n\n//# sourceMappingURL=AlwaysOnSampler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UvYnVpbGQvZXNtL3NhbXBsZXIvQWx3YXlzT25TYW1wbGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzhDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzREFBZ0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUMwQjtBQUMzQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFwxXFxEb3dubG9hZHNcXHRhYm9yQWNhZGVteVVwZGF0ZWRcXHRhYm9yLWFjYWRlbXlcXG5vZGVfbW9kdWxlc1xcQG9wZW50ZWxlbWV0cnlcXHNkay10cmFjZS1iYXNlXFxidWlsZFxcZXNtXFxzYW1wbGVyXFxBbHdheXNPblNhbXBsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IFNhbXBsaW5nRGVjaXNpb24gfSBmcm9tICcuLi9TYW1wbGVyJztcbi8qKiBTYW1wbGVyIHRoYXQgc2FtcGxlcyBhbGwgdHJhY2VzLiAqL1xudmFyIEFsd2F5c09uU2FtcGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBbHdheXNPblNhbXBsZXIoKSB7XG4gICAgfVxuICAgIEFsd2F5c09uU2FtcGxlci5wcm90b3R5cGUuc2hvdWxkU2FtcGxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGVjaXNpb246IFNhbXBsaW5nRGVjaXNpb24uUkVDT1JEX0FORF9TQU1QTEVELFxuICAgICAgICB9O1xuICAgIH07XG4gICAgQWx3YXlzT25TYW1wbGVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICdBbHdheXNPblNhbXBsZXInO1xuICAgIH07XG4gICAgcmV0dXJuIEFsd2F5c09uU2FtcGxlcjtcbn0oKSk7XG5leHBvcnQgeyBBbHdheXNPblNhbXBsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFsd2F5c09uU2FtcGxlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js\n')},"(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ParentBasedSampler: () => (/* binding */ ParentBasedSampler)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ "(ssr)/./node_modules/@opentelemetry/api/build/esm/trace-api.js");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/api */ "(ssr)/./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/api */ "(ssr)/./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js");\n/* harmony import */ var _AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AlwaysOffSampler */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js");\n/* harmony import */ var _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AlwaysOnSampler */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n/**\n * A composite sampler that either respects the parent span\'s sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nvar ParentBasedSampler = /** @class */ (function () {\n    function ParentBasedSampler(config) {\n        var _a, _b, _c, _d;\n        this._root = config.root;\n        if (!this._root) {\n            (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.globalErrorHandler)(new Error(\'ParentBasedSampler must have a root sampler configured\'));\n            this._root = new _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler();\n        }\n        this._remoteParentSampled =\n            (_a = config.remoteParentSampled) !== null && _a !== void 0 ? _a : new _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler();\n        this._remoteParentNotSampled =\n            (_b = config.remoteParentNotSampled) !== null && _b !== void 0 ? _b : new _AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOffSampler();\n        this._localParentSampled =\n            (_c = config.localParentSampled) !== null && _c !== void 0 ? _c : new _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler();\n        this._localParentNotSampled =\n            (_d = config.localParentNotSampled) !== null && _d !== void 0 ? _d : new _AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOffSampler();\n    }\n    ParentBasedSampler.prototype.shouldSample = function (context, traceId, spanName, spanKind, attributes, links) {\n        var parentContext = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.getSpanContext(context);\n        if (!parentContext || !(0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.isSpanContextValid)(parentContext)) {\n            return this._root.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.isRemote) {\n            if (parentContext.traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.TraceFlags.SAMPLED) {\n                return this._remoteParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n            }\n            return this._remoteParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.TraceFlags.SAMPLED) {\n            return this._localParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        return this._localParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    };\n    ParentBasedSampler.prototype.toString = function () {\n        return "ParentBased{root=" + this._root.toString() + ", remoteParentSampled=" + this._remoteParentSampled.toString() + ", remoteParentNotSampled=" + this._remoteParentNotSampled.toString() + ", localParentSampled=" + this._localParentSampled.toString() + ", localParentNotSampled=" + this._localParentNotSampled.toString() + "}";\n    };\n    return ParentBasedSampler;\n}());\n\n//# sourceMappingURL=ParentBasedSampler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UvYnVpbGQvZXNtL3NhbXBsZXIvUGFyZW50QmFzZWRTYW1wbGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDNEU7QUFDbkI7QUFDSDtBQUNGO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksdUVBQWtCO0FBQzlCLDZCQUE2Qiw2REFBZTtBQUM1QztBQUNBO0FBQ0EsbUZBQW1GLDZEQUFlO0FBQ2xHO0FBQ0Esc0ZBQXNGLCtEQUFnQjtBQUN0RztBQUNBLGtGQUFrRiw2REFBZTtBQUNqRztBQUNBLHFGQUFxRiwrREFBZ0I7QUFDckc7QUFDQTtBQUNBLDRCQUE0QixxREFBSztBQUNqQywrQkFBK0Isc0VBQWtCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQywwREFBVTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QywwREFBVTtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLG1UQUFtVDtBQUMvVTtBQUNBO0FBQ0EsQ0FBQztBQUM2QjtBQUM5QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFwxXFxEb3dubG9hZHNcXHRhYm9yQWNhZGVteVVwZGF0ZWRcXHRhYm9yLWFjYWRlbXlcXG5vZGVfbW9kdWxlc1xcQG9wZW50ZWxlbWV0cnlcXHNkay10cmFjZS1iYXNlXFxidWlsZFxcZXNtXFxzYW1wbGVyXFxQYXJlbnRCYXNlZFNhbXBsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IGlzU3BhbkNvbnRleHRWYWxpZCwgVHJhY2VGbGFncywgdHJhY2UsIH0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvYXBpJztcbmltcG9ydCB7IGdsb2JhbEVycm9ySGFuZGxlciB9IGZyb20gJ0BvcGVudGVsZW1ldHJ5L2NvcmUnO1xuaW1wb3J0IHsgQWx3YXlzT2ZmU2FtcGxlciB9IGZyb20gJy4vQWx3YXlzT2ZmU2FtcGxlcic7XG5pbXBvcnQgeyBBbHdheXNPblNhbXBsZXIgfSBmcm9tICcuL0Fsd2F5c09uU2FtcGxlcic7XG4vKipcbiAqIEEgY29tcG9zaXRlIHNhbXBsZXIgdGhhdCBlaXRoZXIgcmVzcGVjdHMgdGhlIHBhcmVudCBzcGFuJ3Mgc2FtcGxpbmcgZGVjaXNpb25cbiAqIG9yIGRlbGVnYXRlcyB0byBgZGVsZWdhdGVTYW1wbGVyYCBmb3Igcm9vdCBzcGFucy5cbiAqL1xudmFyIFBhcmVudEJhc2VkU2FtcGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQYXJlbnRCYXNlZFNhbXBsZXIoY29uZmlnKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgdGhpcy5fcm9vdCA9IGNvbmZpZy5yb290O1xuICAgICAgICBpZiAoIXRoaXMuX3Jvb3QpIHtcbiAgICAgICAgICAgIGdsb2JhbEVycm9ySGFuZGxlcihuZXcgRXJyb3IoJ1BhcmVudEJhc2VkU2FtcGxlciBtdXN0IGhhdmUgYSByb290IHNhbXBsZXIgY29uZmlndXJlZCcpKTtcbiAgICAgICAgICAgIHRoaXMuX3Jvb3QgPSBuZXcgQWx3YXlzT25TYW1wbGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVtb3RlUGFyZW50U2FtcGxlZCA9XG4gICAgICAgICAgICAoX2EgPSBjb25maWcucmVtb3RlUGFyZW50U2FtcGxlZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbmV3IEFsd2F5c09uU2FtcGxlcigpO1xuICAgICAgICB0aGlzLl9yZW1vdGVQYXJlbnROb3RTYW1wbGVkID1cbiAgICAgICAgICAgIChfYiA9IGNvbmZpZy5yZW1vdGVQYXJlbnROb3RTYW1wbGVkKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBuZXcgQWx3YXlzT2ZmU2FtcGxlcigpO1xuICAgICAgICB0aGlzLl9sb2NhbFBhcmVudFNhbXBsZWQgPVxuICAgICAgICAgICAgKF9jID0gY29uZmlnLmxvY2FsUGFyZW50U2FtcGxlZCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogbmV3IEFsd2F5c09uU2FtcGxlcigpO1xuICAgICAgICB0aGlzLl9sb2NhbFBhcmVudE5vdFNhbXBsZWQgPVxuICAgICAgICAgICAgKF9kID0gY29uZmlnLmxvY2FsUGFyZW50Tm90U2FtcGxlZCkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogbmV3IEFsd2F5c09mZlNhbXBsZXIoKTtcbiAgICB9XG4gICAgUGFyZW50QmFzZWRTYW1wbGVyLnByb3RvdHlwZS5zaG91bGRTYW1wbGUgPSBmdW5jdGlvbiAoY29udGV4dCwgdHJhY2VJZCwgc3Bhbk5hbWUsIHNwYW5LaW5kLCBhdHRyaWJ1dGVzLCBsaW5rcykge1xuICAgICAgICB2YXIgcGFyZW50Q29udGV4dCA9IHRyYWNlLmdldFNwYW5Db250ZXh0KGNvbnRleHQpO1xuICAgICAgICBpZiAoIXBhcmVudENvbnRleHQgfHwgIWlzU3BhbkNvbnRleHRWYWxpZChwYXJlbnRDb250ZXh0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jvb3Quc2hvdWxkU2FtcGxlKGNvbnRleHQsIHRyYWNlSWQsIHNwYW5OYW1lLCBzcGFuS2luZCwgYXR0cmlidXRlcywgbGlua3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJlbnRDb250ZXh0LmlzUmVtb3RlKSB7XG4gICAgICAgICAgICBpZiAocGFyZW50Q29udGV4dC50cmFjZUZsYWdzICYgVHJhY2VGbGFncy5TQU1QTEVEKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlbW90ZVBhcmVudFNhbXBsZWQuc2hvdWxkU2FtcGxlKGNvbnRleHQsIHRyYWNlSWQsIHNwYW5OYW1lLCBzcGFuS2luZCwgYXR0cmlidXRlcywgbGlua3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlbW90ZVBhcmVudE5vdFNhbXBsZWQuc2hvdWxkU2FtcGxlKGNvbnRleHQsIHRyYWNlSWQsIHNwYW5OYW1lLCBzcGFuS2luZCwgYXR0cmlidXRlcywgbGlua3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJlbnRDb250ZXh0LnRyYWNlRmxhZ3MgJiBUcmFjZUZsYWdzLlNBTVBMRUQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2NhbFBhcmVudFNhbXBsZWQuc2hvdWxkU2FtcGxlKGNvbnRleHQsIHRyYWNlSWQsIHNwYW5OYW1lLCBzcGFuS2luZCwgYXR0cmlidXRlcywgbGlua3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2NhbFBhcmVudE5vdFNhbXBsZWQuc2hvdWxkU2FtcGxlKGNvbnRleHQsIHRyYWNlSWQsIHNwYW5OYW1lLCBzcGFuS2luZCwgYXR0cmlidXRlcywgbGlua3MpO1xuICAgIH07XG4gICAgUGFyZW50QmFzZWRTYW1wbGVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwiUGFyZW50QmFzZWR7cm9vdD1cIiArIHRoaXMuX3Jvb3QudG9TdHJpbmcoKSArIFwiLCByZW1vdGVQYXJlbnRTYW1wbGVkPVwiICsgdGhpcy5fcmVtb3RlUGFyZW50U2FtcGxlZC50b1N0cmluZygpICsgXCIsIHJlbW90ZVBhcmVudE5vdFNhbXBsZWQ9XCIgKyB0aGlzLl9yZW1vdGVQYXJlbnROb3RTYW1wbGVkLnRvU3RyaW5nKCkgKyBcIiwgbG9jYWxQYXJlbnRTYW1wbGVkPVwiICsgdGhpcy5fbG9jYWxQYXJlbnRTYW1wbGVkLnRvU3RyaW5nKCkgKyBcIiwgbG9jYWxQYXJlbnROb3RTYW1wbGVkPVwiICsgdGhpcy5fbG9jYWxQYXJlbnROb3RTYW1wbGVkLnRvU3RyaW5nKCkgKyBcIn1cIjtcbiAgICB9O1xuICAgIHJldHVybiBQYXJlbnRCYXNlZFNhbXBsZXI7XG59KCkpO1xuZXhwb3J0IHsgUGFyZW50QmFzZWRTYW1wbGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QYXJlbnRCYXNlZFNhbXBsZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js\n')},"(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TraceIdRatioBasedSampler: () => (/* binding */ TraceIdRatioBasedSampler)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "(ssr)/./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js");\n/* harmony import */ var _Sampler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Sampler */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\nvar TraceIdRatioBasedSampler = /** @class */ (function () {\n    function TraceIdRatioBasedSampler(_ratio) {\n        if (_ratio === void 0) { _ratio = 0; }\n        this._ratio = _ratio;\n        this._ratio = this._normalize(_ratio);\n        this._upperBound = Math.floor(this._ratio * 0xffffffff);\n    }\n    TraceIdRatioBasedSampler.prototype.shouldSample = function (context, traceId) {\n        return {\n            decision: (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.isValidTraceId)(traceId) && this._accumulate(traceId) < this._upperBound\n                ? _Sampler__WEBPACK_IMPORTED_MODULE_1__.SamplingDecision.RECORD_AND_SAMPLED\n                : _Sampler__WEBPACK_IMPORTED_MODULE_1__.SamplingDecision.NOT_RECORD,\n        };\n    };\n    TraceIdRatioBasedSampler.prototype.toString = function () {\n        return "TraceIdRatioBased{" + this._ratio + "}";\n    };\n    TraceIdRatioBasedSampler.prototype._normalize = function (ratio) {\n        if (typeof ratio !== \'number\' || isNaN(ratio))\n            return 0;\n        return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n    };\n    TraceIdRatioBasedSampler.prototype._accumulate = function (traceId) {\n        var accumulation = 0;\n        for (var i = 0; i < traceId.length / 8; i++) {\n            var pos = i * 8;\n            var part = parseInt(traceId.slice(pos, pos + 8), 16);\n            accumulation = (accumulation ^ part) >>> 0;\n        }\n        return accumulation;\n    };\n    return TraceIdRatioBasedSampler;\n}());\n\n//# sourceMappingURL=TraceIdRatioBasedSampler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UvYnVpbGQvZXNtL3NhbXBsZXIvVHJhY2VJZFJhdGlvQmFzZWRTYW1wbGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNvRDtBQUNOO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isa0VBQWM7QUFDcEMsa0JBQWtCLHNEQUFnQjtBQUNsQyxrQkFBa0Isc0RBQWdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxvQkFBb0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix3QkFBd0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ21DO0FBQ3BDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAb3BlbnRlbGVtZXRyeVxcc2RrLXRyYWNlLWJhc2VcXGJ1aWxkXFxlc21cXHNhbXBsZXJcXFRyYWNlSWRSYXRpb0Jhc2VkU2FtcGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgaXNWYWxpZFRyYWNlSWQgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9hcGknO1xuaW1wb3J0IHsgU2FtcGxpbmdEZWNpc2lvbiB9IGZyb20gJy4uL1NhbXBsZXInO1xuLyoqIFNhbXBsZXIgdGhhdCBzYW1wbGVzIGEgZ2l2ZW4gZnJhY3Rpb24gb2YgdHJhY2VzIGJhc2VkIG9mIHRyYWNlIGlkIGRldGVybWluaXN0aWNhbGx5LiAqL1xudmFyIFRyYWNlSWRSYXRpb0Jhc2VkU2FtcGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUcmFjZUlkUmF0aW9CYXNlZFNhbXBsZXIoX3JhdGlvKSB7XG4gICAgICAgIGlmIChfcmF0aW8gPT09IHZvaWQgMCkgeyBfcmF0aW8gPSAwOyB9XG4gICAgICAgIHRoaXMuX3JhdGlvID0gX3JhdGlvO1xuICAgICAgICB0aGlzLl9yYXRpbyA9IHRoaXMuX25vcm1hbGl6ZShfcmF0aW8pO1xuICAgICAgICB0aGlzLl91cHBlckJvdW5kID0gTWF0aC5mbG9vcih0aGlzLl9yYXRpbyAqIDB4ZmZmZmZmZmYpO1xuICAgIH1cbiAgICBUcmFjZUlkUmF0aW9CYXNlZFNhbXBsZXIucHJvdG90eXBlLnNob3VsZFNhbXBsZSA9IGZ1bmN0aW9uIChjb250ZXh0LCB0cmFjZUlkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkZWNpc2lvbjogaXNWYWxpZFRyYWNlSWQodHJhY2VJZCkgJiYgdGhpcy5fYWNjdW11bGF0ZSh0cmFjZUlkKSA8IHRoaXMuX3VwcGVyQm91bmRcbiAgICAgICAgICAgICAgICA/IFNhbXBsaW5nRGVjaXNpb24uUkVDT1JEX0FORF9TQU1QTEVEXG4gICAgICAgICAgICAgICAgOiBTYW1wbGluZ0RlY2lzaW9uLk5PVF9SRUNPUkQsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBUcmFjZUlkUmF0aW9CYXNlZFNhbXBsZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCJUcmFjZUlkUmF0aW9CYXNlZHtcIiArIHRoaXMuX3JhdGlvICsgXCJ9XCI7XG4gICAgfTtcbiAgICBUcmFjZUlkUmF0aW9CYXNlZFNhbXBsZXIucHJvdG90eXBlLl9ub3JtYWxpemUgPSBmdW5jdGlvbiAocmF0aW8pIHtcbiAgICAgICAgaWYgKHR5cGVvZiByYXRpbyAhPT0gJ251bWJlcicgfHwgaXNOYU4ocmF0aW8pKVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIHJldHVybiByYXRpbyA+PSAxID8gMSA6IHJhdGlvIDw9IDAgPyAwIDogcmF0aW87XG4gICAgfTtcbiAgICBUcmFjZUlkUmF0aW9CYXNlZFNhbXBsZXIucHJvdG90eXBlLl9hY2N1bXVsYXRlID0gZnVuY3Rpb24gKHRyYWNlSWQpIHtcbiAgICAgICAgdmFyIGFjY3VtdWxhdGlvbiA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhY2VJZC5sZW5ndGggLyA4OyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwb3MgPSBpICogODtcbiAgICAgICAgICAgIHZhciBwYXJ0ID0gcGFyc2VJbnQodHJhY2VJZC5zbGljZShwb3MsIHBvcyArIDgpLCAxNik7XG4gICAgICAgICAgICBhY2N1bXVsYXRpb24gPSAoYWNjdW11bGF0aW9uIF4gcGFydCkgPj4+IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdGlvbjtcbiAgICB9O1xuICAgIHJldHVybiBUcmFjZUlkUmF0aW9CYXNlZFNhbXBsZXI7XG59KCkpO1xuZXhwb3J0IHsgVHJhY2VJZFJhdGlvQmFzZWRTYW1wbGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UcmFjZUlkUmF0aW9CYXNlZFNhbXBsZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js\n')},"(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeConfig: () => (/* binding */ mergeConfig),\n/* harmony export */   reconfigureLimits: () => (/* binding */ reconfigureLimits)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ "(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/platform/node/environment.js");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/core */ "(ssr)/./node_modules/@opentelemetry/core/build/esm/utils/environment.js");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Function to merge Default configuration (as specified in \'./config\') with\n * user provided configurations.\n */\nfunction mergeConfig(userConfig) {\n    var perInstanceDefaults = {\n        sampler: (0,_config__WEBPACK_IMPORTED_MODULE_0__.buildSamplerFromEnv)(),\n    };\n    var DEFAULT_CONFIG = (0,_config__WEBPACK_IMPORTED_MODULE_0__.loadDefaultConfig)();\n    var target = Object.assign({}, DEFAULT_CONFIG, perInstanceDefaults, userConfig);\n    target.generalLimits = Object.assign({}, DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});\n    target.spanLimits = Object.assign({}, DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});\n    return target;\n}\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nfunction reconfigureLimits(userConfig) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    var spanLimits = Object.assign({}, userConfig.spanLimits);\n    var parsedEnvConfig = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getEnvWithoutDefaults)();\n    /**\n     * Reassign span attribute count limit to use first non null value defined by user or use default value\n     */\n    spanLimits.attributeCountLimit =\n        (_f = (_e = (_d = (_b = (_a = userConfig.spanLimits) === null || _a === void 0 ? void 0 : _a.attributeCountLimit) !== null && _b !== void 0 ? _b : (_c = userConfig.generalLimits) === null || _c === void 0 ? void 0 : _c.attributeCountLimit) !== null && _d !== void 0 ? _d : parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT) !== null && _e !== void 0 ? _e : parsedEnvConfig.OTEL_ATTRIBUTE_COUNT_LIMIT) !== null && _f !== void 0 ? _f : _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n    /**\n     * Reassign span attribute value length limit to use first non null value defined by user or use default value\n     */\n    spanLimits.attributeValueLengthLimit =\n        (_m = (_l = (_k = (_h = (_g = userConfig.spanLimits) === null || _g === void 0 ? void 0 : _g.attributeValueLengthLimit) !== null && _h !== void 0 ? _h : (_j = userConfig.generalLimits) === null || _j === void 0 ? void 0 : _j.attributeValueLengthLimit) !== null && _k !== void 0 ? _k : parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _l !== void 0 ? _l : parsedEnvConfig.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _m !== void 0 ? _m : _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n    return Object.assign({}, userConfig, { spanLimits: spanLimits });\n}\n//# sourceMappingURL=utility.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UvYnVpbGQvZXNtL3V0aWxpdHkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDa0U7QUFDZ0U7QUFDbEk7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsaUJBQWlCLDREQUFtQjtBQUNwQztBQUNBLHlCQUF5QiwwREFBaUI7QUFDMUMsaUNBQWlDO0FBQ2pDLDJDQUEyQyw4REFBOEQ7QUFDekcsd0NBQXdDLHdEQUF3RDtBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxxQ0FBcUM7QUFDckMsMEJBQTBCLDBFQUFxQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHdiQUF3Yiw4RUFBNkI7QUFDcmQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrZEFBa2QscUZBQW9DO0FBQ3RmLDJCQUEyQixnQkFBZ0Isd0JBQXdCO0FBQ25FO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBvcGVudGVsZW1ldHJ5XFxzZGstdHJhY2UtYmFzZVxcYnVpbGRcXGVzbVxcdXRpbGl0eS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgYnVpbGRTYW1wbGVyRnJvbUVudiwgbG9hZERlZmF1bHRDb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBERUZBVUxUX0FUVFJJQlVURV9DT1VOVF9MSU1JVCwgREVGQVVMVF9BVFRSSUJVVEVfVkFMVUVfTEVOR1RIX0xJTUlULCBnZXRFbnZXaXRob3V0RGVmYXVsdHMsIH0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvY29yZSc7XG4vKipcbiAqIEZ1bmN0aW9uIHRvIG1lcmdlIERlZmF1bHQgY29uZmlndXJhdGlvbiAoYXMgc3BlY2lmaWVkIGluICcuL2NvbmZpZycpIHdpdGhcbiAqIHVzZXIgcHJvdmlkZWQgY29uZmlndXJhdGlvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUNvbmZpZyh1c2VyQ29uZmlnKSB7XG4gICAgdmFyIHBlckluc3RhbmNlRGVmYXVsdHMgPSB7XG4gICAgICAgIHNhbXBsZXI6IGJ1aWxkU2FtcGxlckZyb21FbnYoKSxcbiAgICB9O1xuICAgIHZhciBERUZBVUxUX0NPTkZJRyA9IGxvYWREZWZhdWx0Q29uZmlnKCk7XG4gICAgdmFyIHRhcmdldCA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfQ09ORklHLCBwZXJJbnN0YW5jZURlZmF1bHRzLCB1c2VyQ29uZmlnKTtcbiAgICB0YXJnZXQuZ2VuZXJhbExpbWl0cyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfQ09ORklHLmdlbmVyYWxMaW1pdHMsIHVzZXJDb25maWcuZ2VuZXJhbExpbWl0cyB8fCB7fSk7XG4gICAgdGFyZ2V0LnNwYW5MaW1pdHMgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX0NPTkZJRy5zcGFuTGltaXRzLCB1c2VyQ29uZmlnLnNwYW5MaW1pdHMgfHwge30pO1xuICAgIHJldHVybiB0YXJnZXQ7XG59XG4vKipcbiAqIFdoZW4gZ2VuZXJhbCBsaW1pdHMgYXJlIHByb3ZpZGVkIGFuZCBtb2RlbCBzcGVjaWZpYyBsaW1pdHMgYXJlIG5vdCxcbiAqIGNvbmZpZ3VyZXMgdGhlIG1vZGVsIHNwZWNpZmljIGxpbWl0cyBieSB1c2luZyB0aGUgdmFsdWVzIGZyb20gdGhlIGdlbmVyYWwgb25lcy5cbiAqIEBwYXJhbSB1c2VyQ29uZmlnIFVzZXIgcHJvdmlkZWQgdHJhY2VyIGNvbmZpZ3VyYXRpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlY29uZmlndXJlTGltaXRzKHVzZXJDb25maWcpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaiwgX2ssIF9sLCBfbTtcbiAgICB2YXIgc3BhbkxpbWl0cyA9IE9iamVjdC5hc3NpZ24oe30sIHVzZXJDb25maWcuc3BhbkxpbWl0cyk7XG4gICAgdmFyIHBhcnNlZEVudkNvbmZpZyA9IGdldEVudldpdGhvdXREZWZhdWx0cygpO1xuICAgIC8qKlxuICAgICAqIFJlYXNzaWduIHNwYW4gYXR0cmlidXRlIGNvdW50IGxpbWl0IHRvIHVzZSBmaXJzdCBub24gbnVsbCB2YWx1ZSBkZWZpbmVkIGJ5IHVzZXIgb3IgdXNlIGRlZmF1bHQgdmFsdWVcbiAgICAgKi9cbiAgICBzcGFuTGltaXRzLmF0dHJpYnV0ZUNvdW50TGltaXQgPVxuICAgICAgICAoX2YgPSAoX2UgPSAoX2QgPSAoX2IgPSAoX2EgPSB1c2VyQ29uZmlnLnNwYW5MaW1pdHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hdHRyaWJ1dGVDb3VudExpbWl0KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAoX2MgPSB1c2VyQ29uZmlnLmdlbmVyYWxMaW1pdHMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5hdHRyaWJ1dGVDb3VudExpbWl0KSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBwYXJzZWRFbnZDb25maWcuT1RFTF9TUEFOX0FUVFJJQlVURV9DT1VOVF9MSU1JVCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogcGFyc2VkRW52Q29uZmlnLk9URUxfQVRUUklCVVRFX0NPVU5UX0xJTUlUKSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiBERUZBVUxUX0FUVFJJQlVURV9DT1VOVF9MSU1JVDtcbiAgICAvKipcbiAgICAgKiBSZWFzc2lnbiBzcGFuIGF0dHJpYnV0ZSB2YWx1ZSBsZW5ndGggbGltaXQgdG8gdXNlIGZpcnN0IG5vbiBudWxsIHZhbHVlIGRlZmluZWQgYnkgdXNlciBvciB1c2UgZGVmYXVsdCB2YWx1ZVxuICAgICAqL1xuICAgIHNwYW5MaW1pdHMuYXR0cmlidXRlVmFsdWVMZW5ndGhMaW1pdCA9XG4gICAgICAgIChfbSA9IChfbCA9IChfayA9IChfaCA9IChfZyA9IHVzZXJDb25maWcuc3BhbkxpbWl0cykgPT09IG51bGwgfHwgX2cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nLmF0dHJpYnV0ZVZhbHVlTGVuZ3RoTGltaXQpICE9PSBudWxsICYmIF9oICE9PSB2b2lkIDAgPyBfaCA6IChfaiA9IHVzZXJDb25maWcuZ2VuZXJhbExpbWl0cykgPT09IG51bGwgfHwgX2ogPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9qLmF0dHJpYnV0ZVZhbHVlTGVuZ3RoTGltaXQpICE9PSBudWxsICYmIF9rICE9PSB2b2lkIDAgPyBfayA6IHBhcnNlZEVudkNvbmZpZy5PVEVMX1NQQU5fQVRUUklCVVRFX1ZBTFVFX0xFTkdUSF9MSU1JVCkgIT09IG51bGwgJiYgX2wgIT09IHZvaWQgMCA/IF9sIDogcGFyc2VkRW52Q29uZmlnLk9URUxfQVRUUklCVVRFX1ZBTFVFX0xFTkdUSF9MSU1JVCkgIT09IG51bGwgJiYgX20gIT09IHZvaWQgMCA/IF9tIDogREVGQVVMVF9BVFRSSUJVVEVfVkFMVUVfTEVOR1RIX0xJTUlUO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB1c2VyQ29uZmlnLCB7IHNwYW5MaW1pdHM6IHNwYW5MaW1pdHMgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsaXR5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js\n')},"(ssr)/./node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/semantic-conventions/build/esm/internal/utils.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createConstMap: () => (/* binding */ createConstMap)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Creates a const map from the given values\n * @param values - An array of values to be used as keys and values in the map.\n * @returns A populated version of the map with the values and keys derived from the values.\n */\n/*#__NO_SIDE_EFFECTS__*/\nfunction createConstMap(values) {\n    // eslint-disable-next-line prefer-const, @typescript-eslint/no-explicit-any\n    var res = {};\n    var len = values.length;\n    for (var lp = 0; lp < len; lp++) {\n        var val = values[lp];\n        if (val) {\n            res[String(val).toUpperCase().replace(/[-.]/g, \'_\')] = val;\n        }\n    }\n    return res;\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2Uvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L3NlbWFudGljLWNvbnZlbnRpb25zL2J1aWxkL2VzbS9pbnRlcm5hbC91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsVUFBVTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAb3BlbnRlbGVtZXRyeVxcc2RrLXRyYWNlLWJhc2VcXG5vZGVfbW9kdWxlc1xcQG9wZW50ZWxlbWV0cnlcXHNlbWFudGljLWNvbnZlbnRpb25zXFxidWlsZFxcZXNtXFxpbnRlcm5hbFxcdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQ3JlYXRlcyBhIGNvbnN0IG1hcCBmcm9tIHRoZSBnaXZlbiB2YWx1ZXNcbiAqIEBwYXJhbSB2YWx1ZXMgLSBBbiBhcnJheSBvZiB2YWx1ZXMgdG8gYmUgdXNlZCBhcyBrZXlzIGFuZCB2YWx1ZXMgaW4gdGhlIG1hcC5cbiAqIEByZXR1cm5zIEEgcG9wdWxhdGVkIHZlcnNpb24gb2YgdGhlIG1hcCB3aXRoIHRoZSB2YWx1ZXMgYW5kIGtleXMgZGVyaXZlZCBmcm9tIHRoZSB2YWx1ZXMuXG4gKi9cbi8qI19fTk9fU0lERV9FRkZFQ1RTX18qL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbnN0TWFwKHZhbHVlcykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItY29uc3QsIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICB2YXIgcmVzID0ge307XG4gICAgdmFyIGxlbiA9IHZhbHVlcy5sZW5ndGg7XG4gICAgZm9yICh2YXIgbHAgPSAwOyBscCA8IGxlbjsgbHArKykge1xuICAgICAgICB2YXIgdmFsID0gdmFsdWVzW2xwXTtcbiAgICAgICAgaWYgKHZhbCkge1xuICAgICAgICAgICAgcmVzW1N0cmluZyh2YWwpLnRvVXBwZXJDYXNlKCkucmVwbGFjZSgvWy0uXS9nLCAnXycpXSA9IHZhbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/semantic-conventions/build/esm/internal/utils.js\n')},"(ssr)/./node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_ALL: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_ALL),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_ANY: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_ANY),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_ONE: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_ONE),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_THREE: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_THREE),\n/* harmony export */   DBCASSANDRACONSISTENCYLEVELVALUES_TWO: () => (/* binding */ DBCASSANDRACONSISTENCYLEVELVALUES_TWO),\n/* harmony export */   DBSYSTEMVALUES_ADABAS: () => (/* binding */ DBSYSTEMVALUES_ADABAS),\n/* harmony export */   DBSYSTEMVALUES_CACHE: () => (/* binding */ DBSYSTEMVALUES_CACHE),\n/* harmony export */   DBSYSTEMVALUES_CASSANDRA: () => (/* binding */ DBSYSTEMVALUES_CASSANDRA),\n/* harmony export */   DBSYSTEMVALUES_CLOUDSCAPE: () => (/* binding */ DBSYSTEMVALUES_CLOUDSCAPE),\n/* harmony export */   DBSYSTEMVALUES_COCKROACHDB: () => (/* binding */ DBSYSTEMVALUES_COCKROACHDB),\n/* harmony export */   DBSYSTEMVALUES_COLDFUSION: () => (/* binding */ DBSYSTEMVALUES_COLDFUSION),\n/* harmony export */   DBSYSTEMVALUES_COSMOSDB: () => (/* binding */ DBSYSTEMVALUES_COSMOSDB),\n/* harmony export */   DBSYSTEMVALUES_COUCHBASE: () => (/* binding */ DBSYSTEMVALUES_COUCHBASE),\n/* harmony export */   DBSYSTEMVALUES_COUCHDB: () => (/* binding */ DBSYSTEMVALUES_COUCHDB),\n/* harmony export */   DBSYSTEMVALUES_DB2: () => (/* binding */ DBSYSTEMVALUES_DB2),\n/* harmony export */   DBSYSTEMVALUES_DERBY: () => (/* binding */ DBSYSTEMVALUES_DERBY),\n/* harmony export */   DBSYSTEMVALUES_DYNAMODB: () => (/* binding */ DBSYSTEMVALUES_DYNAMODB),\n/* harmony export */   DBSYSTEMVALUES_EDB: () => (/* binding */ DBSYSTEMVALUES_EDB),\n/* harmony export */   DBSYSTEMVALUES_ELASTICSEARCH: () => (/* binding */ DBSYSTEMVALUES_ELASTICSEARCH),\n/* harmony export */   DBSYSTEMVALUES_FILEMAKER: () => (/* binding */ DBSYSTEMVALUES_FILEMAKER),\n/* harmony export */   DBSYSTEMVALUES_FIREBIRD: () => (/* binding */ DBSYSTEMVALUES_FIREBIRD),\n/* harmony export */   DBSYSTEMVALUES_FIRSTSQL: () => (/* binding */ DBSYSTEMVALUES_FIRSTSQL),\n/* harmony export */   DBSYSTEMVALUES_GEODE: () => (/* binding */ DBSYSTEMVALUES_GEODE),\n/* harmony export */   DBSYSTEMVALUES_H2: () => (/* binding */ DBSYSTEMVALUES_H2),\n/* harmony export */   DBSYSTEMVALUES_HANADB: () => (/* binding */ DBSYSTEMVALUES_HANADB),\n/* harmony export */   DBSYSTEMVALUES_HBASE: () => (/* binding */ DBSYSTEMVALUES_HBASE),\n/* harmony export */   DBSYSTEMVALUES_HIVE: () => (/* binding */ DBSYSTEMVALUES_HIVE),\n/* harmony export */   DBSYSTEMVALUES_HSQLDB: () => (/* binding */ DBSYSTEMVALUES_HSQLDB),\n/* harmony export */   DBSYSTEMVALUES_INFORMIX: () => (/* binding */ DBSYSTEMVALUES_INFORMIX),\n/* harmony export */   DBSYSTEMVALUES_INGRES: () => (/* binding */ DBSYSTEMVALUES_INGRES),\n/* harmony export */   DBSYSTEMVALUES_INSTANTDB: () => (/* binding */ DBSYSTEMVALUES_INSTANTDB),\n/* harmony export */   DBSYSTEMVALUES_INTERBASE: () => (/* binding */ DBSYSTEMVALUES_INTERBASE),\n/* harmony export */   DBSYSTEMVALUES_MARIADB: () => (/* binding */ DBSYSTEMVALUES_MARIADB),\n/* harmony export */   DBSYSTEMVALUES_MAXDB: () => (/* binding */ DBSYSTEMVALUES_MAXDB),\n/* harmony export */   DBSYSTEMVALUES_MEMCACHED: () => (/* binding */ DBSYSTEMVALUES_MEMCACHED),\n/* harmony export */   DBSYSTEMVALUES_MONGODB: () => (/* binding */ DBSYSTEMVALUES_MONGODB),\n/* harmony export */   DBSYSTEMVALUES_MSSQL: () => (/* binding */ DBSYSTEMVALUES_MSSQL),\n/* harmony export */   DBSYSTEMVALUES_MYSQL: () => (/* binding */ DBSYSTEMVALUES_MYSQL),\n/* harmony export */   DBSYSTEMVALUES_NEO4J: () => (/* binding */ DBSYSTEMVALUES_NEO4J),\n/* harmony export */   DBSYSTEMVALUES_NETEZZA: () => (/* binding */ DBSYSTEMVALUES_NETEZZA),\n/* harmony export */   DBSYSTEMVALUES_ORACLE: () => (/* binding */ DBSYSTEMVALUES_ORACLE),\n/* harmony export */   DBSYSTEMVALUES_OTHER_SQL: () => (/* binding */ DBSYSTEMVALUES_OTHER_SQL),\n/* harmony export */   DBSYSTEMVALUES_PERVASIVE: () => (/* binding */ DBSYSTEMVALUES_PERVASIVE),\n/* harmony export */   DBSYSTEMVALUES_POINTBASE: () => (/* binding */ DBSYSTEMVALUES_POINTBASE),\n/* harmony export */   DBSYSTEMVALUES_POSTGRESQL: () => (/* binding */ DBSYSTEMVALUES_POSTGRESQL),\n/* harmony export */   DBSYSTEMVALUES_PROGRESS: () => (/* binding */ DBSYSTEMVALUES_PROGRESS),\n/* harmony export */   DBSYSTEMVALUES_REDIS: () => (/* binding */ DBSYSTEMVALUES_REDIS),\n/* harmony export */   DBSYSTEMVALUES_REDSHIFT: () => (/* binding */ DBSYSTEMVALUES_REDSHIFT),\n/* harmony export */   DBSYSTEMVALUES_SQLITE: () => (/* binding */ DBSYSTEMVALUES_SQLITE),\n/* harmony export */   DBSYSTEMVALUES_SYBASE: () => (/* binding */ DBSYSTEMVALUES_SYBASE),\n/* harmony export */   DBSYSTEMVALUES_TERADATA: () => (/* binding */ DBSYSTEMVALUES_TERADATA),\n/* harmony export */   DBSYSTEMVALUES_VERTICA: () => (/* binding */ DBSYSTEMVALUES_VERTICA),\n/* harmony export */   DbCassandraConsistencyLevelValues: () => (/* binding */ DbCassandraConsistencyLevelValues),\n/* harmony export */   DbSystemValues: () => (/* binding */ DbSystemValues),\n/* harmony export */   FAASDOCUMENTOPERATIONVALUES_DELETE: () => (/* binding */ FAASDOCUMENTOPERATIONVALUES_DELETE),\n/* harmony export */   FAASDOCUMENTOPERATIONVALUES_EDIT: () => (/* binding */ FAASDOCUMENTOPERATIONVALUES_EDIT),\n/* harmony export */   FAASDOCUMENTOPERATIONVALUES_INSERT: () => (/* binding */ FAASDOCUMENTOPERATIONVALUES_INSERT),\n/* harmony export */   FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD: () => (/* binding */ FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD),\n/* harmony export */   FAASINVOKEDPROVIDERVALUES_AWS: () => (/* binding */ FAASINVOKEDPROVIDERVALUES_AWS),\n/* harmony export */   FAASINVOKEDPROVIDERVALUES_AZURE: () => (/* binding */ FAASINVOKEDPROVIDERVALUES_AZURE),\n/* harmony export */   FAASINVOKEDPROVIDERVALUES_GCP: () => (/* binding */ FAASINVOKEDPROVIDERVALUES_GCP),\n/* harmony export */   FAASTRIGGERVALUES_DATASOURCE: () => (/* binding */ FAASTRIGGERVALUES_DATASOURCE),\n/* harmony export */   FAASTRIGGERVALUES_HTTP: () => (/* binding */ FAASTRIGGERVALUES_HTTP),\n/* harmony export */   FAASTRIGGERVALUES_OTHER: () => (/* binding */ FAASTRIGGERVALUES_OTHER),\n/* harmony export */   FAASTRIGGERVALUES_PUBSUB: () => (/* binding */ FAASTRIGGERVALUES_PUBSUB),\n/* harmony export */   FAASTRIGGERVALUES_TIMER: () => (/* binding */ FAASTRIGGERVALUES_TIMER),\n/* harmony export */   FaasDocumentOperationValues: () => (/* binding */ FaasDocumentOperationValues),\n/* harmony export */   FaasInvokedProviderValues: () => (/* binding */ FaasInvokedProviderValues),\n/* harmony export */   FaasTriggerValues: () => (/* binding */ FaasTriggerValues),\n/* harmony export */   HTTPFLAVORVALUES_HTTP_1_0: () => (/* binding */ HTTPFLAVORVALUES_HTTP_1_0),\n/* harmony export */   HTTPFLAVORVALUES_HTTP_1_1: () => (/* binding */ HTTPFLAVORVALUES_HTTP_1_1),\n/* harmony export */   HTTPFLAVORVALUES_HTTP_2_0: () => (/* binding */ HTTPFLAVORVALUES_HTTP_2_0),\n/* harmony export */   HTTPFLAVORVALUES_QUIC: () => (/* binding */ HTTPFLAVORVALUES_QUIC),\n/* harmony export */   HTTPFLAVORVALUES_SPDY: () => (/* binding */ HTTPFLAVORVALUES_SPDY),\n/* harmony export */   HttpFlavorValues: () => (/* binding */ HttpFlavorValues),\n/* harmony export */   MESSAGETYPEVALUES_RECEIVED: () => (/* binding */ MESSAGETYPEVALUES_RECEIVED),\n/* harmony export */   MESSAGETYPEVALUES_SENT: () => (/* binding */ MESSAGETYPEVALUES_SENT),\n/* harmony export */   MESSAGINGDESTINATIONKINDVALUES_QUEUE: () => (/* binding */ MESSAGINGDESTINATIONKINDVALUES_QUEUE),\n/* harmony export */   MESSAGINGDESTINATIONKINDVALUES_TOPIC: () => (/* binding */ MESSAGINGDESTINATIONKINDVALUES_TOPIC),\n/* harmony export */   MESSAGINGOPERATIONVALUES_PROCESS: () => (/* binding */ MESSAGINGOPERATIONVALUES_PROCESS),\n/* harmony export */   MESSAGINGOPERATIONVALUES_RECEIVE: () => (/* binding */ MESSAGINGOPERATIONVALUES_RECEIVE),\n/* harmony export */   MessageTypeValues: () => (/* binding */ MessageTypeValues),\n/* harmony export */   MessagingDestinationKindValues: () => (/* binding */ MessagingDestinationKindValues),\n/* harmony export */   MessagingOperationValues: () => (/* binding */ MessagingOperationValues),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_CDMA: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_CDMA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EDGE: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_EDGE),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_GPRS: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_GPRS),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_GSM: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_GSM),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_HSPA: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_HSPA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_IDEN: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_IDEN),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_LTE: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_LTE),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_NR: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_NR),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA),\n/* harmony export */   NETHOSTCONNECTIONSUBTYPEVALUES_UMTS: () => (/* binding */ NETHOSTCONNECTIONSUBTYPEVALUES_UMTS),\n/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_CELL: () => (/* binding */ NETHOSTCONNECTIONTYPEVALUES_CELL),\n/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE: () => (/* binding */ NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE),\n/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_UNKNOWN: () => (/* binding */ NETHOSTCONNECTIONTYPEVALUES_UNKNOWN),\n/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_WIFI: () => (/* binding */ NETHOSTCONNECTIONTYPEVALUES_WIFI),\n/* harmony export */   NETHOSTCONNECTIONTYPEVALUES_WIRED: () => (/* binding */ NETHOSTCONNECTIONTYPEVALUES_WIRED),\n/* harmony export */   NETTRANSPORTVALUES_INPROC: () => (/* binding */ NETTRANSPORTVALUES_INPROC),\n/* harmony export */   NETTRANSPORTVALUES_IP: () => (/* binding */ NETTRANSPORTVALUES_IP),\n/* harmony export */   NETTRANSPORTVALUES_IP_TCP: () => (/* binding */ NETTRANSPORTVALUES_IP_TCP),\n/* harmony export */   NETTRANSPORTVALUES_IP_UDP: () => (/* binding */ NETTRANSPORTVALUES_IP_UDP),\n/* harmony export */   NETTRANSPORTVALUES_OTHER: () => (/* binding */ NETTRANSPORTVALUES_OTHER),\n/* harmony export */   NETTRANSPORTVALUES_PIPE: () => (/* binding */ NETTRANSPORTVALUES_PIPE),\n/* harmony export */   NETTRANSPORTVALUES_UNIX: () => (/* binding */ NETTRANSPORTVALUES_UNIX),\n/* harmony export */   NetHostConnectionSubtypeValues: () => (/* binding */ NetHostConnectionSubtypeValues),\n/* harmony export */   NetHostConnectionTypeValues: () => (/* binding */ NetHostConnectionTypeValues),\n/* harmony export */   NetTransportValues: () => (/* binding */ NetTransportValues),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_ABORTED: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_ABORTED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_CANCELLED: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_CANCELLED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_DATA_LOSS: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_DATA_LOSS),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_INTERNAL: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_INTERNAL),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_NOT_FOUND: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_NOT_FOUND),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_OK: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_OK),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_UNAVAILABLE: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_UNAVAILABLE),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED),\n/* harmony export */   RPCGRPCSTATUSCODEVALUES_UNKNOWN: () => (/* binding */ RPCGRPCSTATUSCODEVALUES_UNKNOWN),\n/* harmony export */   RpcGrpcStatusCodeValues: () => (/* binding */ RpcGrpcStatusCodeValues),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_COUNT: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_COUNT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_INDEX_NAME: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_INDEX_NAME),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_LIMIT: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_LIMIT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_PROJECTION: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_PROJECTION),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_SEGMENT: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_SEGMENT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_SELECT: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_SELECT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_TABLE_COUNT: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_TABLE_COUNT),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_TABLE_NAMES: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_TABLE_NAMES),\n/* harmony export */   SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS: () => (/* binding */ SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS),\n/* harmony export */   SEMATTRS_AWS_LAMBDA_INVOKED_ARN: () => (/* binding */ SEMATTRS_AWS_LAMBDA_INVOKED_ARN),\n/* harmony export */   SEMATTRS_CODE_FILEPATH: () => (/* binding */ SEMATTRS_CODE_FILEPATH),\n/* harmony export */   SEMATTRS_CODE_FUNCTION: () => (/* binding */ SEMATTRS_CODE_FUNCTION),\n/* harmony export */   SEMATTRS_CODE_LINENO: () => (/* binding */ SEMATTRS_CODE_LINENO),\n/* harmony export */   SEMATTRS_CODE_NAMESPACE: () => (/* binding */ SEMATTRS_CODE_NAMESPACE),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL: () => (/* binding */ SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_COORDINATOR_DC: () => (/* binding */ SEMATTRS_DB_CASSANDRA_COORDINATOR_DC),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_COORDINATOR_ID: () => (/* binding */ SEMATTRS_DB_CASSANDRA_COORDINATOR_ID),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_IDEMPOTENCE: () => (/* binding */ SEMATTRS_DB_CASSANDRA_IDEMPOTENCE),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_KEYSPACE: () => (/* binding */ SEMATTRS_DB_CASSANDRA_KEYSPACE),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_PAGE_SIZE: () => (/* binding */ SEMATTRS_DB_CASSANDRA_PAGE_SIZE),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT: () => (/* binding */ SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT),\n/* harmony export */   SEMATTRS_DB_CASSANDRA_TABLE: () => (/* binding */ SEMATTRS_DB_CASSANDRA_TABLE),\n/* harmony export */   SEMATTRS_DB_CONNECTION_STRING: () => (/* binding */ SEMATTRS_DB_CONNECTION_STRING),\n/* harmony export */   SEMATTRS_DB_HBASE_NAMESPACE: () => (/* binding */ SEMATTRS_DB_HBASE_NAMESPACE),\n/* harmony export */   SEMATTRS_DB_JDBC_DRIVER_CLASSNAME: () => (/* binding */ SEMATTRS_DB_JDBC_DRIVER_CLASSNAME),\n/* harmony export */   SEMATTRS_DB_MONGODB_COLLECTION: () => (/* binding */ SEMATTRS_DB_MONGODB_COLLECTION),\n/* harmony export */   SEMATTRS_DB_MSSQL_INSTANCE_NAME: () => (/* binding */ SEMATTRS_DB_MSSQL_INSTANCE_NAME),\n/* harmony export */   SEMATTRS_DB_NAME: () => (/* binding */ SEMATTRS_DB_NAME),\n/* harmony export */   SEMATTRS_DB_OPERATION: () => (/* binding */ SEMATTRS_DB_OPERATION),\n/* harmony export */   SEMATTRS_DB_REDIS_DATABASE_INDEX: () => (/* binding */ SEMATTRS_DB_REDIS_DATABASE_INDEX),\n/* harmony export */   SEMATTRS_DB_SQL_TABLE: () => (/* binding */ SEMATTRS_DB_SQL_TABLE),\n/* harmony export */   SEMATTRS_DB_STATEMENT: () => (/* binding */ SEMATTRS_DB_STATEMENT),\n/* harmony export */   SEMATTRS_DB_SYSTEM: () => (/* binding */ SEMATTRS_DB_SYSTEM),\n/* harmony export */   SEMATTRS_DB_USER: () => (/* binding */ SEMATTRS_DB_USER),\n/* harmony export */   SEMATTRS_ENDUSER_ID: () => (/* binding */ SEMATTRS_ENDUSER_ID),\n/* harmony export */   SEMATTRS_ENDUSER_ROLE: () => (/* binding */ SEMATTRS_ENDUSER_ROLE),\n/* harmony export */   SEMATTRS_ENDUSER_SCOPE: () => (/* binding */ SEMATTRS_ENDUSER_SCOPE),\n/* harmony export */   SEMATTRS_EXCEPTION_ESCAPED: () => (/* binding */ SEMATTRS_EXCEPTION_ESCAPED),\n/* harmony export */   SEMATTRS_EXCEPTION_MESSAGE: () => (/* binding */ SEMATTRS_EXCEPTION_MESSAGE),\n/* harmony export */   SEMATTRS_EXCEPTION_STACKTRACE: () => (/* binding */ SEMATTRS_EXCEPTION_STACKTRACE),\n/* harmony export */   SEMATTRS_EXCEPTION_TYPE: () => (/* binding */ SEMATTRS_EXCEPTION_TYPE),\n/* harmony export */   SEMATTRS_FAAS_COLDSTART: () => (/* binding */ SEMATTRS_FAAS_COLDSTART),\n/* harmony export */   SEMATTRS_FAAS_CRON: () => (/* binding */ SEMATTRS_FAAS_CRON),\n/* harmony export */   SEMATTRS_FAAS_DOCUMENT_COLLECTION: () => (/* binding */ SEMATTRS_FAAS_DOCUMENT_COLLECTION),\n/* harmony export */   SEMATTRS_FAAS_DOCUMENT_NAME: () => (/* binding */ SEMATTRS_FAAS_DOCUMENT_NAME),\n/* harmony export */   SEMATTRS_FAAS_DOCUMENT_OPERATION: () => (/* binding */ SEMATTRS_FAAS_DOCUMENT_OPERATION),\n/* harmony export */   SEMATTRS_FAAS_DOCUMENT_TIME: () => (/* binding */ SEMATTRS_FAAS_DOCUMENT_TIME),\n/* harmony export */   SEMATTRS_FAAS_EXECUTION: () => (/* binding */ SEMATTRS_FAAS_EXECUTION),\n/* harmony export */   SEMATTRS_FAAS_INVOKED_NAME: () => (/* binding */ SEMATTRS_FAAS_INVOKED_NAME),\n/* harmony export */   SEMATTRS_FAAS_INVOKED_PROVIDER: () => (/* binding */ SEMATTRS_FAAS_INVOKED_PROVIDER),\n/* harmony export */   SEMATTRS_FAAS_INVOKED_REGION: () => (/* binding */ SEMATTRS_FAAS_INVOKED_REGION),\n/* harmony export */   SEMATTRS_FAAS_TIME: () => (/* binding */ SEMATTRS_FAAS_TIME),\n/* harmony export */   SEMATTRS_FAAS_TRIGGER: () => (/* binding */ SEMATTRS_FAAS_TRIGGER),\n/* harmony export */   SEMATTRS_HTTP_CLIENT_IP: () => (/* binding */ SEMATTRS_HTTP_CLIENT_IP),\n/* harmony export */   SEMATTRS_HTTP_FLAVOR: () => (/* binding */ SEMATTRS_HTTP_FLAVOR),\n/* harmony export */   SEMATTRS_HTTP_HOST: () => (/* binding */ SEMATTRS_HTTP_HOST),\n/* harmony export */   SEMATTRS_HTTP_METHOD: () => (/* binding */ SEMATTRS_HTTP_METHOD),\n/* harmony export */   SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH: () => (/* binding */ SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH),\n/* harmony export */   SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED: () => (/* binding */ SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED),\n/* harmony export */   SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH: () => (/* binding */ SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH),\n/* harmony export */   SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED: () => (/* binding */ SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED),\n/* harmony export */   SEMATTRS_HTTP_ROUTE: () => (/* binding */ SEMATTRS_HTTP_ROUTE),\n/* harmony export */   SEMATTRS_HTTP_SCHEME: () => (/* binding */ SEMATTRS_HTTP_SCHEME),\n/* harmony export */   SEMATTRS_HTTP_SERVER_NAME: () => (/* binding */ SEMATTRS_HTTP_SERVER_NAME),\n/* harmony export */   SEMATTRS_HTTP_STATUS_CODE: () => (/* binding */ SEMATTRS_HTTP_STATUS_CODE),\n/* harmony export */   SEMATTRS_HTTP_TARGET: () => (/* binding */ SEMATTRS_HTTP_TARGET),\n/* harmony export */   SEMATTRS_HTTP_URL: () => (/* binding */ SEMATTRS_HTTP_URL),\n/* harmony export */   SEMATTRS_HTTP_USER_AGENT: () => (/* binding */ SEMATTRS_HTTP_USER_AGENT),\n/* harmony export */   SEMATTRS_MESSAGE_COMPRESSED_SIZE: () => (/* binding */ SEMATTRS_MESSAGE_COMPRESSED_SIZE),\n/* harmony export */   SEMATTRS_MESSAGE_ID: () => (/* binding */ SEMATTRS_MESSAGE_ID),\n/* harmony export */   SEMATTRS_MESSAGE_TYPE: () => (/* binding */ SEMATTRS_MESSAGE_TYPE),\n/* harmony export */   SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE: () => (/* binding */ SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE),\n/* harmony export */   SEMATTRS_MESSAGING_CONSUMER_ID: () => (/* binding */ SEMATTRS_MESSAGING_CONSUMER_ID),\n/* harmony export */   SEMATTRS_MESSAGING_CONVERSATION_ID: () => (/* binding */ SEMATTRS_MESSAGING_CONVERSATION_ID),\n/* harmony export */   SEMATTRS_MESSAGING_DESTINATION: () => (/* binding */ SEMATTRS_MESSAGING_DESTINATION),\n/* harmony export */   SEMATTRS_MESSAGING_DESTINATION_KIND: () => (/* binding */ SEMATTRS_MESSAGING_DESTINATION_KIND),\n/* harmony export */   SEMATTRS_MESSAGING_KAFKA_CLIENT_ID: () => (/* binding */ SEMATTRS_MESSAGING_KAFKA_CLIENT_ID),\n/* harmony export */   SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP: () => (/* binding */ SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP),\n/* harmony export */   SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY: () => (/* binding */ SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY),\n/* harmony export */   SEMATTRS_MESSAGING_KAFKA_PARTITION: () => (/* binding */ SEMATTRS_MESSAGING_KAFKA_PARTITION),\n/* harmony export */   SEMATTRS_MESSAGING_KAFKA_TOMBSTONE: () => (/* binding */ SEMATTRS_MESSAGING_KAFKA_TOMBSTONE),\n/* harmony export */   SEMATTRS_MESSAGING_MESSAGE_ID: () => (/* binding */ SEMATTRS_MESSAGING_MESSAGE_ID),\n/* harmony export */   SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES: () => (/* binding */ SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES),\n/* harmony export */   SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES: () => (/* binding */ SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES),\n/* harmony export */   SEMATTRS_MESSAGING_OPERATION: () => (/* binding */ SEMATTRS_MESSAGING_OPERATION),\n/* harmony export */   SEMATTRS_MESSAGING_PROTOCOL: () => (/* binding */ SEMATTRS_MESSAGING_PROTOCOL),\n/* harmony export */   SEMATTRS_MESSAGING_PROTOCOL_VERSION: () => (/* binding */ SEMATTRS_MESSAGING_PROTOCOL_VERSION),\n/* harmony export */   SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY: () => (/* binding */ SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY),\n/* harmony export */   SEMATTRS_MESSAGING_SYSTEM: () => (/* binding */ SEMATTRS_MESSAGING_SYSTEM),\n/* harmony export */   SEMATTRS_MESSAGING_TEMP_DESTINATION: () => (/* binding */ SEMATTRS_MESSAGING_TEMP_DESTINATION),\n/* harmony export */   SEMATTRS_MESSAGING_URL: () => (/* binding */ SEMATTRS_MESSAGING_URL),\n/* harmony export */   SEMATTRS_NET_HOST_CARRIER_ICC: () => (/* binding */ SEMATTRS_NET_HOST_CARRIER_ICC),\n/* harmony export */   SEMATTRS_NET_HOST_CARRIER_MCC: () => (/* binding */ SEMATTRS_NET_HOST_CARRIER_MCC),\n/* harmony export */   SEMATTRS_NET_HOST_CARRIER_MNC: () => (/* binding */ SEMATTRS_NET_HOST_CARRIER_MNC),\n/* harmony export */   SEMATTRS_NET_HOST_CARRIER_NAME: () => (/* binding */ SEMATTRS_NET_HOST_CARRIER_NAME),\n/* harmony export */   SEMATTRS_NET_HOST_CONNECTION_SUBTYPE: () => (/* binding */ SEMATTRS_NET_HOST_CONNECTION_SUBTYPE),\n/* harmony export */   SEMATTRS_NET_HOST_CONNECTION_TYPE: () => (/* binding */ SEMATTRS_NET_HOST_CONNECTION_TYPE),\n/* harmony export */   SEMATTRS_NET_HOST_IP: () => (/* binding */ SEMATTRS_NET_HOST_IP),\n/* harmony export */   SEMATTRS_NET_HOST_NAME: () => (/* binding */ SEMATTRS_NET_HOST_NAME),\n/* harmony export */   SEMATTRS_NET_HOST_PORT: () => (/* binding */ SEMATTRS_NET_HOST_PORT),\n/* harmony export */   SEMATTRS_NET_PEER_IP: () => (/* binding */ SEMATTRS_NET_PEER_IP),\n/* harmony export */   SEMATTRS_NET_PEER_NAME: () => (/* binding */ SEMATTRS_NET_PEER_NAME),\n/* harmony export */   SEMATTRS_NET_PEER_PORT: () => (/* binding */ SEMATTRS_NET_PEER_PORT),\n/* harmony export */   SEMATTRS_NET_TRANSPORT: () => (/* binding */ SEMATTRS_NET_TRANSPORT),\n/* harmony export */   SEMATTRS_PEER_SERVICE: () => (/* binding */ SEMATTRS_PEER_SERVICE),\n/* harmony export */   SEMATTRS_RPC_GRPC_STATUS_CODE: () => (/* binding */ SEMATTRS_RPC_GRPC_STATUS_CODE),\n/* harmony export */   SEMATTRS_RPC_JSONRPC_ERROR_CODE: () => (/* binding */ SEMATTRS_RPC_JSONRPC_ERROR_CODE),\n/* harmony export */   SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE: () => (/* binding */ SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE),\n/* harmony export */   SEMATTRS_RPC_JSONRPC_REQUEST_ID: () => (/* binding */ SEMATTRS_RPC_JSONRPC_REQUEST_ID),\n/* harmony export */   SEMATTRS_RPC_JSONRPC_VERSION: () => (/* binding */ SEMATTRS_RPC_JSONRPC_VERSION),\n/* harmony export */   SEMATTRS_RPC_METHOD: () => (/* binding */ SEMATTRS_RPC_METHOD),\n/* harmony export */   SEMATTRS_RPC_SERVICE: () => (/* binding */ SEMATTRS_RPC_SERVICE),\n/* harmony export */   SEMATTRS_RPC_SYSTEM: () => (/* binding */ SEMATTRS_RPC_SYSTEM),\n/* harmony export */   SEMATTRS_THREAD_ID: () => (/* binding */ SEMATTRS_THREAD_ID),\n/* harmony export */   SEMATTRS_THREAD_NAME: () => (/* binding */ SEMATTRS_THREAD_NAME),\n/* harmony export */   SemanticAttributes: () => (/* binding */ SemanticAttributes)\n/* harmony export */ });\n/* harmony import */ var _internal_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/utils */ \"(ssr)/./node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/semantic-conventions/build/esm/internal/utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticAttributes\n//----------------------------------------------------------------------------------------------------------\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_AWS_LAMBDA_INVOKED_ARN = 'aws.lambda.invoked_arn';\nvar TMP_DB_SYSTEM = 'db.system';\nvar TMP_DB_CONNECTION_STRING = 'db.connection_string';\nvar TMP_DB_USER = 'db.user';\nvar TMP_DB_JDBC_DRIVER_CLASSNAME = 'db.jdbc.driver_classname';\nvar TMP_DB_NAME = 'db.name';\nvar TMP_DB_STATEMENT = 'db.statement';\nvar TMP_DB_OPERATION = 'db.operation';\nvar TMP_DB_MSSQL_INSTANCE_NAME = 'db.mssql.instance_name';\nvar TMP_DB_CASSANDRA_KEYSPACE = 'db.cassandra.keyspace';\nvar TMP_DB_CASSANDRA_PAGE_SIZE = 'db.cassandra.page_size';\nvar TMP_DB_CASSANDRA_CONSISTENCY_LEVEL = 'db.cassandra.consistency_level';\nvar TMP_DB_CASSANDRA_TABLE = 'db.cassandra.table';\nvar TMP_DB_CASSANDRA_IDEMPOTENCE = 'db.cassandra.idempotence';\nvar TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = 'db.cassandra.speculative_execution_count';\nvar TMP_DB_CASSANDRA_COORDINATOR_ID = 'db.cassandra.coordinator.id';\nvar TMP_DB_CASSANDRA_COORDINATOR_DC = 'db.cassandra.coordinator.dc';\nvar TMP_DB_HBASE_NAMESPACE = 'db.hbase.namespace';\nvar TMP_DB_REDIS_DATABASE_INDEX = 'db.redis.database_index';\nvar TMP_DB_MONGODB_COLLECTION = 'db.mongodb.collection';\nvar TMP_DB_SQL_TABLE = 'db.sql.table';\nvar TMP_EXCEPTION_TYPE = 'exception.type';\nvar TMP_EXCEPTION_MESSAGE = 'exception.message';\nvar TMP_EXCEPTION_STACKTRACE = 'exception.stacktrace';\nvar TMP_EXCEPTION_ESCAPED = 'exception.escaped';\nvar TMP_FAAS_TRIGGER = 'faas.trigger';\nvar TMP_FAAS_EXECUTION = 'faas.execution';\nvar TMP_FAAS_DOCUMENT_COLLECTION = 'faas.document.collection';\nvar TMP_FAAS_DOCUMENT_OPERATION = 'faas.document.operation';\nvar TMP_FAAS_DOCUMENT_TIME = 'faas.document.time';\nvar TMP_FAAS_DOCUMENT_NAME = 'faas.document.name';\nvar TMP_FAAS_TIME = 'faas.time';\nvar TMP_FAAS_CRON = 'faas.cron';\nvar TMP_FAAS_COLDSTART = 'faas.coldstart';\nvar TMP_FAAS_INVOKED_NAME = 'faas.invoked_name';\nvar TMP_FAAS_INVOKED_PROVIDER = 'faas.invoked_provider';\nvar TMP_FAAS_INVOKED_REGION = 'faas.invoked_region';\nvar TMP_NET_TRANSPORT = 'net.transport';\nvar TMP_NET_PEER_IP = 'net.peer.ip';\nvar TMP_NET_PEER_PORT = 'net.peer.port';\nvar TMP_NET_PEER_NAME = 'net.peer.name';\nvar TMP_NET_HOST_IP = 'net.host.ip';\nvar TMP_NET_HOST_PORT = 'net.host.port';\nvar TMP_NET_HOST_NAME = 'net.host.name';\nvar TMP_NET_HOST_CONNECTION_TYPE = 'net.host.connection.type';\nvar TMP_NET_HOST_CONNECTION_SUBTYPE = 'net.host.connection.subtype';\nvar TMP_NET_HOST_CARRIER_NAME = 'net.host.carrier.name';\nvar TMP_NET_HOST_CARRIER_MCC = 'net.host.carrier.mcc';\nvar TMP_NET_HOST_CARRIER_MNC = 'net.host.carrier.mnc';\nvar TMP_NET_HOST_CARRIER_ICC = 'net.host.carrier.icc';\nvar TMP_PEER_SERVICE = 'peer.service';\nvar TMP_ENDUSER_ID = 'enduser.id';\nvar TMP_ENDUSER_ROLE = 'enduser.role';\nvar TMP_ENDUSER_SCOPE = 'enduser.scope';\nvar TMP_THREAD_ID = 'thread.id';\nvar TMP_THREAD_NAME = 'thread.name';\nvar TMP_CODE_FUNCTION = 'code.function';\nvar TMP_CODE_NAMESPACE = 'code.namespace';\nvar TMP_CODE_FILEPATH = 'code.filepath';\nvar TMP_CODE_LINENO = 'code.lineno';\nvar TMP_HTTP_METHOD = 'http.method';\nvar TMP_HTTP_URL = 'http.url';\nvar TMP_HTTP_TARGET = 'http.target';\nvar TMP_HTTP_HOST = 'http.host';\nvar TMP_HTTP_SCHEME = 'http.scheme';\nvar TMP_HTTP_STATUS_CODE = 'http.status_code';\nvar TMP_HTTP_FLAVOR = 'http.flavor';\nvar TMP_HTTP_USER_AGENT = 'http.user_agent';\nvar TMP_HTTP_REQUEST_CONTENT_LENGTH = 'http.request_content_length';\nvar TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = 'http.request_content_length_uncompressed';\nvar TMP_HTTP_RESPONSE_CONTENT_LENGTH = 'http.response_content_length';\nvar TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = 'http.response_content_length_uncompressed';\nvar TMP_HTTP_SERVER_NAME = 'http.server_name';\nvar TMP_HTTP_ROUTE = 'http.route';\nvar TMP_HTTP_CLIENT_IP = 'http.client_ip';\nvar TMP_AWS_DYNAMODB_TABLE_NAMES = 'aws.dynamodb.table_names';\nvar TMP_AWS_DYNAMODB_CONSUMED_CAPACITY = 'aws.dynamodb.consumed_capacity';\nvar TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS = 'aws.dynamodb.item_collection_metrics';\nvar TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = 'aws.dynamodb.provisioned_read_capacity';\nvar TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = 'aws.dynamodb.provisioned_write_capacity';\nvar TMP_AWS_DYNAMODB_CONSISTENT_READ = 'aws.dynamodb.consistent_read';\nvar TMP_AWS_DYNAMODB_PROJECTION = 'aws.dynamodb.projection';\nvar TMP_AWS_DYNAMODB_LIMIT = 'aws.dynamodb.limit';\nvar TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET = 'aws.dynamodb.attributes_to_get';\nvar TMP_AWS_DYNAMODB_INDEX_NAME = 'aws.dynamodb.index_name';\nvar TMP_AWS_DYNAMODB_SELECT = 'aws.dynamodb.select';\nvar TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = 'aws.dynamodb.global_secondary_indexes';\nvar TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = 'aws.dynamodb.local_secondary_indexes';\nvar TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE = 'aws.dynamodb.exclusive_start_table';\nvar TMP_AWS_DYNAMODB_TABLE_COUNT = 'aws.dynamodb.table_count';\nvar TMP_AWS_DYNAMODB_SCAN_FORWARD = 'aws.dynamodb.scan_forward';\nvar TMP_AWS_DYNAMODB_SEGMENT = 'aws.dynamodb.segment';\nvar TMP_AWS_DYNAMODB_TOTAL_SEGMENTS = 'aws.dynamodb.total_segments';\nvar TMP_AWS_DYNAMODB_COUNT = 'aws.dynamodb.count';\nvar TMP_AWS_DYNAMODB_SCANNED_COUNT = 'aws.dynamodb.scanned_count';\nvar TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = 'aws.dynamodb.attribute_definitions';\nvar TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = 'aws.dynamodb.global_secondary_index_updates';\nvar TMP_MESSAGING_SYSTEM = 'messaging.system';\nvar TMP_MESSAGING_DESTINATION = 'messaging.destination';\nvar TMP_MESSAGING_DESTINATION_KIND = 'messaging.destination_kind';\nvar TMP_MESSAGING_TEMP_DESTINATION = 'messaging.temp_destination';\nvar TMP_MESSAGING_PROTOCOL = 'messaging.protocol';\nvar TMP_MESSAGING_PROTOCOL_VERSION = 'messaging.protocol_version';\nvar TMP_MESSAGING_URL = 'messaging.url';\nvar TMP_MESSAGING_MESSAGE_ID = 'messaging.message_id';\nvar TMP_MESSAGING_CONVERSATION_ID = 'messaging.conversation_id';\nvar TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES = 'messaging.message_payload_size_bytes';\nvar TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES = 'messaging.message_payload_compressed_size_bytes';\nvar TMP_MESSAGING_OPERATION = 'messaging.operation';\nvar TMP_MESSAGING_CONSUMER_ID = 'messaging.consumer_id';\nvar TMP_MESSAGING_RABBITMQ_ROUTING_KEY = 'messaging.rabbitmq.routing_key';\nvar TMP_MESSAGING_KAFKA_MESSAGE_KEY = 'messaging.kafka.message_key';\nvar TMP_MESSAGING_KAFKA_CONSUMER_GROUP = 'messaging.kafka.consumer_group';\nvar TMP_MESSAGING_KAFKA_CLIENT_ID = 'messaging.kafka.client_id';\nvar TMP_MESSAGING_KAFKA_PARTITION = 'messaging.kafka.partition';\nvar TMP_MESSAGING_KAFKA_TOMBSTONE = 'messaging.kafka.tombstone';\nvar TMP_RPC_SYSTEM = 'rpc.system';\nvar TMP_RPC_SERVICE = 'rpc.service';\nvar TMP_RPC_METHOD = 'rpc.method';\nvar TMP_RPC_GRPC_STATUS_CODE = 'rpc.grpc.status_code';\nvar TMP_RPC_JSONRPC_VERSION = 'rpc.jsonrpc.version';\nvar TMP_RPC_JSONRPC_REQUEST_ID = 'rpc.jsonrpc.request_id';\nvar TMP_RPC_JSONRPC_ERROR_CODE = 'rpc.jsonrpc.error_code';\nvar TMP_RPC_JSONRPC_ERROR_MESSAGE = 'rpc.jsonrpc.error_message';\nvar TMP_MESSAGE_TYPE = 'message.type';\nvar TMP_MESSAGE_ID = 'message.id';\nvar TMP_MESSAGE_COMPRESSED_SIZE = 'message.compressed_size';\nvar TMP_MESSAGE_UNCOMPRESSED_SIZE = 'message.uncompressed_size';\n/**\n * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n *\n * Note: This may be different from `faas.id` if an alias is involved.\n *\n * @deprecated Use ATTR_AWS_LAMBDA_INVOKED_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_AWS_LAMBDA_INVOKED_ARN = TMP_AWS_LAMBDA_INVOKED_ARN;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use ATTR_DB_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_DB_SYSTEM = TMP_DB_SYSTEM;\n/**\n * The connection string used to connect to the database. It is recommended to remove embedded credentials.\n *\n * @deprecated Use ATTR_DB_CONNECTION_STRING in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_DB_CONNECTION_STRING = TMP_DB_CONNECTION_STRING;\n/**\n * Username for accessing the database.\n *\n * @deprecated Use ATTR_DB_USER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_DB_USER = TMP_DB_USER;\n/**\n * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n *\n * @deprecated Use ATTR_DB_JDBC_DRIVER_CLASSNAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_DB_JDBC_DRIVER_CLASSNAME = TMP_DB_JDBC_DRIVER_CLASSNAME;\n/**\n * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n *\n * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_DB_NAME = TMP_DB_NAME;\n/**\n * The database statement being executed.\n *\n * Note: The value may be sanitized to exclude sensitive information.\n *\n * @deprecated Use ATTR_DB_STATEMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_DB_STATEMENT = TMP_DB_STATEMENT;\n/**\n * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n *\n * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n *\n * @deprecated Use ATTR_DB_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_DB_OPERATION = TMP_DB_OPERATION;\n/**\n * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n *\n * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).\n *\n * @deprecated Use ATTR_DB_MSSQL_INSTANCE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_DB_MSSQL_INSTANCE_NAME = TMP_DB_MSSQL_INSTANCE_NAME;\n/**\n * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_DB_CASSANDRA_KEYSPACE = TMP_DB_CASSANDRA_KEYSPACE;\n/**\n * The fetch size used for paging, i.e. how many rows will be returned at once.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_PAGE_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_DB_CASSANDRA_PAGE_SIZE = TMP_DB_CASSANDRA_PAGE_SIZE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use ATTR_DB_CASSANDRA_CONSISTENCY_LEVEL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL = TMP_DB_CASSANDRA_CONSISTENCY_LEVEL;\n/**\n * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n *\n * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_DB_CASSANDRA_TABLE = TMP_DB_CASSANDRA_TABLE;\n/**\n * Whether or not the query is idempotent.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_IDEMPOTENCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_DB_CASSANDRA_IDEMPOTENCE = TMP_DB_CASSANDRA_IDEMPOTENCE;\n/**\n * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT;\n/**\n * The ID of the coordinating node for a query.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_COORDINATOR_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_DB_CASSANDRA_COORDINATOR_ID = TMP_DB_CASSANDRA_COORDINATOR_ID;\n/**\n * The data center of the coordinating node for a query.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_COORDINATOR_DC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_DB_CASSANDRA_COORDINATOR_DC = TMP_DB_CASSANDRA_COORDINATOR_DC;\n/**\n * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_DB_HBASE_NAMESPACE = TMP_DB_HBASE_NAMESPACE;\n/**\n * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_REDIS_DATABASE_INDEX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_DB_REDIS_DATABASE_INDEX = TMP_DB_REDIS_DATABASE_INDEX;\n/**\n * The collection being accessed within the database stated in `db.name`.\n *\n * @deprecated Use ATTR_DB_MONGODB_COLLECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_DB_MONGODB_COLLECTION = TMP_DB_MONGODB_COLLECTION;\n/**\n * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n *\n * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n *\n * @deprecated Use ATTR_DB_SQL_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_DB_SQL_TABLE = TMP_DB_SQL_TABLE;\n/**\n * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n *\n * @deprecated Use ATTR_EXCEPTION_TYPE.\n */\nvar SEMATTRS_EXCEPTION_TYPE = TMP_EXCEPTION_TYPE;\n/**\n * The exception message.\n *\n * @deprecated Use ATTR_EXCEPTION_MESSAGE.\n */\nvar SEMATTRS_EXCEPTION_MESSAGE = TMP_EXCEPTION_MESSAGE;\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n *\n * @deprecated Use ATTR_EXCEPTION_STACKTRACE.\n */\nvar SEMATTRS_EXCEPTION_STACKTRACE = TMP_EXCEPTION_STACKTRACE;\n/**\n* SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n*\n* Note: An exception is considered to have escaped (or left) the scope of a span,\nif that span is ended while the exception is still logically &#34;in flight&#34;.\nThis may be actually &#34;in flight&#34; in some languages (e.g. if the exception\nis passed to a Context manager&#39;s `__exit__` method in Python) but will\nusually be caught at the point of recording the exception in most languages.\n\nIt is usually not possible to determine at the point where an exception is thrown\nwhether it will escape the scope of a span.\nHowever, it is trivial to know that an exception\nwill escape, if one checks for an active exception just before ending the span,\nas done in the [example above](#exception-end-example).\n\nIt follows that an exception may still escape the scope of the span\neven if the `exception.escaped` attribute was not set or set to false,\nsince the event might have been recorded at a time where it was not\nclear whether the exception will escape.\n*\n* @deprecated Use ATTR_EXCEPTION_ESCAPED.\n*/\nvar SEMATTRS_EXCEPTION_ESCAPED = TMP_EXCEPTION_ESCAPED;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use ATTR_FAAS_TRIGGER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_FAAS_TRIGGER = TMP_FAAS_TRIGGER;\n/**\n * The execution ID of the current function execution.\n *\n * @deprecated Use ATTR_FAAS_INVOCATION_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_FAAS_EXECUTION = TMP_FAAS_EXECUTION;\n/**\n * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_COLLECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_FAAS_DOCUMENT_COLLECTION = TMP_FAAS_DOCUMENT_COLLECTION;\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_FAAS_DOCUMENT_OPERATION = TMP_FAAS_DOCUMENT_OPERATION;\n/**\n * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_TIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_FAAS_DOCUMENT_TIME = TMP_FAAS_DOCUMENT_TIME;\n/**\n * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_FAAS_DOCUMENT_NAME = TMP_FAAS_DOCUMENT_NAME;\n/**\n * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n *\n * @deprecated Use ATTR_FAAS_TIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_FAAS_TIME = TMP_FAAS_TIME;\n/**\n * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n *\n * @deprecated Use ATTR_FAAS_CRON in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_FAAS_CRON = TMP_FAAS_CRON;\n/**\n * A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n *\n * @deprecated Use ATTR_FAAS_COLDSTART in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_FAAS_COLDSTART = TMP_FAAS_COLDSTART;\n/**\n * The name of the invoked function.\n *\n * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_FAAS_INVOKED_NAME = TMP_FAAS_INVOKED_NAME;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_PROVIDER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_FAAS_INVOKED_PROVIDER = TMP_FAAS_INVOKED_PROVIDER;\n/**\n * The cloud region of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_REGION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_FAAS_INVOKED_REGION = TMP_FAAS_INVOKED_REGION;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use ATTR_NET_TRANSPORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_NET_TRANSPORT = TMP_NET_TRANSPORT;\n/**\n * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n *\n * @deprecated Use ATTR_NET_PEER_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_NET_PEER_IP = TMP_NET_PEER_IP;\n/**\n * Remote port number.\n *\n * @deprecated Use ATTR_NET_PEER_PORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_NET_PEER_PORT = TMP_NET_PEER_PORT;\n/**\n * Remote hostname or similar, see note below.\n *\n * @deprecated Use ATTR_NET_PEER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_NET_PEER_NAME = TMP_NET_PEER_NAME;\n/**\n * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.\n *\n * @deprecated Use ATTR_NET_HOST_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_NET_HOST_IP = TMP_NET_HOST_IP;\n/**\n * Like `net.peer.port` but for the host port.\n *\n * @deprecated Use ATTR_NET_HOST_PORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_NET_HOST_PORT = TMP_NET_HOST_PORT;\n/**\n * Local hostname or similar, see note below.\n *\n * @deprecated Use ATTR_NET_HOST_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_NET_HOST_NAME = TMP_NET_HOST_NAME;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use ATTR_NETWORK_CONNECTION_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_NET_HOST_CONNECTION_TYPE = TMP_NET_HOST_CONNECTION_TYPE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use ATTR_NETWORK_CONNECTION_SUBTYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_NET_HOST_CONNECTION_SUBTYPE = TMP_NET_HOST_CONNECTION_SUBTYPE;\n/**\n * The name of the mobile carrier.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_NET_HOST_CARRIER_NAME = TMP_NET_HOST_CARRIER_NAME;\n/**\n * The mobile carrier country code.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_MCC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_NET_HOST_CARRIER_MCC = TMP_NET_HOST_CARRIER_MCC;\n/**\n * The mobile carrier network code.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_MNC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_NET_HOST_CARRIER_MNC = TMP_NET_HOST_CARRIER_MNC;\n/**\n * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_ICC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_NET_HOST_CARRIER_ICC = TMP_NET_HOST_CARRIER_ICC;\n/**\n * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n *\n * @deprecated Use ATTR_PEER_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_PEER_SERVICE = TMP_PEER_SERVICE;\n/**\n * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.\n *\n * @deprecated Use ATTR_ENDUSER_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_ENDUSER_ID = TMP_ENDUSER_ID;\n/**\n * Actual/assumed role the client is making the request under extracted from token or application security context.\n *\n * @deprecated Use ATTR_ENDUSER_ROLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_ENDUSER_ROLE = TMP_ENDUSER_ROLE;\n/**\n * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n *\n * @deprecated Use ATTR_ENDUSER_SCOPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_ENDUSER_SCOPE = TMP_ENDUSER_SCOPE;\n/**\n * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).\n *\n * @deprecated Use ATTR_THREAD_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_THREAD_ID = TMP_THREAD_ID;\n/**\n * Current thread name.\n *\n * @deprecated Use ATTR_THREAD_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_THREAD_NAME = TMP_THREAD_NAME;\n/**\n * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).\n *\n * @deprecated Use ATTR_CODE_FUNCTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_CODE_FUNCTION = TMP_CODE_FUNCTION;\n/**\n * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n *\n * @deprecated Use ATTR_CODE_NAMESPACE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_CODE_NAMESPACE = TMP_CODE_NAMESPACE;\n/**\n * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n *\n * @deprecated Use ATTR_CODE_FILEPATH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_CODE_FILEPATH = TMP_CODE_FILEPATH;\n/**\n * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n *\n * @deprecated Use ATTR_CODE_LINENO in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_CODE_LINENO = TMP_CODE_LINENO;\n/**\n * HTTP request method.\n *\n * @deprecated Use ATTR_HTTP_METHOD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_HTTP_METHOD = TMP_HTTP_METHOD;\n/**\n * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n *\n * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n *\n * @deprecated Use ATTR_HTTP_URL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_HTTP_URL = TMP_HTTP_URL;\n/**\n * The full request target as passed in a HTTP request line or equivalent.\n *\n * @deprecated Use ATTR_HTTP_TARGET in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_HTTP_TARGET = TMP_HTTP_TARGET;\n/**\n * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note.\n *\n * Note: When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set.\n *\n * @deprecated Use ATTR_HTTP_HOST in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_HTTP_HOST = TMP_HTTP_HOST;\n/**\n * The URI scheme identifying the used protocol.\n *\n * @deprecated Use ATTR_HTTP_SCHEME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_HTTP_SCHEME = TMP_HTTP_SCHEME;\n/**\n * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n *\n * @deprecated Use ATTR_HTTP_STATUS_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_HTTP_STATUS_CODE = TMP_HTTP_STATUS_CODE;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use ATTR_HTTP_FLAVOR in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_HTTP_FLAVOR = TMP_HTTP_FLAVOR;\n/**\n * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.\n *\n * @deprecated Use ATTR_HTTP_USER_AGENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_HTTP_USER_AGENT = TMP_HTTP_USER_AGENT;\n/**\n * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n *\n * @deprecated Use ATTR_HTTP_REQUEST_CONTENT_LENGTH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH = TMP_HTTP_REQUEST_CONTENT_LENGTH;\n/**\n * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.\n *\n * @deprecated Use ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED;\n/**\n * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n *\n * @deprecated Use ATTR_HTTP_RESPONSE_CONTENT_LENGTH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH = TMP_HTTP_RESPONSE_CONTENT_LENGTH;\n/**\n * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.\n *\n * @deprecated Use ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED;\n/**\n * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).\n *\n * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.\n *\n * @deprecated Use ATTR_HTTP_SERVER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_HTTP_SERVER_NAME = TMP_HTTP_SERVER_NAME;\n/**\n * The matched route (path template).\n *\n * @deprecated Use ATTR_HTTP_ROUTE.\n */\nvar SEMATTRS_HTTP_ROUTE = TMP_HTTP_ROUTE;\n/**\n* The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n*\n* Note: This is not necessarily the same as `net.peer.ip`, which would\nidentify the network-level peer, which may be a proxy.\n\nThis attribute should be set when a source of information different\nfrom the one used for `net.peer.ip`, is available even if that other\nsource just confirms the same value as `net.peer.ip`.\nRationale: For `net.peer.ip`, one typically does not know if it\ncomes from a proxy, reverse proxy, or the actual client. Setting\n`http.client_ip` when it&#39;s the same as `net.peer.ip` means that\none is at least somewhat confident that the address is not that of\nthe closest proxy.\n*\n* @deprecated Use ATTR_HTTP_CLIENT_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nvar SEMATTRS_HTTP_CLIENT_IP = TMP_HTTP_CLIENT_IP;\n/**\n * The keys in the `RequestItems` object field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TABLE_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_AWS_DYNAMODB_TABLE_NAMES = TMP_AWS_DYNAMODB_TABLE_NAMES;\n/**\n * The JSON-serialized value of each item in the `ConsumedCapacity` response field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_CONSUMED_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY = TMP_AWS_DYNAMODB_CONSUMED_CAPACITY;\n/**\n * The JSON-serialized value of the `ItemCollectionMetrics` response field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ITEM_COLLECTION_METRICS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS = TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS;\n/**\n * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY;\n/**\n * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY;\n/**\n * The value of the `ConsistentRead` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_CONSISTENT_READ in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ = TMP_AWS_DYNAMODB_CONSISTENT_READ;\n/**\n * The value of the `ProjectionExpression` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROJECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_AWS_DYNAMODB_PROJECTION = TMP_AWS_DYNAMODB_PROJECTION;\n/**\n * The value of the `Limit` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_LIMIT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_AWS_DYNAMODB_LIMIT = TMP_AWS_DYNAMODB_LIMIT;\n/**\n * The value of the `AttributesToGet` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ATTRIBUTES_TO_GET in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET = TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET;\n/**\n * The value of the `IndexName` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_INDEX_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_AWS_DYNAMODB_INDEX_NAME = TMP_AWS_DYNAMODB_INDEX_NAME;\n/**\n * The value of the `Select` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SELECT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_AWS_DYNAMODB_SELECT = TMP_AWS_DYNAMODB_SELECT;\n/**\n * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES;\n/**\n * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES;\n/**\n * The value of the `ExclusiveStartTableName` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_EXCLUSIVE_START_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE = TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE;\n/**\n * The the number of items in the `TableNames` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TABLE_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_AWS_DYNAMODB_TABLE_COUNT = TMP_AWS_DYNAMODB_TABLE_COUNT;\n/**\n * The value of the `ScanIndexForward` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SCAN_FORWARD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD = TMP_AWS_DYNAMODB_SCAN_FORWARD;\n/**\n * The value of the `Segment` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SEGMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_AWS_DYNAMODB_SEGMENT = TMP_AWS_DYNAMODB_SEGMENT;\n/**\n * The value of the `TotalSegments` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TOTAL_SEGMENTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS = TMP_AWS_DYNAMODB_TOTAL_SEGMENTS;\n/**\n * The value of the `Count` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_AWS_DYNAMODB_COUNT = TMP_AWS_DYNAMODB_COUNT;\n/**\n * The value of the `ScannedCount` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SCANNED_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT = TMP_AWS_DYNAMODB_SCANNED_COUNT;\n/**\n * The JSON-serialized value of each item in the `AttributeDefinitions` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS;\n/**\n * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES;\n/**\n * A string identifying the messaging system.\n *\n * @deprecated Use ATTR_MESSAGING_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_MESSAGING_SYSTEM = TMP_MESSAGING_SYSTEM;\n/**\n * The message destination name. This might be equal to the span name but is required nevertheless.\n *\n * @deprecated Use ATTR_MESSAGING_DESTINATION_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_MESSAGING_DESTINATION = TMP_MESSAGING_DESTINATION;\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nvar SEMATTRS_MESSAGING_DESTINATION_KIND = TMP_MESSAGING_DESTINATION_KIND;\n/**\n * A boolean that is true if the message destination is temporary.\n *\n * @deprecated Use ATTR_MESSAGING_DESTINATION_TEMPORARY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_MESSAGING_TEMP_DESTINATION = TMP_MESSAGING_TEMP_DESTINATION;\n/**\n * The name of the transport protocol.\n *\n * @deprecated Use ATTR_NETWORK_PROTOCOL_NAME.\n */\nvar SEMATTRS_MESSAGING_PROTOCOL = TMP_MESSAGING_PROTOCOL;\n/**\n * The version of the transport protocol.\n *\n * @deprecated Use ATTR_NETWORK_PROTOCOL_VERSION.\n */\nvar SEMATTRS_MESSAGING_PROTOCOL_VERSION = TMP_MESSAGING_PROTOCOL_VERSION;\n/**\n * Connection string.\n *\n * @deprecated Removed in semconv v1.17.0.\n */\nvar SEMATTRS_MESSAGING_URL = TMP_MESSAGING_URL;\n/**\n * A value used by the messaging system as an identifier for the message, represented as a string.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_MESSAGING_MESSAGE_ID = TMP_MESSAGING_MESSAGE_ID;\n/**\n * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_CONVERSATION_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_MESSAGING_CONVERSATION_ID = TMP_MESSAGING_CONVERSATION_ID;\n/**\n * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_BODY_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES = TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES;\n/**\n * The compressed size of the message payload in bytes.\n *\n * @deprecated Removed in semconv v1.22.0.\n */\nvar SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES = TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES;\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use ATTR_MESSAGING_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_MESSAGING_OPERATION = TMP_MESSAGING_OPERATION;\n/**\n * The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.\n *\n * @deprecated Removed in semconv v1.21.0.\n */\nvar SEMATTRS_MESSAGING_CONSUMER_ID = TMP_MESSAGING_CONSUMER_ID;\n/**\n * RabbitMQ message routing key.\n *\n * @deprecated Use ATTR_MESSAGING_RABBITMQ_DESTINATION_ROUTING_KEY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY = TMP_MESSAGING_RABBITMQ_ROUTING_KEY;\n/**\n * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.\n *\n * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_MESSAGE_KEY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY = TMP_MESSAGING_KAFKA_MESSAGE_KEY;\n/**\n * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_CONSUMER_GROUP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP = TMP_MESSAGING_KAFKA_CONSUMER_GROUP;\n/**\n * Client Id for the Consumer or Producer that is handling the message.\n *\n * @deprecated Use ATTR_MESSAGING_CLIENT_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_MESSAGING_KAFKA_CLIENT_ID = TMP_MESSAGING_KAFKA_CLIENT_ID;\n/**\n * Partition the message is sent to.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_DESTINATION_PARTITION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_MESSAGING_KAFKA_PARTITION = TMP_MESSAGING_KAFKA_PARTITION;\n/**\n * A boolean that is true if the message is a tombstone.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_MESSAGE_TOMBSTONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_MESSAGING_KAFKA_TOMBSTONE = TMP_MESSAGING_KAFKA_TOMBSTONE;\n/**\n * A string identifying the remoting system.\n *\n * @deprecated Use ATTR_RPC_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_RPC_SYSTEM = TMP_RPC_SYSTEM;\n/**\n * The full (logical) name of the service being called, including its package name, if applicable.\n *\n * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n *\n * @deprecated Use ATTR_RPC_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_RPC_SERVICE = TMP_RPC_SERVICE;\n/**\n * The name of the (logical) method being called, must be equal to the $method part in the span name.\n *\n * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n *\n * @deprecated Use ATTR_RPC_METHOD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_RPC_METHOD = TMP_RPC_METHOD;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use ATTR_RPC_GRPC_STATUS_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_RPC_GRPC_STATUS_CODE = TMP_RPC_GRPC_STATUS_CODE;\n/**\n * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_RPC_JSONRPC_VERSION = TMP_RPC_JSONRPC_VERSION;\n/**\n * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_REQUEST_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_RPC_JSONRPC_REQUEST_ID = TMP_RPC_JSONRPC_REQUEST_ID;\n/**\n * `error.code` property of response if it is an error response.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_ERROR_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_RPC_JSONRPC_ERROR_CODE = TMP_RPC_JSONRPC_ERROR_CODE;\n/**\n * `error.message` property of response if it is an error response.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_ERROR_MESSAGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE = TMP_RPC_JSONRPC_ERROR_MESSAGE;\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use ATTR_MESSAGE_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_MESSAGE_TYPE = TMP_MESSAGE_TYPE;\n/**\n * MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.\n *\n * Note: This way we guarantee that the values will be consistent between different implementations.\n *\n * @deprecated Use ATTR_MESSAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_MESSAGE_ID = TMP_MESSAGE_ID;\n/**\n * Compressed size of the message in bytes.\n *\n * @deprecated Use ATTR_MESSAGE_COMPRESSED_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_MESSAGE_COMPRESSED_SIZE = TMP_MESSAGE_COMPRESSED_SIZE;\n/**\n * Uncompressed size of the message in bytes.\n *\n * @deprecated Use ATTR_MESSAGE_UNCOMPRESSED_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE = TMP_MESSAGE_UNCOMPRESSED_SIZE;\n/**\n * Create exported Value Map for SemanticAttributes values\n * @deprecated Use the SEMATTRS_XXXXX constants rather than the SemanticAttributes.XXXXX for bundle minification\n */\nvar SemanticAttributes = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_AWS_LAMBDA_INVOKED_ARN,\n    TMP_DB_SYSTEM,\n    TMP_DB_CONNECTION_STRING,\n    TMP_DB_USER,\n    TMP_DB_JDBC_DRIVER_CLASSNAME,\n    TMP_DB_NAME,\n    TMP_DB_STATEMENT,\n    TMP_DB_OPERATION,\n    TMP_DB_MSSQL_INSTANCE_NAME,\n    TMP_DB_CASSANDRA_KEYSPACE,\n    TMP_DB_CASSANDRA_PAGE_SIZE,\n    TMP_DB_CASSANDRA_CONSISTENCY_LEVEL,\n    TMP_DB_CASSANDRA_TABLE,\n    TMP_DB_CASSANDRA_IDEMPOTENCE,\n    TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT,\n    TMP_DB_CASSANDRA_COORDINATOR_ID,\n    TMP_DB_CASSANDRA_COORDINATOR_DC,\n    TMP_DB_HBASE_NAMESPACE,\n    TMP_DB_REDIS_DATABASE_INDEX,\n    TMP_DB_MONGODB_COLLECTION,\n    TMP_DB_SQL_TABLE,\n    TMP_EXCEPTION_TYPE,\n    TMP_EXCEPTION_MESSAGE,\n    TMP_EXCEPTION_STACKTRACE,\n    TMP_EXCEPTION_ESCAPED,\n    TMP_FAAS_TRIGGER,\n    TMP_FAAS_EXECUTION,\n    TMP_FAAS_DOCUMENT_COLLECTION,\n    TMP_FAAS_DOCUMENT_OPERATION,\n    TMP_FAAS_DOCUMENT_TIME,\n    TMP_FAAS_DOCUMENT_NAME,\n    TMP_FAAS_TIME,\n    TMP_FAAS_CRON,\n    TMP_FAAS_COLDSTART,\n    TMP_FAAS_INVOKED_NAME,\n    TMP_FAAS_INVOKED_PROVIDER,\n    TMP_FAAS_INVOKED_REGION,\n    TMP_NET_TRANSPORT,\n    TMP_NET_PEER_IP,\n    TMP_NET_PEER_PORT,\n    TMP_NET_PEER_NAME,\n    TMP_NET_HOST_IP,\n    TMP_NET_HOST_PORT,\n    TMP_NET_HOST_NAME,\n    TMP_NET_HOST_CONNECTION_TYPE,\n    TMP_NET_HOST_CONNECTION_SUBTYPE,\n    TMP_NET_HOST_CARRIER_NAME,\n    TMP_NET_HOST_CARRIER_MCC,\n    TMP_NET_HOST_CARRIER_MNC,\n    TMP_NET_HOST_CARRIER_ICC,\n    TMP_PEER_SERVICE,\n    TMP_ENDUSER_ID,\n    TMP_ENDUSER_ROLE,\n    TMP_ENDUSER_SCOPE,\n    TMP_THREAD_ID,\n    TMP_THREAD_NAME,\n    TMP_CODE_FUNCTION,\n    TMP_CODE_NAMESPACE,\n    TMP_CODE_FILEPATH,\n    TMP_CODE_LINENO,\n    TMP_HTTP_METHOD,\n    TMP_HTTP_URL,\n    TMP_HTTP_TARGET,\n    TMP_HTTP_HOST,\n    TMP_HTTP_SCHEME,\n    TMP_HTTP_STATUS_CODE,\n    TMP_HTTP_FLAVOR,\n    TMP_HTTP_USER_AGENT,\n    TMP_HTTP_REQUEST_CONTENT_LENGTH,\n    TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED,\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH,\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED,\n    TMP_HTTP_SERVER_NAME,\n    TMP_HTTP_ROUTE,\n    TMP_HTTP_CLIENT_IP,\n    TMP_AWS_DYNAMODB_TABLE_NAMES,\n    TMP_AWS_DYNAMODB_CONSUMED_CAPACITY,\n    TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS,\n    TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY,\n    TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY,\n    TMP_AWS_DYNAMODB_CONSISTENT_READ,\n    TMP_AWS_DYNAMODB_PROJECTION,\n    TMP_AWS_DYNAMODB_LIMIT,\n    TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET,\n    TMP_AWS_DYNAMODB_INDEX_NAME,\n    TMP_AWS_DYNAMODB_SELECT,\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES,\n    TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES,\n    TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE,\n    TMP_AWS_DYNAMODB_TABLE_COUNT,\n    TMP_AWS_DYNAMODB_SCAN_FORWARD,\n    TMP_AWS_DYNAMODB_SEGMENT,\n    TMP_AWS_DYNAMODB_TOTAL_SEGMENTS,\n    TMP_AWS_DYNAMODB_COUNT,\n    TMP_AWS_DYNAMODB_SCANNED_COUNT,\n    TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS,\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES,\n    TMP_MESSAGING_SYSTEM,\n    TMP_MESSAGING_DESTINATION,\n    TMP_MESSAGING_DESTINATION_KIND,\n    TMP_MESSAGING_TEMP_DESTINATION,\n    TMP_MESSAGING_PROTOCOL,\n    TMP_MESSAGING_PROTOCOL_VERSION,\n    TMP_MESSAGING_URL,\n    TMP_MESSAGING_MESSAGE_ID,\n    TMP_MESSAGING_CONVERSATION_ID,\n    TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES,\n    TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES,\n    TMP_MESSAGING_OPERATION,\n    TMP_MESSAGING_CONSUMER_ID,\n    TMP_MESSAGING_RABBITMQ_ROUTING_KEY,\n    TMP_MESSAGING_KAFKA_MESSAGE_KEY,\n    TMP_MESSAGING_KAFKA_CONSUMER_GROUP,\n    TMP_MESSAGING_KAFKA_CLIENT_ID,\n    TMP_MESSAGING_KAFKA_PARTITION,\n    TMP_MESSAGING_KAFKA_TOMBSTONE,\n    TMP_RPC_SYSTEM,\n    TMP_RPC_SERVICE,\n    TMP_RPC_METHOD,\n    TMP_RPC_GRPC_STATUS_CODE,\n    TMP_RPC_JSONRPC_VERSION,\n    TMP_RPC_JSONRPC_REQUEST_ID,\n    TMP_RPC_JSONRPC_ERROR_CODE,\n    TMP_RPC_JSONRPC_ERROR_MESSAGE,\n    TMP_MESSAGE_TYPE,\n    TMP_MESSAGE_ID,\n    TMP_MESSAGE_COMPRESSED_SIZE,\n    TMP_MESSAGE_UNCOMPRESSED_SIZE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for DbSystemValues enum definition\n *\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_DBSYSTEMVALUES_OTHER_SQL = 'other_sql';\nvar TMP_DBSYSTEMVALUES_MSSQL = 'mssql';\nvar TMP_DBSYSTEMVALUES_MYSQL = 'mysql';\nvar TMP_DBSYSTEMVALUES_ORACLE = 'oracle';\nvar TMP_DBSYSTEMVALUES_DB2 = 'db2';\nvar TMP_DBSYSTEMVALUES_POSTGRESQL = 'postgresql';\nvar TMP_DBSYSTEMVALUES_REDSHIFT = 'redshift';\nvar TMP_DBSYSTEMVALUES_HIVE = 'hive';\nvar TMP_DBSYSTEMVALUES_CLOUDSCAPE = 'cloudscape';\nvar TMP_DBSYSTEMVALUES_HSQLDB = 'hsqldb';\nvar TMP_DBSYSTEMVALUES_PROGRESS = 'progress';\nvar TMP_DBSYSTEMVALUES_MAXDB = 'maxdb';\nvar TMP_DBSYSTEMVALUES_HANADB = 'hanadb';\nvar TMP_DBSYSTEMVALUES_INGRES = 'ingres';\nvar TMP_DBSYSTEMVALUES_FIRSTSQL = 'firstsql';\nvar TMP_DBSYSTEMVALUES_EDB = 'edb';\nvar TMP_DBSYSTEMVALUES_CACHE = 'cache';\nvar TMP_DBSYSTEMVALUES_ADABAS = 'adabas';\nvar TMP_DBSYSTEMVALUES_FIREBIRD = 'firebird';\nvar TMP_DBSYSTEMVALUES_DERBY = 'derby';\nvar TMP_DBSYSTEMVALUES_FILEMAKER = 'filemaker';\nvar TMP_DBSYSTEMVALUES_INFORMIX = 'informix';\nvar TMP_DBSYSTEMVALUES_INSTANTDB = 'instantdb';\nvar TMP_DBSYSTEMVALUES_INTERBASE = 'interbase';\nvar TMP_DBSYSTEMVALUES_MARIADB = 'mariadb';\nvar TMP_DBSYSTEMVALUES_NETEZZA = 'netezza';\nvar TMP_DBSYSTEMVALUES_PERVASIVE = 'pervasive';\nvar TMP_DBSYSTEMVALUES_POINTBASE = 'pointbase';\nvar TMP_DBSYSTEMVALUES_SQLITE = 'sqlite';\nvar TMP_DBSYSTEMVALUES_SYBASE = 'sybase';\nvar TMP_DBSYSTEMVALUES_TERADATA = 'teradata';\nvar TMP_DBSYSTEMVALUES_VERTICA = 'vertica';\nvar TMP_DBSYSTEMVALUES_H2 = 'h2';\nvar TMP_DBSYSTEMVALUES_COLDFUSION = 'coldfusion';\nvar TMP_DBSYSTEMVALUES_CASSANDRA = 'cassandra';\nvar TMP_DBSYSTEMVALUES_HBASE = 'hbase';\nvar TMP_DBSYSTEMVALUES_MONGODB = 'mongodb';\nvar TMP_DBSYSTEMVALUES_REDIS = 'redis';\nvar TMP_DBSYSTEMVALUES_COUCHBASE = 'couchbase';\nvar TMP_DBSYSTEMVALUES_COUCHDB = 'couchdb';\nvar TMP_DBSYSTEMVALUES_COSMOSDB = 'cosmosdb';\nvar TMP_DBSYSTEMVALUES_DYNAMODB = 'dynamodb';\nvar TMP_DBSYSTEMVALUES_NEO4J = 'neo4j';\nvar TMP_DBSYSTEMVALUES_GEODE = 'geode';\nvar TMP_DBSYSTEMVALUES_ELASTICSEARCH = 'elasticsearch';\nvar TMP_DBSYSTEMVALUES_MEMCACHED = 'memcached';\nvar TMP_DBSYSTEMVALUES_COCKROACHDB = 'cockroachdb';\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_OTHER_SQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_OTHER_SQL = TMP_DBSYSTEMVALUES_OTHER_SQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MSSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_MSSQL = TMP_DBSYSTEMVALUES_MSSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MYSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_MYSQL = TMP_DBSYSTEMVALUES_MYSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ORACLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_ORACLE = TMP_DBSYSTEMVALUES_ORACLE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DB2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_DB2 = TMP_DBSYSTEMVALUES_DB2;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_POSTGRESQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_POSTGRESQL = TMP_DBSYSTEMVALUES_POSTGRESQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_REDSHIFT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_REDSHIFT = TMP_DBSYSTEMVALUES_REDSHIFT;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_HIVE = TMP_DBSYSTEMVALUES_HIVE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CLOUDSCAPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_CLOUDSCAPE = TMP_DBSYSTEMVALUES_CLOUDSCAPE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HSQLDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_HSQLDB = TMP_DBSYSTEMVALUES_HSQLDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_PROGRESS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_PROGRESS = TMP_DBSYSTEMVALUES_PROGRESS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MAXDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_MAXDB = TMP_DBSYSTEMVALUES_MAXDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HANADB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_HANADB = TMP_DBSYSTEMVALUES_HANADB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INGRES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_INGRES = TMP_DBSYSTEMVALUES_INGRES;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FIRSTSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_FIRSTSQL = TMP_DBSYSTEMVALUES_FIRSTSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_EDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_EDB = TMP_DBSYSTEMVALUES_EDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CACHE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_CACHE = TMP_DBSYSTEMVALUES_CACHE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ADABAS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_ADABAS = TMP_DBSYSTEMVALUES_ADABAS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FIREBIRD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_FIREBIRD = TMP_DBSYSTEMVALUES_FIREBIRD;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DERBY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_DERBY = TMP_DBSYSTEMVALUES_DERBY;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FILEMAKER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_FILEMAKER = TMP_DBSYSTEMVALUES_FILEMAKER;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INFORMIX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_INFORMIX = TMP_DBSYSTEMVALUES_INFORMIX;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INSTANTDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_INSTANTDB = TMP_DBSYSTEMVALUES_INSTANTDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INTERBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_INTERBASE = TMP_DBSYSTEMVALUES_INTERBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MARIADB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_MARIADB = TMP_DBSYSTEMVALUES_MARIADB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_NETEZZA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_NETEZZA = TMP_DBSYSTEMVALUES_NETEZZA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_PERVASIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_PERVASIVE = TMP_DBSYSTEMVALUES_PERVASIVE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_POINTBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_POINTBASE = TMP_DBSYSTEMVALUES_POINTBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_SQLITE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_SQLITE = TMP_DBSYSTEMVALUES_SQLITE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_SYBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_SYBASE = TMP_DBSYSTEMVALUES_SYBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_TERADATA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_TERADATA = TMP_DBSYSTEMVALUES_TERADATA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_VERTICA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_VERTICA = TMP_DBSYSTEMVALUES_VERTICA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_H2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_H2 = TMP_DBSYSTEMVALUES_H2;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COLDFUSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_COLDFUSION = TMP_DBSYSTEMVALUES_COLDFUSION;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CASSANDRA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_CASSANDRA = TMP_DBSYSTEMVALUES_CASSANDRA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_HBASE = TMP_DBSYSTEMVALUES_HBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MONGODB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_MONGODB = TMP_DBSYSTEMVALUES_MONGODB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_REDIS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_REDIS = TMP_DBSYSTEMVALUES_REDIS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COUCHBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_COUCHBASE = TMP_DBSYSTEMVALUES_COUCHBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COUCHDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_COUCHDB = TMP_DBSYSTEMVALUES_COUCHDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COSMOSDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_COSMOSDB = TMP_DBSYSTEMVALUES_COSMOSDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DYNAMODB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_DYNAMODB = TMP_DBSYSTEMVALUES_DYNAMODB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_NEO4J in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_NEO4J = TMP_DBSYSTEMVALUES_NEO4J;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_GEODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_GEODE = TMP_DBSYSTEMVALUES_GEODE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ELASTICSEARCH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_ELASTICSEARCH = TMP_DBSYSTEMVALUES_ELASTICSEARCH;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MEMCACHED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_MEMCACHED = TMP_DBSYSTEMVALUES_MEMCACHED;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COCKROACHDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBSYSTEMVALUES_COCKROACHDB = TMP_DBSYSTEMVALUES_COCKROACHDB;\n/**\n * The constant map of values for DbSystemValues.\n * @deprecated Use the DBSYSTEMVALUES_XXXXX constants rather than the DbSystemValues.XXXXX for bundle minification.\n */\nvar DbSystemValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_DBSYSTEMVALUES_OTHER_SQL,\n    TMP_DBSYSTEMVALUES_MSSQL,\n    TMP_DBSYSTEMVALUES_MYSQL,\n    TMP_DBSYSTEMVALUES_ORACLE,\n    TMP_DBSYSTEMVALUES_DB2,\n    TMP_DBSYSTEMVALUES_POSTGRESQL,\n    TMP_DBSYSTEMVALUES_REDSHIFT,\n    TMP_DBSYSTEMVALUES_HIVE,\n    TMP_DBSYSTEMVALUES_CLOUDSCAPE,\n    TMP_DBSYSTEMVALUES_HSQLDB,\n    TMP_DBSYSTEMVALUES_PROGRESS,\n    TMP_DBSYSTEMVALUES_MAXDB,\n    TMP_DBSYSTEMVALUES_HANADB,\n    TMP_DBSYSTEMVALUES_INGRES,\n    TMP_DBSYSTEMVALUES_FIRSTSQL,\n    TMP_DBSYSTEMVALUES_EDB,\n    TMP_DBSYSTEMVALUES_CACHE,\n    TMP_DBSYSTEMVALUES_ADABAS,\n    TMP_DBSYSTEMVALUES_FIREBIRD,\n    TMP_DBSYSTEMVALUES_DERBY,\n    TMP_DBSYSTEMVALUES_FILEMAKER,\n    TMP_DBSYSTEMVALUES_INFORMIX,\n    TMP_DBSYSTEMVALUES_INSTANTDB,\n    TMP_DBSYSTEMVALUES_INTERBASE,\n    TMP_DBSYSTEMVALUES_MARIADB,\n    TMP_DBSYSTEMVALUES_NETEZZA,\n    TMP_DBSYSTEMVALUES_PERVASIVE,\n    TMP_DBSYSTEMVALUES_POINTBASE,\n    TMP_DBSYSTEMVALUES_SQLITE,\n    TMP_DBSYSTEMVALUES_SYBASE,\n    TMP_DBSYSTEMVALUES_TERADATA,\n    TMP_DBSYSTEMVALUES_VERTICA,\n    TMP_DBSYSTEMVALUES_H2,\n    TMP_DBSYSTEMVALUES_COLDFUSION,\n    TMP_DBSYSTEMVALUES_CASSANDRA,\n    TMP_DBSYSTEMVALUES_HBASE,\n    TMP_DBSYSTEMVALUES_MONGODB,\n    TMP_DBSYSTEMVALUES_REDIS,\n    TMP_DBSYSTEMVALUES_COUCHBASE,\n    TMP_DBSYSTEMVALUES_COUCHDB,\n    TMP_DBSYSTEMVALUES_COSMOSDB,\n    TMP_DBSYSTEMVALUES_DYNAMODB,\n    TMP_DBSYSTEMVALUES_NEO4J,\n    TMP_DBSYSTEMVALUES_GEODE,\n    TMP_DBSYSTEMVALUES_ELASTICSEARCH,\n    TMP_DBSYSTEMVALUES_MEMCACHED,\n    TMP_DBSYSTEMVALUES_COCKROACHDB,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for DbCassandraConsistencyLevelValues enum definition\n *\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL = 'all';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = 'each_quorum';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = 'quorum';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = 'local_quorum';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE = 'one';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO = 'two';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE = 'three';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = 'local_one';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY = 'any';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = 'serial';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = 'local_serial';\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ALL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBCASSANDRACONSISTENCYLEVELVALUES_ALL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_EACH_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBCASSANDRACONSISTENCYLEVELVALUES_ONE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_TWO in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBCASSANDRACONSISTENCYLEVELVALUES_TWO = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_THREE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBCASSANDRACONSISTENCYLEVELVALUES_THREE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_ONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ANY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBCASSANDRACONSISTENCYLEVELVALUES_ANY = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_SERIAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_SERIAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL;\n/**\n * The constant map of values for DbCassandraConsistencyLevelValues.\n * @deprecated Use the DBCASSANDRACONSISTENCYLEVELVALUES_XXXXX constants rather than the DbCassandraConsistencyLevelValues.XXXXX for bundle minification.\n */\nvar DbCassandraConsistencyLevelValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasTriggerValues enum definition\n *\n * Type of the trigger on which the function is executed.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_FAASTRIGGERVALUES_DATASOURCE = 'datasource';\nvar TMP_FAASTRIGGERVALUES_HTTP = 'http';\nvar TMP_FAASTRIGGERVALUES_PUBSUB = 'pubsub';\nvar TMP_FAASTRIGGERVALUES_TIMER = 'timer';\nvar TMP_FAASTRIGGERVALUES_OTHER = 'other';\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_DATASOURCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar FAASTRIGGERVALUES_DATASOURCE = TMP_FAASTRIGGERVALUES_DATASOURCE;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_HTTP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar FAASTRIGGERVALUES_HTTP = TMP_FAASTRIGGERVALUES_HTTP;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_PUBSUB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar FAASTRIGGERVALUES_PUBSUB = TMP_FAASTRIGGERVALUES_PUBSUB;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_TIMER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar FAASTRIGGERVALUES_TIMER = TMP_FAASTRIGGERVALUES_TIMER;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_OTHER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar FAASTRIGGERVALUES_OTHER = TMP_FAASTRIGGERVALUES_OTHER;\n/**\n * The constant map of values for FaasTriggerValues.\n * @deprecated Use the FAASTRIGGERVALUES_XXXXX constants rather than the FaasTriggerValues.XXXXX for bundle minification.\n */\nvar FaasTriggerValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_FAASTRIGGERVALUES_DATASOURCE,\n    TMP_FAASTRIGGERVALUES_HTTP,\n    TMP_FAASTRIGGERVALUES_PUBSUB,\n    TMP_FAASTRIGGERVALUES_TIMER,\n    TMP_FAASTRIGGERVALUES_OTHER,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasDocumentOperationValues enum definition\n *\n * Describes the type of the operation that was performed on the data.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_FAASDOCUMENTOPERATIONVALUES_INSERT = 'insert';\nvar TMP_FAASDOCUMENTOPERATIONVALUES_EDIT = 'edit';\nvar TMP_FAASDOCUMENTOPERATIONVALUES_DELETE = 'delete';\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_INSERT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar FAASDOCUMENTOPERATIONVALUES_INSERT = TMP_FAASDOCUMENTOPERATIONVALUES_INSERT;\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_EDIT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar FAASDOCUMENTOPERATIONVALUES_EDIT = TMP_FAASDOCUMENTOPERATIONVALUES_EDIT;\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_DELETE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar FAASDOCUMENTOPERATIONVALUES_DELETE = TMP_FAASDOCUMENTOPERATIONVALUES_DELETE;\n/**\n * The constant map of values for FaasDocumentOperationValues.\n * @deprecated Use the FAASDOCUMENTOPERATIONVALUES_XXXXX constants rather than the FaasDocumentOperationValues.XXXXX for bundle minification.\n */\nvar FaasDocumentOperationValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_FAASDOCUMENTOPERATIONVALUES_INSERT,\n    TMP_FAASDOCUMENTOPERATIONVALUES_EDIT,\n    TMP_FAASDOCUMENTOPERATIONVALUES_DELETE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasInvokedProviderValues enum definition\n *\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nvar TMP_FAASINVOKEDPROVIDERVALUES_AWS = 'aws';\nvar TMP_FAASINVOKEDPROVIDERVALUES_AZURE = 'azure';\nvar TMP_FAASINVOKEDPROVIDERVALUES_GCP = 'gcp';\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_ALIBABA_CLOUD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_AWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar FAASINVOKEDPROVIDERVALUES_AWS = TMP_FAASINVOKEDPROVIDERVALUES_AWS;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_AZURE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar FAASINVOKEDPROVIDERVALUES_AZURE = TMP_FAASINVOKEDPROVIDERVALUES_AZURE;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_GCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar FAASINVOKEDPROVIDERVALUES_GCP = TMP_FAASINVOKEDPROVIDERVALUES_GCP;\n/**\n * The constant map of values for FaasInvokedProviderValues.\n * @deprecated Use the FAASINVOKEDPROVIDERVALUES_XXXXX constants rather than the FaasInvokedProviderValues.XXXXX for bundle minification.\n */\nvar FaasInvokedProviderValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_FAASINVOKEDPROVIDERVALUES_AWS,\n    TMP_FAASINVOKEDPROVIDERVALUES_AZURE,\n    TMP_FAASINVOKEDPROVIDERVALUES_GCP,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetTransportValues enum definition\n *\n * Transport protocol used. See note below.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_NETTRANSPORTVALUES_IP_TCP = 'ip_tcp';\nvar TMP_NETTRANSPORTVALUES_IP_UDP = 'ip_udp';\nvar TMP_NETTRANSPORTVALUES_IP = 'ip';\nvar TMP_NETTRANSPORTVALUES_UNIX = 'unix';\nvar TMP_NETTRANSPORTVALUES_PIPE = 'pipe';\nvar TMP_NETTRANSPORTVALUES_INPROC = 'inproc';\nvar TMP_NETTRANSPORTVALUES_OTHER = 'other';\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_IP_TCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETTRANSPORTVALUES_IP_TCP = TMP_NETTRANSPORTVALUES_IP_TCP;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_IP_UDP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETTRANSPORTVALUES_IP_UDP = TMP_NETTRANSPORTVALUES_IP_UDP;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Removed in v1.21.0.\n */\nvar NETTRANSPORTVALUES_IP = TMP_NETTRANSPORTVALUES_IP;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Removed in v1.21.0.\n */\nvar NETTRANSPORTVALUES_UNIX = TMP_NETTRANSPORTVALUES_UNIX;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_PIPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETTRANSPORTVALUES_PIPE = TMP_NETTRANSPORTVALUES_PIPE;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_INPROC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETTRANSPORTVALUES_INPROC = TMP_NETTRANSPORTVALUES_INPROC;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_OTHER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETTRANSPORTVALUES_OTHER = TMP_NETTRANSPORTVALUES_OTHER;\n/**\n * The constant map of values for NetTransportValues.\n * @deprecated Use the NETTRANSPORTVALUES_XXXXX constants rather than the NetTransportValues.XXXXX for bundle minification.\n */\nvar NetTransportValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_NETTRANSPORTVALUES_IP_TCP,\n    TMP_NETTRANSPORTVALUES_IP_UDP,\n    TMP_NETTRANSPORTVALUES_IP,\n    TMP_NETTRANSPORTVALUES_UNIX,\n    TMP_NETTRANSPORTVALUES_PIPE,\n    TMP_NETTRANSPORTVALUES_INPROC,\n    TMP_NETTRANSPORTVALUES_OTHER,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetHostConnectionTypeValues enum definition\n *\n * The internet connection type currently being used by the host.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI = 'wifi';\nvar TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED = 'wired';\nvar TMP_NETHOSTCONNECTIONTYPEVALUES_CELL = 'cell';\nvar TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = 'unavailable';\nvar TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = 'unknown';\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_WIFI in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONTYPEVALUES_WIFI = TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_WIRED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONTYPEVALUES_WIRED = TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_CELL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONTYPEVALUES_CELL = TMP_NETHOSTCONNECTIONTYPEVALUES_CELL;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_UNAVAILABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_UNKNOWN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN;\n/**\n * The constant map of values for NetHostConnectionTypeValues.\n * @deprecated Use the NETHOSTCONNECTIONTYPEVALUES_XXXXX constants rather than the NetHostConnectionTypeValues.XXXXX for bundle minification.\n */\nvar NetHostConnectionTypeValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_CELL,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetHostConnectionSubtypeValues enum definition\n *\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = 'gprs';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = 'edge';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = 'umts';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = 'cdma';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = 'evdo_0';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = 'evdo_a';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = 'cdma2000_1xrtt';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = 'hsdpa';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = 'hsupa';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = 'hspa';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = 'iden';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = 'evdo_b';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE = 'lte';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = 'ehrpd';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = 'hspap';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM = 'gsm';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = 'td_scdma';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = 'iwlan';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR = 'nr';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = 'nrnsa';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = 'lte_ca';\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_GPRS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EDGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_UMTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_A in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA2000_1XRTT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSDPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSUPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_IDEN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_B in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_LTE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONSUBTYPEVALUES_LTE = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EHRPD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSPAP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_GSM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONSUBTYPEVALUES_GSM = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_TD_SCDMA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_IWLAN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_NR in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONSUBTYPEVALUES_NR = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_NRNSA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_LTE_CA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA;\n/**\n * The constant map of values for NetHostConnectionSubtypeValues.\n * @deprecated Use the NETHOSTCONNECTIONSUBTYPEVALUES_XXXXX constants rather than the NetHostConnectionSubtypeValues.XXXXX for bundle minification.\n */\nvar NetHostConnectionSubtypeValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HttpFlavorValues enum definition\n *\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_HTTPFLAVORVALUES_HTTP_1_0 = '1.0';\nvar TMP_HTTPFLAVORVALUES_HTTP_1_1 = '1.1';\nvar TMP_HTTPFLAVORVALUES_HTTP_2_0 = '2.0';\nvar TMP_HTTPFLAVORVALUES_SPDY = 'SPDY';\nvar TMP_HTTPFLAVORVALUES_QUIC = 'QUIC';\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_1_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar HTTPFLAVORVALUES_HTTP_1_0 = TMP_HTTPFLAVORVALUES_HTTP_1_0;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_1_1 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar HTTPFLAVORVALUES_HTTP_1_1 = TMP_HTTPFLAVORVALUES_HTTP_1_1;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_2_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar HTTPFLAVORVALUES_HTTP_2_0 = TMP_HTTPFLAVORVALUES_HTTP_2_0;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_SPDY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar HTTPFLAVORVALUES_SPDY = TMP_HTTPFLAVORVALUES_SPDY;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_QUIC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar HTTPFLAVORVALUES_QUIC = TMP_HTTPFLAVORVALUES_QUIC;\n/**\n * The constant map of values for HttpFlavorValues.\n * @deprecated Use the HTTPFLAVORVALUES_XXXXX constants rather than the HttpFlavorValues.XXXXX for bundle minification.\n */\nvar HttpFlavorValues = {\n    HTTP_1_0: TMP_HTTPFLAVORVALUES_HTTP_1_0,\n    HTTP_1_1: TMP_HTTPFLAVORVALUES_HTTP_1_1,\n    HTTP_2_0: TMP_HTTPFLAVORVALUES_HTTP_2_0,\n    SPDY: TMP_HTTPFLAVORVALUES_SPDY,\n    QUIC: TMP_HTTPFLAVORVALUES_QUIC,\n};\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessagingDestinationKindValues enum definition\n *\n * The kind of message destination.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE = 'queue';\nvar TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC = 'topic';\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nvar MESSAGINGDESTINATIONKINDVALUES_QUEUE = TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE;\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nvar MESSAGINGDESTINATIONKINDVALUES_TOPIC = TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC;\n/**\n * The constant map of values for MessagingDestinationKindValues.\n * @deprecated Use the MESSAGINGDESTINATIONKINDVALUES_XXXXX constants rather than the MessagingDestinationKindValues.XXXXX for bundle minification.\n */\nvar MessagingDestinationKindValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE,\n    TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessagingOperationValues enum definition\n *\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_MESSAGINGOPERATIONVALUES_RECEIVE = 'receive';\nvar TMP_MESSAGINGOPERATIONVALUES_PROCESS = 'process';\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use MESSAGING_OPERATION_TYPE_VALUE_RECEIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar MESSAGINGOPERATIONVALUES_RECEIVE = TMP_MESSAGINGOPERATIONVALUES_RECEIVE;\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use MESSAGING_OPERATION_TYPE_VALUE_PROCESS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar MESSAGINGOPERATIONVALUES_PROCESS = TMP_MESSAGINGOPERATIONVALUES_PROCESS;\n/**\n * The constant map of values for MessagingOperationValues.\n * @deprecated Use the MESSAGINGOPERATIONVALUES_XXXXX constants rather than the MessagingOperationValues.XXXXX for bundle minification.\n */\nvar MessagingOperationValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_MESSAGINGOPERATIONVALUES_RECEIVE,\n    TMP_MESSAGINGOPERATIONVALUES_PROCESS,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for RpcGrpcStatusCodeValues enum definition\n *\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_RPCGRPCSTATUSCODEVALUES_OK = 0;\nvar TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED = 1;\nvar TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN = 2;\nvar TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = 3;\nvar TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = 4;\nvar TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND = 5;\nvar TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = 6;\nvar TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = 7;\nvar TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = 8;\nvar TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = 9;\nvar TMP_RPCGRPCSTATUSCODEVALUES_ABORTED = 10;\nvar TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = 11;\nvar TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = 12;\nvar TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL = 13;\nvar TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = 14;\nvar TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS = 15;\nvar TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = 16;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_OK in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar RPCGRPCSTATUSCODEVALUES_OK = TMP_RPCGRPCSTATUSCODEVALUES_OK;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_CANCELLED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar RPCGRPCSTATUSCODEVALUES_CANCELLED = TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNKNOWN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar RPCGRPCSTATUSCODEVALUES_UNKNOWN = TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_INVALID_ARGUMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_DEADLINE_EXCEEDED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_NOT_FOUND in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar RPCGRPCSTATUSCODEVALUES_NOT_FOUND = TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_ALREADY_EXISTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_PERMISSION_DENIED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_RESOURCE_EXHAUSTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_FAILED_PRECONDITION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_ABORTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar RPCGRPCSTATUSCODEVALUES_ABORTED = TMP_RPCGRPCSTATUSCODEVALUES_ABORTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_OUT_OF_RANGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNIMPLEMENTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_INTERNAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar RPCGRPCSTATUSCODEVALUES_INTERNAL = TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNAVAILABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_DATA_LOSS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar RPCGRPCSTATUSCODEVALUES_DATA_LOSS = TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNAUTHENTICATED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED;\n/**\n * The constant map of values for RpcGrpcStatusCodeValues.\n * @deprecated Use the RPCGRPCSTATUSCODEVALUES_XXXXX constants rather than the RpcGrpcStatusCodeValues.XXXXX for bundle minification.\n */\nvar RpcGrpcStatusCodeValues = {\n    OK: TMP_RPCGRPCSTATUSCODEVALUES_OK,\n    CANCELLED: TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED,\n    UNKNOWN: TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN,\n    INVALID_ARGUMENT: TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT,\n    DEADLINE_EXCEEDED: TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED,\n    NOT_FOUND: TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND,\n    ALREADY_EXISTS: TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS,\n    PERMISSION_DENIED: TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED,\n    RESOURCE_EXHAUSTED: TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED,\n    FAILED_PRECONDITION: TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION,\n    ABORTED: TMP_RPCGRPCSTATUSCODEVALUES_ABORTED,\n    OUT_OF_RANGE: TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE,\n    UNIMPLEMENTED: TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED,\n    INTERNAL: TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL,\n    UNAVAILABLE: TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE,\n    DATA_LOSS: TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS,\n    UNAUTHENTICATED: TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED,\n};\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessageTypeValues enum definition\n *\n * Whether this is a received or sent message.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_MESSAGETYPEVALUES_SENT = 'SENT';\nvar TMP_MESSAGETYPEVALUES_RECEIVED = 'RECEIVED';\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use MESSAGE_TYPE_VALUE_SENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar MESSAGETYPEVALUES_SENT = TMP_MESSAGETYPEVALUES_SENT;\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use MESSAGE_TYPE_VALUE_RECEIVED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar MESSAGETYPEVALUES_RECEIVED = TMP_MESSAGETYPEVALUES_RECEIVED;\n/**\n * The constant map of values for MessageTypeValues.\n * @deprecated Use the MESSAGETYPEVALUES_XXXXX constants rather than the MessageTypeValues.XXXXX for bundle minification.\n */\nvar MessageTypeValues = \n/*#__PURE__*/ (0,_internal_utils__WEBPACK_IMPORTED_MODULE_0__.createConstMap)([\n    TMP_MESSAGETYPEVALUES_SENT,\n    TMP_MESSAGETYPEVALUES_RECEIVED,\n]);\n//# sourceMappingURL=SemanticAttributes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js\n")}};