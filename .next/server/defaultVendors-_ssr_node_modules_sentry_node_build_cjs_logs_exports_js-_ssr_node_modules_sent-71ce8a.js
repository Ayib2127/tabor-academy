exports.id="defaultVendors-_ssr_node_modules_sentry_node_build_cjs_logs_exports_js-_ssr_node_modules_sent-71ce8a",exports.ids=["defaultVendors-_ssr_node_modules_sentry_node_build_cjs_logs_exports_js-_ssr_node_modules_sent-71ce8a"],exports.modules={"(ssr)/./node_modules/@sentry/node/build/cjs/logs/capture.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst node_util = __webpack_require__(/*! node:util */ \"node:util\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Capture a log with the given level.\n *\n * @param level - The level of the log.\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., userId: 100.\n */\nfunction captureLog(level, ...args) {\n  const [messageOrMessageTemplate, paramsOrAttributes, maybeAttributes] = args;\n  if (Array.isArray(paramsOrAttributes)) {\n    const attributes = { ...maybeAttributes };\n    attributes['sentry.message.template'] = messageOrMessageTemplate;\n    paramsOrAttributes.forEach((param, index) => {\n      attributes[`sentry.message.parameter.${index}`] = param;\n    });\n    const message = node_util.format(messageOrMessageTemplate, ...paramsOrAttributes);\n    core._INTERNAL_captureLog({ level, message, attributes });\n  } else {\n    core._INTERNAL_captureLog({ level, message: messageOrMessageTemplate, attributes: paramsOrAttributes });\n  }\n}\n\nexports.captureLog = captureLog;\n//# sourceMappingURL=capture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9sb2dzL2NhcHR1cmUuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsa0JBQWtCLG1CQUFPLENBQUMsNEJBQVc7QUFDckMsYUFBYSxtQkFBTyxDQUFDLG9HQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0EsNkNBQTZDLE1BQU07QUFDbkQsS0FBSztBQUNMO0FBQ0EsZ0NBQWdDLDRCQUE0QjtBQUM1RCxJQUFJO0FBQ0osZ0NBQWdDLDBFQUEwRTtBQUMxRztBQUNBOztBQUVBLGtCQUFrQjtBQUNsQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFwxXFxEb3dubG9hZHNcXHRhYm9yQWNhZGVteVVwZGF0ZWRcXHRhYm9yLWFjYWRlbXlcXG5vZGVfbW9kdWxlc1xcQHNlbnRyeVxcbm9kZVxcYnVpbGRcXGNqc1xcbG9nc1xcY2FwdHVyZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3Qgbm9kZV91dGlsID0gcmVxdWlyZSgnbm9kZTp1dGlsJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8qKlxuICogQ2FwdHVyZSBhIGxvZyB3aXRoIHRoZSBnaXZlbiBsZXZlbC5cbiAqXG4gKiBAcGFyYW0gbGV2ZWwgLSBUaGUgbGV2ZWwgb2YgdGhlIGxvZy5cbiAqIEBwYXJhbSBtZXNzYWdlIC0gVGhlIG1lc3NhZ2UgdG8gbG9nLlxuICogQHBhcmFtIGF0dHJpYnV0ZXMgLSBBcmJpdHJhcnkgc3RydWN0dXJlZCBkYXRhIHRoYXQgc3RvcmVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBsb2cgLSBlLmcuLCB1c2VySWQ6IDEwMC5cbiAqL1xuZnVuY3Rpb24gY2FwdHVyZUxvZyhsZXZlbCwgLi4uYXJncykge1xuICBjb25zdCBbbWVzc2FnZU9yTWVzc2FnZVRlbXBsYXRlLCBwYXJhbXNPckF0dHJpYnV0ZXMsIG1heWJlQXR0cmlidXRlc10gPSBhcmdzO1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXJhbXNPckF0dHJpYnV0ZXMpKSB7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IHsgLi4ubWF5YmVBdHRyaWJ1dGVzIH07XG4gICAgYXR0cmlidXRlc1snc2VudHJ5Lm1lc3NhZ2UudGVtcGxhdGUnXSA9IG1lc3NhZ2VPck1lc3NhZ2VUZW1wbGF0ZTtcbiAgICBwYXJhbXNPckF0dHJpYnV0ZXMuZm9yRWFjaCgocGFyYW0sIGluZGV4KSA9PiB7XG4gICAgICBhdHRyaWJ1dGVzW2BzZW50cnkubWVzc2FnZS5wYXJhbWV0ZXIuJHtpbmRleH1gXSA9IHBhcmFtO1xuICAgIH0pO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBub2RlX3V0aWwuZm9ybWF0KG1lc3NhZ2VPck1lc3NhZ2VUZW1wbGF0ZSwgLi4ucGFyYW1zT3JBdHRyaWJ1dGVzKTtcbiAgICBjb3JlLl9JTlRFUk5BTF9jYXB0dXJlTG9nKHsgbGV2ZWwsIG1lc3NhZ2UsIGF0dHJpYnV0ZXMgfSk7XG4gIH0gZWxzZSB7XG4gICAgY29yZS5fSU5URVJOQUxfY2FwdHVyZUxvZyh7IGxldmVsLCBtZXNzYWdlOiBtZXNzYWdlT3JNZXNzYWdlVGVtcGxhdGUsIGF0dHJpYnV0ZXM6IHBhcmFtc09yQXR0cmlidXRlcyB9KTtcbiAgfVxufVxuXG5leHBvcnRzLmNhcHR1cmVMb2cgPSBjYXB0dXJlTG9nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FwdHVyZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/logs/capture.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/logs/exports.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst capture = __webpack_require__(/*! ./capture.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/logs/capture.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * @summary Capture a log with the `trace` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * You can either pass a message and attributes or a message template, params and attributes.\n *\n * @example\n *\n * ```\n * Sentry.logger.trace('Starting database connection', {\n *   database: 'users',\n *   connectionId: 'conn_123'\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.trace('Database connection %s established for %s',\n *   ['successful', 'users'],\n *   { connectionId: 'conn_123' }\n * );\n * ```\n */\nfunction trace(...args) {\n  capture.captureLog('trace', ...args);\n}\n\n/**\n * @summary Capture a log with the `debug` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * You can either pass a message and attributes or a message template, params and attributes.\n *\n * @example\n *\n * ```\n * Sentry.logger.debug('Cache miss for user profile', {\n *   userId: 'user_123',\n *   cacheKey: 'profile:user_123'\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.debug('Cache %s for %s: %s',\n *   ['miss', 'user profile', 'key not found'],\n *   { userId: 'user_123' }\n * );\n * ```\n */\nfunction debug(...args) {\n  capture.captureLog('debug', ...args);\n}\n\n/**\n * @summary Capture a log with the `info` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * You can either pass a message and attributes or a message template, params and attributes.\n *\n * @example\n *\n * ```\n * Sentry.logger.info('User profile updated', {\n *   userId: 'user_123',\n *   updatedFields: ['email', 'preferences']\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.info('User %s updated their %s',\n *   ['John Doe', 'profile settings'],\n *   { userId: 'user_123' }\n * );\n * ```\n */\nfunction info(...args) {\n  capture.captureLog('info', ...args);\n}\n\n/**\n * @summary Capture a log with the `warn` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * You can either pass a message and attributes or a message template, params and attributes.\n *\n * @example\n *\n * ```\n * Sentry.logger.warn('Rate limit approaching', {\n *   endpoint: '/api/users',\n *   currentRate: '95/100',\n *   resetTime: '2024-03-20T10:00:00Z'\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.warn('Rate limit %s for %s: %s',\n *   ['approaching', '/api/users', '95/100 requests'],\n *   { resetTime: '2024-03-20T10:00:00Z' }\n * );\n * ```\n */\nfunction warn(...args) {\n  capture.captureLog('warn', ...args);\n}\n\n/**\n * @summary Capture a log with the `error` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * You can either pass a message and attributes or a message template, params and attributes.\n *\n * @example\n *\n * ```\n * Sentry.logger.error('Failed to process payment', {\n *   orderId: 'order_123',\n *   errorCode: 'PAYMENT_FAILED',\n *   amount: 99.99\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.error('Payment processing failed for order %s: %s',\n *   ['order_123', 'insufficient funds'],\n *   { amount: 99.99 }\n * );\n * ```\n */\nfunction error(...args) {\n  capture.captureLog('error', ...args);\n}\n\n/**\n * @summary Capture a log with the `fatal` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * You can either pass a message and attributes or a message template, params and attributes.\n *\n * @example\n *\n * ```\n * Sentry.logger.fatal('Database connection pool exhausted', {\n *   database: 'users',\n *   activeConnections: 100,\n *   maxConnections: 100\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.fatal('Database %s: %s connections active',\n *   ['connection pool exhausted', '100/100'],\n *   { database: 'users' }\n * );\n * ```\n */\nfunction fatal(...args) {\n  capture.captureLog('fatal', ...args);\n}\n\nexports.fmt = core.fmt;\nexports.debug = debug;\nexports.error = error;\nexports.fatal = fatal;\nexports.info = info;\nexports.trace = trace;\nexports.warn = warn;\n//# sourceMappingURL=exports.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9sb2dzL2V4cG9ydHMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsZ0JBQWdCLG1CQUFPLENBQUMsaUZBQWM7QUFDdEMsYUFBYSxtQkFBTyxDQUFDLG9HQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxXQUFXO0FBQ1gsYUFBYTtBQUNiLGFBQWE7QUFDYixhQUFhO0FBQ2IsWUFBWTtBQUNaLGFBQWE7QUFDYixZQUFZO0FBQ1oiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXGxvZ3NcXGV4cG9ydHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNhcHR1cmUgPSByZXF1aXJlKCcuL2NhcHR1cmUuanMnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuLyoqXG4gKiBAc3VtbWFyeSBDYXB0dXJlIGEgbG9nIHdpdGggdGhlIGB0cmFjZWAgbGV2ZWwuIFJlcXVpcmVzIGBfZXhwZXJpbWVudHMuZW5hYmxlTG9nc2AgdG8gYmUgZW5hYmxlZC5cbiAqXG4gKiBZb3UgY2FuIGVpdGhlciBwYXNzIGEgbWVzc2FnZSBhbmQgYXR0cmlidXRlcyBvciBhIG1lc3NhZ2UgdGVtcGxhdGUsIHBhcmFtcyBhbmQgYXR0cmlidXRlcy5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYFxuICogU2VudHJ5LmxvZ2dlci50cmFjZSgnU3RhcnRpbmcgZGF0YWJhc2UgY29ubmVjdGlvbicsIHtcbiAqICAgZGF0YWJhc2U6ICd1c2VycycsXG4gKiAgIGNvbm5lY3Rpb25JZDogJ2Nvbm5fMTIzJ1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZSBXaXRoIHRlbXBsYXRlIHN0cmluZ3NcbiAqXG4gKiBgYGBcbiAqIFNlbnRyeS5sb2dnZXIudHJhY2UoJ0RhdGFiYXNlIGNvbm5lY3Rpb24gJXMgZXN0YWJsaXNoZWQgZm9yICVzJyxcbiAqICAgWydzdWNjZXNzZnVsJywgJ3VzZXJzJ10sXG4gKiAgIHsgY29ubmVjdGlvbklkOiAnY29ubl8xMjMnIH1cbiAqICk7XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gdHJhY2UoLi4uYXJncykge1xuICBjYXB0dXJlLmNhcHR1cmVMb2coJ3RyYWNlJywgLi4uYXJncyk7XG59XG5cbi8qKlxuICogQHN1bW1hcnkgQ2FwdHVyZSBhIGxvZyB3aXRoIHRoZSBgZGVidWdgIGxldmVsLiBSZXF1aXJlcyBgX2V4cGVyaW1lbnRzLmVuYWJsZUxvZ3NgIHRvIGJlIGVuYWJsZWQuXG4gKlxuICogWW91IGNhbiBlaXRoZXIgcGFzcyBhIG1lc3NhZ2UgYW5kIGF0dHJpYnV0ZXMgb3IgYSBtZXNzYWdlIHRlbXBsYXRlLCBwYXJhbXMgYW5kIGF0dHJpYnV0ZXMuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBcbiAqIFNlbnRyeS5sb2dnZXIuZGVidWcoJ0NhY2hlIG1pc3MgZm9yIHVzZXIgcHJvZmlsZScsIHtcbiAqICAgdXNlcklkOiAndXNlcl8xMjMnLFxuICogICBjYWNoZUtleTogJ3Byb2ZpbGU6dXNlcl8xMjMnXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlIFdpdGggdGVtcGxhdGUgc3RyaW5nc1xuICpcbiAqIGBgYFxuICogU2VudHJ5LmxvZ2dlci5kZWJ1ZygnQ2FjaGUgJXMgZm9yICVzOiAlcycsXG4gKiAgIFsnbWlzcycsICd1c2VyIHByb2ZpbGUnLCAna2V5IG5vdCBmb3VuZCddLFxuICogICB7IHVzZXJJZDogJ3VzZXJfMTIzJyB9XG4gKiApO1xuICogYGBgXG4gKi9cbmZ1bmN0aW9uIGRlYnVnKC4uLmFyZ3MpIHtcbiAgY2FwdHVyZS5jYXB0dXJlTG9nKCdkZWJ1ZycsIC4uLmFyZ3MpO1xufVxuXG4vKipcbiAqIEBzdW1tYXJ5IENhcHR1cmUgYSBsb2cgd2l0aCB0aGUgYGluZm9gIGxldmVsLiBSZXF1aXJlcyBgX2V4cGVyaW1lbnRzLmVuYWJsZUxvZ3NgIHRvIGJlIGVuYWJsZWQuXG4gKlxuICogWW91IGNhbiBlaXRoZXIgcGFzcyBhIG1lc3NhZ2UgYW5kIGF0dHJpYnV0ZXMgb3IgYSBtZXNzYWdlIHRlbXBsYXRlLCBwYXJhbXMgYW5kIGF0dHJpYnV0ZXMuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBcbiAqIFNlbnRyeS5sb2dnZXIuaW5mbygnVXNlciBwcm9maWxlIHVwZGF0ZWQnLCB7XG4gKiAgIHVzZXJJZDogJ3VzZXJfMTIzJyxcbiAqICAgdXBkYXRlZEZpZWxkczogWydlbWFpbCcsICdwcmVmZXJlbmNlcyddXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlIFdpdGggdGVtcGxhdGUgc3RyaW5nc1xuICpcbiAqIGBgYFxuICogU2VudHJ5LmxvZ2dlci5pbmZvKCdVc2VyICVzIHVwZGF0ZWQgdGhlaXIgJXMnLFxuICogICBbJ0pvaG4gRG9lJywgJ3Byb2ZpbGUgc2V0dGluZ3MnXSxcbiAqICAgeyB1c2VySWQ6ICd1c2VyXzEyMycgfVxuICogKTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBpbmZvKC4uLmFyZ3MpIHtcbiAgY2FwdHVyZS5jYXB0dXJlTG9nKCdpbmZvJywgLi4uYXJncyk7XG59XG5cbi8qKlxuICogQHN1bW1hcnkgQ2FwdHVyZSBhIGxvZyB3aXRoIHRoZSBgd2FybmAgbGV2ZWwuIFJlcXVpcmVzIGBfZXhwZXJpbWVudHMuZW5hYmxlTG9nc2AgdG8gYmUgZW5hYmxlZC5cbiAqXG4gKiBZb3UgY2FuIGVpdGhlciBwYXNzIGEgbWVzc2FnZSBhbmQgYXR0cmlidXRlcyBvciBhIG1lc3NhZ2UgdGVtcGxhdGUsIHBhcmFtcyBhbmQgYXR0cmlidXRlcy5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYFxuICogU2VudHJ5LmxvZ2dlci53YXJuKCdSYXRlIGxpbWl0IGFwcHJvYWNoaW5nJywge1xuICogICBlbmRwb2ludDogJy9hcGkvdXNlcnMnLFxuICogICBjdXJyZW50UmF0ZTogJzk1LzEwMCcsXG4gKiAgIHJlc2V0VGltZTogJzIwMjQtMDMtMjBUMTA6MDA6MDBaJ1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZSBXaXRoIHRlbXBsYXRlIHN0cmluZ3NcbiAqXG4gKiBgYGBcbiAqIFNlbnRyeS5sb2dnZXIud2FybignUmF0ZSBsaW1pdCAlcyBmb3IgJXM6ICVzJyxcbiAqICAgWydhcHByb2FjaGluZycsICcvYXBpL3VzZXJzJywgJzk1LzEwMCByZXF1ZXN0cyddLFxuICogICB7IHJlc2V0VGltZTogJzIwMjQtMDMtMjBUMTA6MDA6MDBaJyB9XG4gKiApO1xuICogYGBgXG4gKi9cbmZ1bmN0aW9uIHdhcm4oLi4uYXJncykge1xuICBjYXB0dXJlLmNhcHR1cmVMb2coJ3dhcm4nLCAuLi5hcmdzKTtcbn1cblxuLyoqXG4gKiBAc3VtbWFyeSBDYXB0dXJlIGEgbG9nIHdpdGggdGhlIGBlcnJvcmAgbGV2ZWwuIFJlcXVpcmVzIGBfZXhwZXJpbWVudHMuZW5hYmxlTG9nc2AgdG8gYmUgZW5hYmxlZC5cbiAqXG4gKiBZb3UgY2FuIGVpdGhlciBwYXNzIGEgbWVzc2FnZSBhbmQgYXR0cmlidXRlcyBvciBhIG1lc3NhZ2UgdGVtcGxhdGUsIHBhcmFtcyBhbmQgYXR0cmlidXRlcy5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYFxuICogU2VudHJ5LmxvZ2dlci5lcnJvcignRmFpbGVkIHRvIHByb2Nlc3MgcGF5bWVudCcsIHtcbiAqICAgb3JkZXJJZDogJ29yZGVyXzEyMycsXG4gKiAgIGVycm9yQ29kZTogJ1BBWU1FTlRfRkFJTEVEJyxcbiAqICAgYW1vdW50OiA5OS45OVxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZSBXaXRoIHRlbXBsYXRlIHN0cmluZ3NcbiAqXG4gKiBgYGBcbiAqIFNlbnRyeS5sb2dnZXIuZXJyb3IoJ1BheW1lbnQgcHJvY2Vzc2luZyBmYWlsZWQgZm9yIG9yZGVyICVzOiAlcycsXG4gKiAgIFsnb3JkZXJfMTIzJywgJ2luc3VmZmljaWVudCBmdW5kcyddLFxuICogICB7IGFtb3VudDogOTkuOTkgfVxuICogKTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBlcnJvciguLi5hcmdzKSB7XG4gIGNhcHR1cmUuY2FwdHVyZUxvZygnZXJyb3InLCAuLi5hcmdzKTtcbn1cblxuLyoqXG4gKiBAc3VtbWFyeSBDYXB0dXJlIGEgbG9nIHdpdGggdGhlIGBmYXRhbGAgbGV2ZWwuIFJlcXVpcmVzIGBfZXhwZXJpbWVudHMuZW5hYmxlTG9nc2AgdG8gYmUgZW5hYmxlZC5cbiAqXG4gKiBZb3UgY2FuIGVpdGhlciBwYXNzIGEgbWVzc2FnZSBhbmQgYXR0cmlidXRlcyBvciBhIG1lc3NhZ2UgdGVtcGxhdGUsIHBhcmFtcyBhbmQgYXR0cmlidXRlcy5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYFxuICogU2VudHJ5LmxvZ2dlci5mYXRhbCgnRGF0YWJhc2UgY29ubmVjdGlvbiBwb29sIGV4aGF1c3RlZCcsIHtcbiAqICAgZGF0YWJhc2U6ICd1c2VycycsXG4gKiAgIGFjdGl2ZUNvbm5lY3Rpb25zOiAxMDAsXG4gKiAgIG1heENvbm5lY3Rpb25zOiAxMDBcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQGV4YW1wbGUgV2l0aCB0ZW1wbGF0ZSBzdHJpbmdzXG4gKlxuICogYGBgXG4gKiBTZW50cnkubG9nZ2VyLmZhdGFsKCdEYXRhYmFzZSAlczogJXMgY29ubmVjdGlvbnMgYWN0aXZlJyxcbiAqICAgWydjb25uZWN0aW9uIHBvb2wgZXhoYXVzdGVkJywgJzEwMC8xMDAnXSxcbiAqICAgeyBkYXRhYmFzZTogJ3VzZXJzJyB9XG4gKiApO1xuICogYGBgXG4gKi9cbmZ1bmN0aW9uIGZhdGFsKC4uLmFyZ3MpIHtcbiAgY2FwdHVyZS5jYXB0dXJlTG9nKCdmYXRhbCcsIC4uLmFyZ3MpO1xufVxuXG5leHBvcnRzLmZtdCA9IGNvcmUuZm10O1xuZXhwb3J0cy5kZWJ1ZyA9IGRlYnVnO1xuZXhwb3J0cy5lcnJvciA9IGVycm9yO1xuZXhwb3J0cy5mYXRhbCA9IGZhdGFsO1xuZXhwb3J0cy5pbmZvID0gaW5mbztcbmV4cG9ydHMudHJhY2UgPSB0cmFjZTtcbmV4cG9ydHMud2FybiA9IHdhcm47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHBvcnRzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/logs/exports.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/nodeVersion.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst NODE_VERSION = core.parseSemver(process.versions.node) ;\nconst NODE_MAJOR = NODE_VERSION.major;\nconst NODE_MINOR = NODE_VERSION.minor;\n\nexports.NODE_MAJOR = NODE_MAJOR;\nexports.NODE_MINOR = NODE_MINOR;\nexports.NODE_VERSION = NODE_VERSION;\n//# sourceMappingURL=nodeVersion.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9ub2RlVmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsb0dBQWM7O0FBRW5DO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0I7QUFDbEIsa0JBQWtCO0FBQ2xCLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFwxXFxEb3dubG9hZHNcXHRhYm9yQWNhZGVteVVwZGF0ZWRcXHRhYm9yLWFjYWRlbXlcXG5vZGVfbW9kdWxlc1xcQHNlbnRyeVxcbm9kZVxcYnVpbGRcXGNqc1xcbm9kZVZlcnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3QgTk9ERV9WRVJTSU9OID0gY29yZS5wYXJzZVNlbXZlcihwcm9jZXNzLnZlcnNpb25zLm5vZGUpIDtcbmNvbnN0IE5PREVfTUFKT1IgPSBOT0RFX1ZFUlNJT04ubWFqb3I7XG5jb25zdCBOT0RFX01JTk9SID0gTk9ERV9WRVJTSU9OLm1pbm9yO1xuXG5leHBvcnRzLk5PREVfTUFKT1IgPSBOT0RFX01BSk9SO1xuZXhwb3J0cy5OT0RFX01JTk9SID0gTk9ERV9NSU5PUjtcbmV4cG9ydHMuTk9ERV9WRVJTSU9OID0gTk9ERV9WRVJTSU9OO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9kZVZlcnNpb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/nodeVersion.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/otel/contextManager.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('Object.defineProperty(exports, Symbol.toStringTag, { value: \'Module\' });\n\nconst contextAsyncHooks = __webpack_require__(/*! @opentelemetry/context-async-hooks */ "(ssr)/./node_modules/@opentelemetry/context-async-hooks/build/src/index.js");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ "(ssr)/./node_modules/@sentry/opentelemetry/build/cjs/index.js");\n\n/**\n * This is a custom ContextManager for OpenTelemetry, which extends the default AsyncLocalStorageContextManager.\n * It ensures that we create a new hub per context, so that the OTEL Context & the Sentry Scopes are always in sync.\n *\n * Note that we currently only support AsyncHooks with this,\n * but since this should work for Node 14+ anyhow that should be good enough.\n */\nconst SentryContextManager = opentelemetry.wrapContextManagerClass(contextAsyncHooks.AsyncLocalStorageContextManager);\n\nexports.SentryContextManager = SentryContextManager;\n//# sourceMappingURL=contextManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9vdGVsL2NvbnRleHRNYW5hZ2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLDBCQUEwQixtQkFBTyxDQUFDLHNIQUFvQztBQUN0RSxzQkFBc0IsbUJBQU8sQ0FBQyw0RkFBdUI7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAc2VudHJ5XFxub2RlXFxidWlsZFxcY2pzXFxvdGVsXFxjb250ZXh0TWFuYWdlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29udGV4dEFzeW5jSG9va3MgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9jb250ZXh0LWFzeW5jLWhvb2tzJyk7XG5jb25zdCBvcGVudGVsZW1ldHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9vcGVudGVsZW1ldHJ5Jyk7XG5cbi8qKlxuICogVGhpcyBpcyBhIGN1c3RvbSBDb250ZXh0TWFuYWdlciBmb3IgT3BlblRlbGVtZXRyeSwgd2hpY2ggZXh0ZW5kcyB0aGUgZGVmYXVsdCBBc3luY0xvY2FsU3RvcmFnZUNvbnRleHRNYW5hZ2VyLlxuICogSXQgZW5zdXJlcyB0aGF0IHdlIGNyZWF0ZSBhIG5ldyBodWIgcGVyIGNvbnRleHQsIHNvIHRoYXQgdGhlIE9URUwgQ29udGV4dCAmIHRoZSBTZW50cnkgU2NvcGVzIGFyZSBhbHdheXMgaW4gc3luYy5cbiAqXG4gKiBOb3RlIHRoYXQgd2UgY3VycmVudGx5IG9ubHkgc3VwcG9ydCBBc3luY0hvb2tzIHdpdGggdGhpcyxcbiAqIGJ1dCBzaW5jZSB0aGlzIHNob3VsZCB3b3JrIGZvciBOb2RlIDE0KyBhbnlob3cgdGhhdCBzaG91bGQgYmUgZ29vZCBlbm91Z2guXG4gKi9cbmNvbnN0IFNlbnRyeUNvbnRleHRNYW5hZ2VyID0gb3BlbnRlbGVtZXRyeS53cmFwQ29udGV4dE1hbmFnZXJDbGFzcyhjb250ZXh0QXN5bmNIb29rcy5Bc3luY0xvY2FsU3RvcmFnZUNvbnRleHRNYW5hZ2VyKTtcblxuZXhwb3J0cy5TZW50cnlDb250ZXh0TWFuYWdlciA9IFNlbnRyeUNvbnRleHRNYW5hZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGV4dE1hbmFnZXIuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/otel/contextManager.js\n')},"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\n\n/** Exported only for tests. */\nconst INSTRUMENTED = {};\n\n/**\n * Instrument an OpenTelemetry instrumentation once.\n * This will skip running instrumentation again if it was already instrumented.\n */\nfunction generateInstrumentOnce(\n  name,\n  creatorOrClass,\n  optionsCallback,\n) {\n  if (optionsCallback) {\n    return _generateInstrumentOnceWithOptions(\n      name,\n      creatorOrClass ,\n      optionsCallback,\n    );\n  }\n\n  return _generateInstrumentOnce(name, creatorOrClass );\n}\n\n// The plain version without handling of options\n// Should not be used with custom options that are mutated in the creator!\nfunction _generateInstrumentOnce(\n  name,\n  creator,\n) {\n  return Object.assign(\n    (options) => {\n      const instrumented = INSTRUMENTED[name] ;\n      if (instrumented) {\n        // If options are provided, ensure we update them\n        if (options) {\n          instrumented.setConfig(options);\n        }\n        return instrumented;\n      }\n\n      const instrumentation$1 = creator(options);\n      INSTRUMENTED[name] = instrumentation$1;\n\n      instrumentation.registerInstrumentations({\n        instrumentations: [instrumentation$1],\n      });\n\n      return instrumentation$1;\n    },\n    { id: name },\n  );\n}\n\n// This version handles options properly\nfunction _generateInstrumentOnceWithOptions\n\n(\n  name,\n  instrumentationClass,\n  optionsCallback,\n) {\n  return Object.assign(\n    (_options) => {\n      const options = optionsCallback(_options);\n\n      const instrumented = INSTRUMENTED[name] ;\n      if (instrumented) {\n        // Ensure we update options\n        instrumented.setConfig(options);\n        return instrumented;\n      }\n\n      const instrumentation$1 = new instrumentationClass(options) ;\n      INSTRUMENTED[name] = instrumentation$1;\n\n      instrumentation.registerInstrumentations({\n        instrumentations: [instrumentation$1],\n      });\n\n      return instrumentation$1;\n    },\n    { id: name },\n  );\n}\n\n/**\n * Ensure a given callback is called when the instrumentation is actually wrapping something.\n * This can be used to ensure some logic is only called when the instrumentation is actually active.\n *\n * This function returns a function that can be invoked with a callback.\n * This callback will either be invoked immediately\n * (e.g. if the instrumentation was already wrapped, or if _wrap could not be patched),\n * or once the instrumentation is actually wrapping something.\n *\n * Make sure to call this function right after adding the instrumentation, otherwise it may be too late!\n * The returned callback can be used any time, and also multiple times.\n */\nfunction instrumentWhenWrapped(instrumentation) {\n  let isWrapped = false;\n  let callbacks = [];\n\n  if (!hasWrap(instrumentation)) {\n    isWrapped = true;\n  } else {\n    const originalWrap = instrumentation['_wrap'];\n\n    instrumentation['_wrap'] = (...args) => {\n      isWrapped = true;\n      callbacks.forEach(callback => callback());\n      callbacks = [];\n      return originalWrap(...args);\n    };\n  }\n\n  const registerCallback = (callback) => {\n    if (isWrapped) {\n      callback();\n    } else {\n      callbacks.push(callback);\n    }\n  };\n\n  return registerCallback;\n}\n\nfunction hasWrap(\n  instrumentation,\n) {\n  return typeof (instrumentation )['_wrap'] === 'function';\n}\n\nexports.INSTRUMENTED = INSTRUMENTED;\nexports.generateInstrumentOnce = generateInstrumentOnce;\nexports.instrumentWhenWrapped = instrumentWhenWrapped;\n//# sourceMappingURL=instrument.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9vdGVsL2luc3RydW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsd0JBQXdCLG1CQUFPLENBQUMsOEdBQWdDOztBQUVoRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBLEtBQUs7QUFDTCxNQUFNLFVBQVU7QUFDaEI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQSxLQUFLO0FBQ0wsTUFBTSxVQUFVO0FBQ2hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CO0FBQ3BCLDhCQUE4QjtBQUM5Qiw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXG90ZWxcXGluc3RydW1lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbicpO1xuXG4vKiogRXhwb3J0ZWQgb25seSBmb3IgdGVzdHMuICovXG5jb25zdCBJTlNUUlVNRU5URUQgPSB7fTtcblxuLyoqXG4gKiBJbnN0cnVtZW50IGFuIE9wZW5UZWxlbWV0cnkgaW5zdHJ1bWVudGF0aW9uIG9uY2UuXG4gKiBUaGlzIHdpbGwgc2tpcCBydW5uaW5nIGluc3RydW1lbnRhdGlvbiBhZ2FpbiBpZiBpdCB3YXMgYWxyZWFkeSBpbnN0cnVtZW50ZWQuXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIG5hbWUsXG4gIGNyZWF0b3JPckNsYXNzLFxuICBvcHRpb25zQ2FsbGJhY2ssXG4pIHtcbiAgaWYgKG9wdGlvbnNDYWxsYmFjaykge1xuICAgIHJldHVybiBfZ2VuZXJhdGVJbnN0cnVtZW50T25jZVdpdGhPcHRpb25zKFxuICAgICAgbmFtZSxcbiAgICAgIGNyZWF0b3JPckNsYXNzICxcbiAgICAgIG9wdGlvbnNDYWxsYmFjayxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIF9nZW5lcmF0ZUluc3RydW1lbnRPbmNlKG5hbWUsIGNyZWF0b3JPckNsYXNzICk7XG59XG5cbi8vIFRoZSBwbGFpbiB2ZXJzaW9uIHdpdGhvdXQgaGFuZGxpbmcgb2Ygb3B0aW9uc1xuLy8gU2hvdWxkIG5vdCBiZSB1c2VkIHdpdGggY3VzdG9tIG9wdGlvbnMgdGhhdCBhcmUgbXV0YXRlZCBpbiB0aGUgY3JlYXRvciFcbmZ1bmN0aW9uIF9nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBuYW1lLFxuICBjcmVhdG9yLFxuKSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKFxuICAgIChvcHRpb25zKSA9PiB7XG4gICAgICBjb25zdCBpbnN0cnVtZW50ZWQgPSBJTlNUUlVNRU5URURbbmFtZV0gO1xuICAgICAgaWYgKGluc3RydW1lbnRlZCkge1xuICAgICAgICAvLyBJZiBvcHRpb25zIGFyZSBwcm92aWRlZCwgZW5zdXJlIHdlIHVwZGF0ZSB0aGVtXG4gICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgaW5zdHJ1bWVudGVkLnNldENvbmZpZyhvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5zdHJ1bWVudGVkO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpbnN0cnVtZW50YXRpb24kMSA9IGNyZWF0b3Iob3B0aW9ucyk7XG4gICAgICBJTlNUUlVNRU5URURbbmFtZV0gPSBpbnN0cnVtZW50YXRpb24kMTtcblxuICAgICAgaW5zdHJ1bWVudGF0aW9uLnJlZ2lzdGVySW5zdHJ1bWVudGF0aW9ucyh7XG4gICAgICAgIGluc3RydW1lbnRhdGlvbnM6IFtpbnN0cnVtZW50YXRpb24kMV0sXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGluc3RydW1lbnRhdGlvbiQxO1xuICAgIH0sXG4gICAgeyBpZDogbmFtZSB9LFxuICApO1xufVxuXG4vLyBUaGlzIHZlcnNpb24gaGFuZGxlcyBvcHRpb25zIHByb3Blcmx5XG5mdW5jdGlvbiBfZ2VuZXJhdGVJbnN0cnVtZW50T25jZVdpdGhPcHRpb25zXG5cbihcbiAgbmFtZSxcbiAgaW5zdHJ1bWVudGF0aW9uQ2xhc3MsXG4gIG9wdGlvbnNDYWxsYmFjayxcbikge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihcbiAgICAoX29wdGlvbnMpID0+IHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25zQ2FsbGJhY2soX29wdGlvbnMpO1xuXG4gICAgICBjb25zdCBpbnN0cnVtZW50ZWQgPSBJTlNUUlVNRU5URURbbmFtZV0gO1xuICAgICAgaWYgKGluc3RydW1lbnRlZCkge1xuICAgICAgICAvLyBFbnN1cmUgd2UgdXBkYXRlIG9wdGlvbnNcbiAgICAgICAgaW5zdHJ1bWVudGVkLnNldENvbmZpZyhvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIGluc3RydW1lbnRlZDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uJDEgPSBuZXcgaW5zdHJ1bWVudGF0aW9uQ2xhc3Mob3B0aW9ucykgO1xuICAgICAgSU5TVFJVTUVOVEVEW25hbWVdID0gaW5zdHJ1bWVudGF0aW9uJDE7XG5cbiAgICAgIGluc3RydW1lbnRhdGlvbi5yZWdpc3Rlckluc3RydW1lbnRhdGlvbnMoe1xuICAgICAgICBpbnN0cnVtZW50YXRpb25zOiBbaW5zdHJ1bWVudGF0aW9uJDFdLFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBpbnN0cnVtZW50YXRpb24kMTtcbiAgICB9LFxuICAgIHsgaWQ6IG5hbWUgfSxcbiAgKTtcbn1cblxuLyoqXG4gKiBFbnN1cmUgYSBnaXZlbiBjYWxsYmFjayBpcyBjYWxsZWQgd2hlbiB0aGUgaW5zdHJ1bWVudGF0aW9uIGlzIGFjdHVhbGx5IHdyYXBwaW5nIHNvbWV0aGluZy5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gZW5zdXJlIHNvbWUgbG9naWMgaXMgb25seSBjYWxsZWQgd2hlbiB0aGUgaW5zdHJ1bWVudGF0aW9uIGlzIGFjdHVhbGx5IGFjdGl2ZS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNhbiBiZSBpbnZva2VkIHdpdGggYSBjYWxsYmFjay5cbiAqIFRoaXMgY2FsbGJhY2sgd2lsbCBlaXRoZXIgYmUgaW52b2tlZCBpbW1lZGlhdGVseVxuICogKGUuZy4gaWYgdGhlIGluc3RydW1lbnRhdGlvbiB3YXMgYWxyZWFkeSB3cmFwcGVkLCBvciBpZiBfd3JhcCBjb3VsZCBub3QgYmUgcGF0Y2hlZCksXG4gKiBvciBvbmNlIHRoZSBpbnN0cnVtZW50YXRpb24gaXMgYWN0dWFsbHkgd3JhcHBpbmcgc29tZXRoaW5nLlxuICpcbiAqIE1ha2Ugc3VyZSB0byBjYWxsIHRoaXMgZnVuY3Rpb24gcmlnaHQgYWZ0ZXIgYWRkaW5nIHRoZSBpbnN0cnVtZW50YXRpb24sIG90aGVyd2lzZSBpdCBtYXkgYmUgdG9vIGxhdGUhXG4gKiBUaGUgcmV0dXJuZWQgY2FsbGJhY2sgY2FuIGJlIHVzZWQgYW55IHRpbWUsIGFuZCBhbHNvIG11bHRpcGxlIHRpbWVzLlxuICovXG5mdW5jdGlvbiBpbnN0cnVtZW50V2hlbldyYXBwZWQoaW5zdHJ1bWVudGF0aW9uKSB7XG4gIGxldCBpc1dyYXBwZWQgPSBmYWxzZTtcbiAgbGV0IGNhbGxiYWNrcyA9IFtdO1xuXG4gIGlmICghaGFzV3JhcChpbnN0cnVtZW50YXRpb24pKSB7XG4gICAgaXNXcmFwcGVkID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBvcmlnaW5hbFdyYXAgPSBpbnN0cnVtZW50YXRpb25bJ193cmFwJ107XG5cbiAgICBpbnN0cnVtZW50YXRpb25bJ193cmFwJ10gPSAoLi4uYXJncykgPT4ge1xuICAgICAgaXNXcmFwcGVkID0gdHJ1ZTtcbiAgICAgIGNhbGxiYWNrcy5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKCkpO1xuICAgICAgY2FsbGJhY2tzID0gW107XG4gICAgICByZXR1cm4gb3JpZ2luYWxXcmFwKC4uLmFyZ3MpO1xuICAgIH07XG4gIH1cblxuICBjb25zdCByZWdpc3RlckNhbGxiYWNrID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgaWYgKGlzV3JhcHBlZCkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gcmVnaXN0ZXJDYWxsYmFjaztcbn1cblxuZnVuY3Rpb24gaGFzV3JhcChcbiAgaW5zdHJ1bWVudGF0aW9uLFxuKSB7XG4gIHJldHVybiB0eXBlb2YgKGluc3RydW1lbnRhdGlvbiApWydfd3JhcCddID09PSAnZnVuY3Rpb24nO1xufVxuXG5leHBvcnRzLklOU1RSVU1FTlRFRCA9IElOU1RSVU1FTlRFRDtcbmV4cG9ydHMuZ2VuZXJhdGVJbnN0cnVtZW50T25jZSA9IGdlbmVyYXRlSW5zdHJ1bWVudE9uY2U7XG5leHBvcnRzLmluc3RydW1lbnRXaGVuV3JhcHBlZCA9IGluc3RydW1lbnRXaGVuV3JhcHBlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc3RydW1lbnQuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/proxy/base.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\n__webpack_require__(/*! node:https */ \"node:https\");\n\n/**\n * This code was originally forked from https://github.com/TooTallNate/proxy-agents/tree/b133295fd16f6475578b6b15bd9b4e33ecb0d0b7\n * With the following LICENSE:\n *\n * (The MIT License)\n *\n * Copyright (c) 2013 Nathan Rajlich <nathan@tootallnate.net>*\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:*\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.*\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n\nconst INTERNAL = Symbol('AgentBaseInternalState');\n\nclass Agent extends http.Agent {\n\n  // Set by `http.Agent` - missing from `@types/node`\n\n  constructor(opts) {\n    super(opts);\n    this[INTERNAL] = {};\n  }\n\n  /**\n   * Determine whether this is an `http` or `https` request.\n   */\n  isSecureEndpoint(options) {\n    if (options) {\n      // First check the `secureEndpoint` property explicitly, since this\n      // means that a parent `Agent` is \"passing through\" to this instance.\n      if (typeof (options ).secureEndpoint === 'boolean') {\n        return options.secureEndpoint;\n      }\n\n      // If no explicit `secure` endpoint, check if `protocol` property is\n      // set. This will usually be the case since using a full string URL\n      // or `URL` instance should be the most common usage.\n      if (typeof options.protocol === 'string') {\n        return options.protocol === 'https:';\n      }\n    }\n\n    // Finally, if no `protocol` property was set, then fall back to\n    // checking the stack trace of the current call stack, and try to\n    // detect the \"https\" module.\n    const { stack } = new Error();\n    if (typeof stack !== 'string') return false;\n    return stack.split('\\n').some(l => l.indexOf('(https.js:') !== -1 || l.indexOf('node:https:') !== -1);\n  }\n\n  createSocket(req, options, cb) {\n    const connectOpts = {\n      ...options,\n      secureEndpoint: this.isSecureEndpoint(options),\n    };\n    Promise.resolve()\n      .then(() => this.connect(req, connectOpts))\n      .then(socket => {\n        if (socket instanceof http.Agent) {\n          // @ts-expect-error `addRequest()` isn't defined in `@types/node`\n          return socket.addRequest(req, connectOpts);\n        }\n        this[INTERNAL].currentSocket = socket;\n        // @ts-expect-error `createSocket()` isn't defined in `@types/node`\n        super.createSocket(req, options, cb);\n      }, cb);\n  }\n\n  createConnection() {\n    const socket = this[INTERNAL].currentSocket;\n    this[INTERNAL].currentSocket = undefined;\n    if (!socket) {\n      throw new Error('No socket was returned in the `connect()` function');\n    }\n    return socket;\n  }\n\n  get defaultPort() {\n    return this[INTERNAL].defaultPort ?? (this.protocol === 'https:' ? 443 : 80);\n  }\n\n  set defaultPort(v) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].defaultPort = v;\n    }\n  }\n\n  get protocol() {\n    return this[INTERNAL].protocol ?? (this.isSecureEndpoint() ? 'https:' : 'http:');\n  }\n\n  set protocol(v) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].protocol = v;\n    }\n  }\n}\n\nexports.Agent = Agent;\n//# sourceMappingURL=base.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9wcm94eS9iYXNlLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyw0QkFBVztBQUNoQyxtQkFBTyxDQUFDLDhCQUFZOztBQUVwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxhQUFhO0FBQ2IiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXHByb3h5XFxiYXNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBodHRwID0gcmVxdWlyZSgnbm9kZTpodHRwJyk7XG5yZXF1aXJlKCdub2RlOmh0dHBzJyk7XG5cbi8qKlxuICogVGhpcyBjb2RlIHdhcyBvcmlnaW5hbGx5IGZvcmtlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9Ub29UYWxsTmF0ZS9wcm94eS1hZ2VudHMvdHJlZS9iMTMzMjk1ZmQxNmY2NDc1NTc4YjZiMTViZDliNGUzM2VjYjBkMGI3XG4gKiBXaXRoIHRoZSBmb2xsb3dpbmcgTElDRU5TRTpcbiAqXG4gKiAoVGhlIE1JVCBMaWNlbnNlKVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMyBOYXRoYW4gUmFqbGljaCA8bmF0aGFuQHRvb3RhbGxuYXRlLm5ldD4qXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nXG4gKiBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbiAqICdTb2Z0d2FyZScpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbiAqIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbiAqIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xuICogcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG4gKiB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6KlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4qXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0ZcbiAqIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC5cbiAqIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZXG4gKiBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULFxuICogVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEVcbiAqIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICovXG5cblxuY29uc3QgSU5URVJOQUwgPSBTeW1ib2woJ0FnZW50QmFzZUludGVybmFsU3RhdGUnKTtcblxuY2xhc3MgQWdlbnQgZXh0ZW5kcyBodHRwLkFnZW50IHtcblxuICAvLyBTZXQgYnkgYGh0dHAuQWdlbnRgIC0gbWlzc2luZyBmcm9tIGBAdHlwZXMvbm9kZWBcblxuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpc1tJTlRFUk5BTF0gPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgd2hldGhlciB0aGlzIGlzIGFuIGBodHRwYCBvciBgaHR0cHNgIHJlcXVlc3QuXG4gICAqL1xuICBpc1NlY3VyZUVuZHBvaW50KG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgLy8gRmlyc3QgY2hlY2sgdGhlIGBzZWN1cmVFbmRwb2ludGAgcHJvcGVydHkgZXhwbGljaXRseSwgc2luY2UgdGhpc1xuICAgICAgLy8gbWVhbnMgdGhhdCBhIHBhcmVudCBgQWdlbnRgIGlzIFwicGFzc2luZyB0aHJvdWdoXCIgdG8gdGhpcyBpbnN0YW5jZS5cbiAgICAgIGlmICh0eXBlb2YgKG9wdGlvbnMgKS5zZWN1cmVFbmRwb2ludCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLnNlY3VyZUVuZHBvaW50O1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBubyBleHBsaWNpdCBgc2VjdXJlYCBlbmRwb2ludCwgY2hlY2sgaWYgYHByb3RvY29sYCBwcm9wZXJ0eSBpc1xuICAgICAgLy8gc2V0LiBUaGlzIHdpbGwgdXN1YWxseSBiZSB0aGUgY2FzZSBzaW5jZSB1c2luZyBhIGZ1bGwgc3RyaW5nIFVSTFxuICAgICAgLy8gb3IgYFVSTGAgaW5zdGFuY2Ugc2hvdWxkIGJlIHRoZSBtb3N0IGNvbW1vbiB1c2FnZS5cbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5wcm90b2NvbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMucHJvdG9jb2wgPT09ICdodHRwczonO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbmFsbHksIGlmIG5vIGBwcm90b2NvbGAgcHJvcGVydHkgd2FzIHNldCwgdGhlbiBmYWxsIGJhY2sgdG9cbiAgICAvLyBjaGVja2luZyB0aGUgc3RhY2sgdHJhY2Ugb2YgdGhlIGN1cnJlbnQgY2FsbCBzdGFjaywgYW5kIHRyeSB0b1xuICAgIC8vIGRldGVjdCB0aGUgXCJodHRwc1wiIG1vZHVsZS5cbiAgICBjb25zdCB7IHN0YWNrIH0gPSBuZXcgRXJyb3IoKTtcbiAgICBpZiAodHlwZW9mIHN0YWNrICE9PSAnc3RyaW5nJykgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBzdGFjay5zcGxpdCgnXFxuJykuc29tZShsID0+IGwuaW5kZXhPZignKGh0dHBzLmpzOicpICE9PSAtMSB8fCBsLmluZGV4T2YoJ25vZGU6aHR0cHM6JykgIT09IC0xKTtcbiAgfVxuXG4gIGNyZWF0ZVNvY2tldChyZXEsIG9wdGlvbnMsIGNiKSB7XG4gICAgY29uc3QgY29ubmVjdE9wdHMgPSB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgc2VjdXJlRW5kcG9pbnQ6IHRoaXMuaXNTZWN1cmVFbmRwb2ludChvcHRpb25zKSxcbiAgICB9O1xuICAgIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAudGhlbigoKSA9PiB0aGlzLmNvbm5lY3QocmVxLCBjb25uZWN0T3B0cykpXG4gICAgICAudGhlbihzb2NrZXQgPT4ge1xuICAgICAgICBpZiAoc29ja2V0IGluc3RhbmNlb2YgaHR0cC5BZ2VudCkge1xuICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYGFkZFJlcXVlc3QoKWAgaXNuJ3QgZGVmaW5lZCBpbiBgQHR5cGVzL25vZGVgXG4gICAgICAgICAgcmV0dXJuIHNvY2tldC5hZGRSZXF1ZXN0KHJlcSwgY29ubmVjdE9wdHMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNbSU5URVJOQUxdLmN1cnJlbnRTb2NrZXQgPSBzb2NrZXQ7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYGNyZWF0ZVNvY2tldCgpYCBpc24ndCBkZWZpbmVkIGluIGBAdHlwZXMvbm9kZWBcbiAgICAgICAgc3VwZXIuY3JlYXRlU29ja2V0KHJlcSwgb3B0aW9ucywgY2IpO1xuICAgICAgfSwgY2IpO1xuICB9XG5cbiAgY3JlYXRlQ29ubmVjdGlvbigpIHtcbiAgICBjb25zdCBzb2NrZXQgPSB0aGlzW0lOVEVSTkFMXS5jdXJyZW50U29ja2V0O1xuICAgIHRoaXNbSU5URVJOQUxdLmN1cnJlbnRTb2NrZXQgPSB1bmRlZmluZWQ7XG4gICAgaWYgKCFzb2NrZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gc29ja2V0IHdhcyByZXR1cm5lZCBpbiB0aGUgYGNvbm5lY3QoKWAgZnVuY3Rpb24nKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvY2tldDtcbiAgfVxuXG4gIGdldCBkZWZhdWx0UG9ydCgpIHtcbiAgICByZXR1cm4gdGhpc1tJTlRFUk5BTF0uZGVmYXVsdFBvcnQgPz8gKHRoaXMucHJvdG9jb2wgPT09ICdodHRwczonID8gNDQzIDogODApO1xuICB9XG5cbiAgc2V0IGRlZmF1bHRQb3J0KHYpIHtcbiAgICBpZiAodGhpc1tJTlRFUk5BTF0pIHtcbiAgICAgIHRoaXNbSU5URVJOQUxdLmRlZmF1bHRQb3J0ID0gdjtcbiAgICB9XG4gIH1cblxuICBnZXQgcHJvdG9jb2woKSB7XG4gICAgcmV0dXJuIHRoaXNbSU5URVJOQUxdLnByb3RvY29sID8/ICh0aGlzLmlzU2VjdXJlRW5kcG9pbnQoKSA/ICdodHRwczonIDogJ2h0dHA6Jyk7XG4gIH1cblxuICBzZXQgcHJvdG9jb2wodikge1xuICAgIGlmICh0aGlzW0lOVEVSTkFMXSkge1xuICAgICAgdGhpc1tJTlRFUk5BTF0ucHJvdG9jb2wgPSB2O1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnRzLkFnZW50ID0gQWdlbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/proxy/base.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/proxy/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"buffer\")[\"Buffer\"];\nObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst net = __webpack_require__(/*! node:net */ \"node:net\");\nconst tls = __webpack_require__(/*! node:tls */ \"node:tls\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst base = __webpack_require__(/*! ./base.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/proxy/base.js\");\nconst parseProxyResponse = __webpack_require__(/*! ./parse-proxy-response.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js\");\n\nfunction debug(...args) {\n  core.logger.log('[https-proxy-agent]', ...args);\n}\n\n/**\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to\n * the specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\n *\n * Outgoing HTTP requests are first tunneled through the proxy server using the\n * `CONNECT` HTTP request method to establish a connection to the proxy server,\n * and then the proxy server connects to the destination target and issues the\n * HTTP request from the proxy server.\n *\n * `https:` requests have their socket connection upgraded to TLS once\n * the connection to the proxy server has been established.\n */\nclass HttpsProxyAgent extends base.Agent {\n  static __initStatic() {this.protocols = ['http', 'https']; }\n\n  constructor(proxy, opts) {\n    super(opts);\n    this.options = {};\n    this.proxy = typeof proxy === 'string' ? new URL(proxy) : proxy;\n    this.proxyHeaders = opts?.headers ?? {};\n    debug('Creating new HttpsProxyAgent instance: %o', this.proxy.href);\n\n    // Trim off the brackets from IPv6 addresses\n    const host = (this.proxy.hostname || this.proxy.host).replace(/^\\[|\\]$/g, '');\n    const port = this.proxy.port ? parseInt(this.proxy.port, 10) : this.proxy.protocol === 'https:' ? 443 : 80;\n    this.connectOpts = {\n      // Attempt to negotiate http/1.1 for proxy servers that support http/2\n      ALPNProtocols: ['http/1.1'],\n      ...(opts ? omit(opts, 'headers') : null),\n      host,\n      port,\n    };\n  }\n\n  /**\n   * Called when the node-core HTTP client library is creating a\n   * new HTTP request.\n   */\n  async connect(req, opts) {\n    const { proxy } = this;\n\n    if (!opts.host) {\n      throw new TypeError('No \"host\" provided');\n    }\n\n    // Create a socket connection to the proxy server.\n    let socket;\n    if (proxy.protocol === 'https:') {\n      debug('Creating `tls.Socket`: %o', this.connectOpts);\n      const servername = this.connectOpts.servername || this.connectOpts.host;\n      socket = tls.connect({\n        ...this.connectOpts,\n        servername: servername && net.isIP(servername) ? undefined : servername,\n      });\n    } else {\n      debug('Creating `net.Socket`: %o', this.connectOpts);\n      socket = net.connect(this.connectOpts);\n    }\n\n    const headers =\n      typeof this.proxyHeaders === 'function' ? this.proxyHeaders() : { ...this.proxyHeaders };\n    const host = net.isIPv6(opts.host) ? `[${opts.host}]` : opts.host;\n    let payload = `CONNECT ${host}:${opts.port} HTTP/1.1\\r\\n`;\n\n    // Inject the `Proxy-Authorization` header if necessary.\n    if (proxy.username || proxy.password) {\n      const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;\n      headers['Proxy-Authorization'] = `Basic ${Buffer.from(auth).toString('base64')}`;\n    }\n\n    headers.Host = `${host}:${opts.port}`;\n\n    if (!headers['Proxy-Connection']) {\n      headers['Proxy-Connection'] = this.keepAlive ? 'Keep-Alive' : 'close';\n    }\n    for (const name of Object.keys(headers)) {\n      payload += `${name}: ${headers[name]}\\r\\n`;\n    }\n\n    const proxyResponsePromise = parseProxyResponse.parseProxyResponse(socket);\n\n    socket.write(`${payload}\\r\\n`);\n\n    const { connect, buffered } = await proxyResponsePromise;\n    req.emit('proxyConnect', connect);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore Not EventEmitter in Node types\n    this.emit('proxyConnect', connect, req);\n\n    if (connect.statusCode === 200) {\n      req.once('socket', resume);\n\n      if (opts.secureEndpoint) {\n        // The proxy is connecting to a TLS server, so upgrade\n        // this socket connection to a TLS connection.\n        debug('Upgrading socket connection to TLS');\n        const servername = opts.servername || opts.host;\n        return tls.connect({\n          ...omit(opts, 'host', 'path', 'port'),\n          socket,\n          servername: net.isIP(servername) ? undefined : servername,\n        });\n      }\n\n      return socket;\n    }\n\n    // Some other status code that's not 200... need to re-play the HTTP\n    // header \"data\" events onto the socket once the HTTP machinery is\n    // attached so that the node core `http` can parse and handle the\n    // error status code.\n\n    // Close the original socket, and a new \"fake\" socket is returned\n    // instead, so that the proxy doesn't get the HTTP request\n    // written to it (which may contain `Authorization` headers or other\n    // sensitive data).\n    //\n    // See: https://hackerone.com/reports/541502\n    socket.destroy();\n\n    const fakeSocket = new net.Socket({ writable: false });\n    fakeSocket.readable = true;\n\n    // Need to wait for the \"socket\" event to re-play the \"data\" events.\n    req.once('socket', (s) => {\n      debug('Replaying proxy buffer for failed request');\n      // Replay the \"buffered\" Buffer onto the fake `socket`, since at\n      // this point the HTTP module machinery has been hooked up for\n      // the user.\n      s.push(buffered);\n      s.push(null);\n    });\n\n    return fakeSocket;\n  }\n} HttpsProxyAgent.__initStatic();\n\nfunction resume(socket) {\n  socket.resume();\n}\n\nfunction omit(\n  obj,\n  ...keys\n)\n\n {\n  const ret = {}\n\n;\n  let key;\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      ret[key] = obj[key];\n    }\n  }\n  return ret;\n}\n\nexports.HttpsProxyAgent = HttpsProxyAgent;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/proxy/index.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"buffer\")[\"Buffer\"];\nObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\n\nfunction debug(...args) {\n  core.logger.log('[https-proxy-agent:parse-proxy-response]', ...args);\n}\n\nfunction parseProxyResponse(socket) {\n  return new Promise((resolve, reject) => {\n    // we need to buffer any HTTP traffic that happens with the proxy before we get\n    // the CONNECT response, so that if the response is anything other than an \"200\"\n    // response code, then we can re-play the \"data\" events on the socket once the\n    // HTTP parser is hooked up...\n    let buffersLength = 0;\n    const buffers = [];\n\n    function read() {\n      const b = socket.read();\n      if (b) ondata(b);\n      else socket.once('readable', read);\n    }\n\n    function cleanup() {\n      socket.removeListener('end', onend);\n      socket.removeListener('error', onerror);\n      socket.removeListener('readable', read);\n    }\n\n    function onend() {\n      cleanup();\n      debug('onend');\n      reject(new Error('Proxy connection ended before receiving CONNECT response'));\n    }\n\n    function onerror(err) {\n      cleanup();\n      debug('onerror %o', err);\n      reject(err);\n    }\n\n    function ondata(b) {\n      buffers.push(b);\n      buffersLength += b.length;\n\n      const buffered = Buffer.concat(buffers, buffersLength);\n      const endOfHeaders = buffered.indexOf('\\r\\n\\r\\n');\n\n      if (endOfHeaders === -1) {\n        // keep buffering\n        debug('have not received end of HTTP headers yet...');\n        read();\n        return;\n      }\n\n      const headerParts = buffered.subarray(0, endOfHeaders).toString('ascii').split('\\r\\n');\n      const firstLine = headerParts.shift();\n      if (!firstLine) {\n        socket.destroy();\n        return reject(new Error('No header received from proxy CONNECT response'));\n      }\n      const firstLineParts = firstLine.split(' ');\n      const statusCode = +(firstLineParts[1] || 0);\n      const statusText = firstLineParts.slice(2).join(' ');\n      const headers = {};\n      for (const header of headerParts) {\n        if (!header) continue;\n        const firstColon = header.indexOf(':');\n        if (firstColon === -1) {\n          socket.destroy();\n          return reject(new Error(`Invalid header from proxy CONNECT response: \"${header}\"`));\n        }\n        const key = header.slice(0, firstColon).toLowerCase();\n        const value = header.slice(firstColon + 1).trimStart();\n        const current = headers[key];\n        if (typeof current === 'string') {\n          headers[key] = [current, value];\n        } else if (Array.isArray(current)) {\n          current.push(value);\n        } else {\n          headers[key] = value;\n        }\n      }\n      debug('got proxy server response: %o %o', firstLine, headers);\n      cleanup();\n      resolve({\n        connect: {\n          statusCode,\n          statusText,\n          headers,\n        },\n        buffered,\n      });\n    }\n\n    socket.on('error', onerror);\n    socket.on('end', onend);\n\n    read();\n  });\n}\n\nexports.parseProxyResponse = parseProxyResponse;\n//# sourceMappingURL=parse-proxy-response.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9wcm94eS9wYXJzZS1wcm94eS1yZXNwb25zZS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLG9HQUFjOztBQUVuQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUIsTUFBTTtBQUM3Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0ZBQWtGLE9BQU87QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAc2VudHJ5XFxub2RlXFxidWlsZFxcY2pzXFxwcm94eVxccGFyc2UtcHJveHktcmVzcG9uc2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuZnVuY3Rpb24gZGVidWcoLi4uYXJncykge1xuICBjb3JlLmxvZ2dlci5sb2coJ1todHRwcy1wcm94eS1hZ2VudDpwYXJzZS1wcm94eS1yZXNwb25zZV0nLCAuLi5hcmdzKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VQcm94eVJlc3BvbnNlKHNvY2tldCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIC8vIHdlIG5lZWQgdG8gYnVmZmVyIGFueSBIVFRQIHRyYWZmaWMgdGhhdCBoYXBwZW5zIHdpdGggdGhlIHByb3h5IGJlZm9yZSB3ZSBnZXRcbiAgICAvLyB0aGUgQ09OTkVDVCByZXNwb25zZSwgc28gdGhhdCBpZiB0aGUgcmVzcG9uc2UgaXMgYW55dGhpbmcgb3RoZXIgdGhhbiBhbiBcIjIwMFwiXG4gICAgLy8gcmVzcG9uc2UgY29kZSwgdGhlbiB3ZSBjYW4gcmUtcGxheSB0aGUgXCJkYXRhXCIgZXZlbnRzIG9uIHRoZSBzb2NrZXQgb25jZSB0aGVcbiAgICAvLyBIVFRQIHBhcnNlciBpcyBob29rZWQgdXAuLi5cbiAgICBsZXQgYnVmZmVyc0xlbmd0aCA9IDA7XG4gICAgY29uc3QgYnVmZmVycyA9IFtdO1xuXG4gICAgZnVuY3Rpb24gcmVhZCgpIHtcbiAgICAgIGNvbnN0IGIgPSBzb2NrZXQucmVhZCgpO1xuICAgICAgaWYgKGIpIG9uZGF0YShiKTtcbiAgICAgIGVsc2Ugc29ja2V0Lm9uY2UoJ3JlYWRhYmxlJywgcmVhZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgICAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgICAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKCdyZWFkYWJsZScsIHJlYWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgICAgY2xlYW51cCgpO1xuICAgICAgZGVidWcoJ29uZW5kJyk7XG4gICAgICByZWplY3QobmV3IEVycm9yKCdQcm94eSBjb25uZWN0aW9uIGVuZGVkIGJlZm9yZSByZWNlaXZpbmcgQ09OTkVDVCByZXNwb25zZScpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbmVycm9yKGVycikge1xuICAgICAgY2xlYW51cCgpO1xuICAgICAgZGVidWcoJ29uZXJyb3IgJW8nLCBlcnIpO1xuICAgICAgcmVqZWN0KGVycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25kYXRhKGIpIHtcbiAgICAgIGJ1ZmZlcnMucHVzaChiKTtcbiAgICAgIGJ1ZmZlcnNMZW5ndGggKz0gYi5sZW5ndGg7XG5cbiAgICAgIGNvbnN0IGJ1ZmZlcmVkID0gQnVmZmVyLmNvbmNhdChidWZmZXJzLCBidWZmZXJzTGVuZ3RoKTtcbiAgICAgIGNvbnN0IGVuZE9mSGVhZGVycyA9IGJ1ZmZlcmVkLmluZGV4T2YoJ1xcclxcblxcclxcbicpO1xuXG4gICAgICBpZiAoZW5kT2ZIZWFkZXJzID09PSAtMSkge1xuICAgICAgICAvLyBrZWVwIGJ1ZmZlcmluZ1xuICAgICAgICBkZWJ1ZygnaGF2ZSBub3QgcmVjZWl2ZWQgZW5kIG9mIEhUVFAgaGVhZGVycyB5ZXQuLi4nKTtcbiAgICAgICAgcmVhZCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGhlYWRlclBhcnRzID0gYnVmZmVyZWQuc3ViYXJyYXkoMCwgZW5kT2ZIZWFkZXJzKS50b1N0cmluZygnYXNjaWknKS5zcGxpdCgnXFxyXFxuJyk7XG4gICAgICBjb25zdCBmaXJzdExpbmUgPSBoZWFkZXJQYXJ0cy5zaGlmdCgpO1xuICAgICAgaWYgKCFmaXJzdExpbmUpIHtcbiAgICAgICAgc29ja2V0LmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoJ05vIGhlYWRlciByZWNlaXZlZCBmcm9tIHByb3h5IENPTk5FQ1QgcmVzcG9uc2UnKSk7XG4gICAgICB9XG4gICAgICBjb25zdCBmaXJzdExpbmVQYXJ0cyA9IGZpcnN0TGluZS5zcGxpdCgnICcpO1xuICAgICAgY29uc3Qgc3RhdHVzQ29kZSA9ICsoZmlyc3RMaW5lUGFydHNbMV0gfHwgMCk7XG4gICAgICBjb25zdCBzdGF0dXNUZXh0ID0gZmlyc3RMaW5lUGFydHMuc2xpY2UoMikuam9pbignICcpO1xuICAgICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgICAgZm9yIChjb25zdCBoZWFkZXIgb2YgaGVhZGVyUGFydHMpIHtcbiAgICAgICAgaWYgKCFoZWFkZXIpIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBmaXJzdENvbG9uID0gaGVhZGVyLmluZGV4T2YoJzonKTtcbiAgICAgICAgaWYgKGZpcnN0Q29sb24gPT09IC0xKSB7XG4gICAgICAgICAgc29ja2V0LmRlc3Ryb3koKTtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihgSW52YWxpZCBoZWFkZXIgZnJvbSBwcm94eSBDT05ORUNUIHJlc3BvbnNlOiBcIiR7aGVhZGVyfVwiYCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGtleSA9IGhlYWRlci5zbGljZSgwLCBmaXJzdENvbG9uKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGhlYWRlci5zbGljZShmaXJzdENvbG9uICsgMSkudHJpbVN0YXJ0KCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBoZWFkZXJzW2tleV07XG4gICAgICAgIGlmICh0eXBlb2YgY3VycmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBoZWFkZXJzW2tleV0gPSBbY3VycmVudCwgdmFsdWVdO1xuICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY3VycmVudCkpIHtcbiAgICAgICAgICBjdXJyZW50LnB1c2godmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhlYWRlcnNba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkZWJ1ZygnZ290IHByb3h5IHNlcnZlciByZXNwb25zZTogJW8gJW8nLCBmaXJzdExpbmUsIGhlYWRlcnMpO1xuICAgICAgY2xlYW51cCgpO1xuICAgICAgcmVzb2x2ZSh7XG4gICAgICAgIGNvbm5lY3Q6IHtcbiAgICAgICAgICBzdGF0dXNDb2RlLFxuICAgICAgICAgIHN0YXR1c1RleHQsXG4gICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgfSxcbiAgICAgICAgYnVmZmVyZWQsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzb2NrZXQub24oJ2Vycm9yJywgb25lcnJvcik7XG4gICAgc29ja2V0Lm9uKCdlbmQnLCBvbmVuZCk7XG5cbiAgICByZWFkKCk7XG4gIH0pO1xufVxuXG5leHBvcnRzLnBhcnNlUHJveHlSZXNwb25zZSA9IHBhcnNlUHJveHlSZXNwb25zZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlLXByb3h5LXJlc3BvbnNlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js\n")}};