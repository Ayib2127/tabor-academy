exports.id="defaultVendors-_ssr_node_modules_sentry_node_build_cjs_integrations_fs_js-_ssr_node_modules_s-262d27",exports.ids=["defaultVendors-_ssr_node_modules_sentry_node_build_cjs_integrations_fs_js-_ssr_node_modules_s-262d27"],exports.modules={"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/fs.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationFs = __webpack_require__(/*! @opentelemetry/instrumentation-fs */ \"(ssr)/./node_modules/@opentelemetry/instrumentation-fs/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'FileSystem';\n\n/**\n * This integration will create spans for `fs` API operations, like reading and writing files.\n *\n * **WARNING:** This integration may add significant overhead to your application. Especially in scenarios with a lot of\n * file I/O, like for example when running a framework dev server, including this integration can massively slow down\n * your application.\n *\n * @param options Configuration for this integration.\n */\nconst fsIntegration = core.defineIntegration(\n  (\n    options\n\n = {},\n  ) => {\n    return {\n      name: INTEGRATION_NAME,\n      setupOnce() {\n        instrument.generateInstrumentOnce(\n          INTEGRATION_NAME,\n          () =>\n            new instrumentationFs.FsInstrumentation({\n              requireParentSpan: true,\n              endHook(functionName, { args, span, error }) {\n                span.updateName(`fs.${functionName}`);\n\n                span.setAttributes({\n                  [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'file',\n                  [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.file.fs',\n                });\n\n                if (options.recordErrorMessagesAsSpanAttributes) {\n                  if (typeof args[0] === 'string' && FS_OPERATIONS_WITH_PATH_ARG.includes(functionName)) {\n                    span.setAttribute('path_argument', args[0]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_TARGET_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('target_argument', args[0]);\n                    span.setAttribute('path_argument', args[1]);\n                  } else if (typeof args[0] === 'string' && FS_OPERATIONS_WITH_PREFIX.includes(functionName)) {\n                    span.setAttribute('prefix_argument', args[0]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_EXISTING_PATH_NEW_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('existing_path_argument', args[0]);\n                    span.setAttribute('new_path_argument', args[1]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_SRC_DEST.includes(functionName)\n                  ) {\n                    span.setAttribute('src_argument', args[0]);\n                    span.setAttribute('dest_argument', args[1]);\n                  } else if (\n                    typeof args[0] === 'string' &&\n                    typeof args[1] === 'string' &&\n                    FS_OPERATIONS_WITH_OLD_PATH_NEW_PATH.includes(functionName)\n                  ) {\n                    span.setAttribute('old_path_argument', args[0]);\n                    span.setAttribute('new_path_argument', args[1]);\n                  }\n                }\n\n                if (error && options.recordErrorMessagesAsSpanAttributes) {\n                  span.setAttribute('fs_error', error.message);\n                }\n              },\n            }),\n        )();\n      },\n    };\n  },\n);\n\nconst FS_OPERATIONS_WITH_OLD_PATH_NEW_PATH = ['rename', 'renameSync'];\nconst FS_OPERATIONS_WITH_SRC_DEST = ['copyFile', 'cp', 'copyFileSync', 'cpSync'];\nconst FS_OPERATIONS_WITH_EXISTING_PATH_NEW_PATH = ['link', 'linkSync'];\nconst FS_OPERATIONS_WITH_PREFIX = ['mkdtemp', 'mkdtempSync'];\nconst FS_OPERATIONS_WITH_TARGET_PATH = ['symlink', 'symlinkSync'];\nconst FS_OPERATIONS_WITH_PATH_ARG = [\n  'access',\n  'appendFile',\n  'chmod',\n  'chown',\n  'exists',\n  'mkdir',\n  'lchown',\n  'lstat',\n  'lutimes',\n  'open',\n  'opendir',\n  'readdir',\n  'readFile',\n  'readlink',\n  'realpath',\n  'realpath.native',\n  'rm',\n  'rmdir',\n  'stat',\n  'truncate',\n  'unlink',\n  'utimes',\n  'writeFile',\n  'accessSync',\n  'appendFileSync',\n  'chmodSync',\n  'chownSync',\n  'existsSync',\n  'lchownSync',\n  'lstatSync',\n  'lutimesSync',\n  'opendirSync',\n  'mkdirSync',\n  'openSync',\n  'readdirSync',\n  'readFileSync',\n  'readlinkSync',\n  'realpathSync',\n  'realpathSync.native',\n  'rmdirSync',\n  'rmSync',\n  'statSync',\n  'truncateSync',\n  'unlinkSync',\n  'utimesSync',\n  'writeFileSync',\n];\n\nexports.fsIntegration = fsIntegration;\n//# sourceMappingURL=fs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvZnMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsMEJBQTBCLG1CQUFPLENBQUMsb0hBQW1DO0FBQ3JFLGFBQWEsbUJBQU8sQ0FBQyxvR0FBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyw2RkFBdUI7O0FBRWxEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLG1CQUFtQjtBQUN6RCxzQ0FBc0MsYUFBYTs7QUFFbkQ7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsYUFBYTtBQUNiO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAc2VudHJ5XFxub2RlXFxidWlsZFxcY2pzXFxpbnRlZ3JhdGlvbnNcXGZzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25GcyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1mcycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0ZpbGVTeXN0ZW0nO1xuXG4vKipcbiAqIFRoaXMgaW50ZWdyYXRpb24gd2lsbCBjcmVhdGUgc3BhbnMgZm9yIGBmc2AgQVBJIG9wZXJhdGlvbnMsIGxpa2UgcmVhZGluZyBhbmQgd3JpdGluZyBmaWxlcy5cbiAqXG4gKiAqKldBUk5JTkc6KiogVGhpcyBpbnRlZ3JhdGlvbiBtYXkgYWRkIHNpZ25pZmljYW50IG92ZXJoZWFkIHRvIHlvdXIgYXBwbGljYXRpb24uIEVzcGVjaWFsbHkgaW4gc2NlbmFyaW9zIHdpdGggYSBsb3Qgb2ZcbiAqIGZpbGUgSS9PLCBsaWtlIGZvciBleGFtcGxlIHdoZW4gcnVubmluZyBhIGZyYW1ld29yayBkZXYgc2VydmVyLCBpbmNsdWRpbmcgdGhpcyBpbnRlZ3JhdGlvbiBjYW4gbWFzc2l2ZWx5IHNsb3cgZG93blxuICogeW91ciBhcHBsaWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyBDb25maWd1cmF0aW9uIGZvciB0aGlzIGludGVncmF0aW9uLlxuICovXG5jb25zdCBmc0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihcbiAgKFxuICAgIG9wdGlvbnNcblxuID0ge30sXG4gICkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgICAgc2V0dXBPbmNlKCkge1xuICAgICAgICBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gICAgICAgICAgSU5URUdSQVRJT05fTkFNRSxcbiAgICAgICAgICAoKSA9PlxuICAgICAgICAgICAgbmV3IGluc3RydW1lbnRhdGlvbkZzLkZzSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgICAgICAgICAgcmVxdWlyZVBhcmVudFNwYW46IHRydWUsXG4gICAgICAgICAgICAgIGVuZEhvb2soZnVuY3Rpb25OYW1lLCB7IGFyZ3MsIHNwYW4sIGVycm9yIH0pIHtcbiAgICAgICAgICAgICAgICBzcGFuLnVwZGF0ZU5hbWUoYGZzLiR7ZnVuY3Rpb25OYW1lfWApO1xuXG4gICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHtcbiAgICAgICAgICAgICAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdOiAnZmlsZScsXG4gICAgICAgICAgICAgICAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl06ICdhdXRvLmZpbGUuZnMnLFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucmVjb3JkRXJyb3JNZXNzYWdlc0FzU3BhbkF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgJiYgRlNfT1BFUkFUSU9OU19XSVRIX1BBVEhfQVJHLmluY2x1ZGVzKGZ1bmN0aW9uTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ3BhdGhfYXJndW1lbnQnLCBhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYXJnc1sxXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgRlNfT1BFUkFUSU9OU19XSVRIX1RBUkdFVF9QQVRILmluY2x1ZGVzKGZ1bmN0aW9uTmFtZSlcbiAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgndGFyZ2V0X2FyZ3VtZW50JywgYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCdwYXRoX2FyZ3VtZW50JywgYXJnc1sxXSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyAmJiBGU19PUEVSQVRJT05TX1dJVEhfUFJFRklYLmluY2x1ZGVzKGZ1bmN0aW9uTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ3ByZWZpeF9hcmd1bWVudCcsIGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhcmdzWzFdID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICBGU19PUEVSQVRJT05TX1dJVEhfRVhJU1RJTkdfUEFUSF9ORVdfUEFUSC5pbmNsdWRlcyhmdW5jdGlvbk5hbWUpXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ2V4aXN0aW5nX3BhdGhfYXJndW1lbnQnLCBhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ25ld19wYXRoX2FyZ3VtZW50JywgYXJnc1sxXSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFyZ3NbMV0gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIEZTX09QRVJBVElPTlNfV0lUSF9TUkNfREVTVC5pbmNsdWRlcyhmdW5jdGlvbk5hbWUpXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ3NyY19hcmd1bWVudCcsIGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgnZGVzdF9hcmd1bWVudCcsIGFyZ3NbMV0pO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBhcmdzWzFdID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICBGU19PUEVSQVRJT05TX1dJVEhfT0xEX1BBVEhfTkVXX1BBVEguaW5jbHVkZXMoZnVuY3Rpb25OYW1lKVxuICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCdvbGRfcGF0aF9hcmd1bWVudCcsIGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZSgnbmV3X3BhdGhfYXJndW1lbnQnLCBhcmdzWzFdKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgJiYgb3B0aW9ucy5yZWNvcmRFcnJvck1lc3NhZ2VzQXNTcGFuQXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ2ZzX2Vycm9yJywgZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICkoKTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfSxcbik7XG5cbmNvbnN0IEZTX09QRVJBVElPTlNfV0lUSF9PTERfUEFUSF9ORVdfUEFUSCA9IFsncmVuYW1lJywgJ3JlbmFtZVN5bmMnXTtcbmNvbnN0IEZTX09QRVJBVElPTlNfV0lUSF9TUkNfREVTVCA9IFsnY29weUZpbGUnLCAnY3AnLCAnY29weUZpbGVTeW5jJywgJ2NwU3luYyddO1xuY29uc3QgRlNfT1BFUkFUSU9OU19XSVRIX0VYSVNUSU5HX1BBVEhfTkVXX1BBVEggPSBbJ2xpbmsnLCAnbGlua1N5bmMnXTtcbmNvbnN0IEZTX09QRVJBVElPTlNfV0lUSF9QUkVGSVggPSBbJ21rZHRlbXAnLCAnbWtkdGVtcFN5bmMnXTtcbmNvbnN0IEZTX09QRVJBVElPTlNfV0lUSF9UQVJHRVRfUEFUSCA9IFsnc3ltbGluaycsICdzeW1saW5rU3luYyddO1xuY29uc3QgRlNfT1BFUkFUSU9OU19XSVRIX1BBVEhfQVJHID0gW1xuICAnYWNjZXNzJyxcbiAgJ2FwcGVuZEZpbGUnLFxuICAnY2htb2QnLFxuICAnY2hvd24nLFxuICAnZXhpc3RzJyxcbiAgJ21rZGlyJyxcbiAgJ2xjaG93bicsXG4gICdsc3RhdCcsXG4gICdsdXRpbWVzJyxcbiAgJ29wZW4nLFxuICAnb3BlbmRpcicsXG4gICdyZWFkZGlyJyxcbiAgJ3JlYWRGaWxlJyxcbiAgJ3JlYWRsaW5rJyxcbiAgJ3JlYWxwYXRoJyxcbiAgJ3JlYWxwYXRoLm5hdGl2ZScsXG4gICdybScsXG4gICdybWRpcicsXG4gICdzdGF0JyxcbiAgJ3RydW5jYXRlJyxcbiAgJ3VubGluaycsXG4gICd1dGltZXMnLFxuICAnd3JpdGVGaWxlJyxcbiAgJ2FjY2Vzc1N5bmMnLFxuICAnYXBwZW5kRmlsZVN5bmMnLFxuICAnY2htb2RTeW5jJyxcbiAgJ2Nob3duU3luYycsXG4gICdleGlzdHNTeW5jJyxcbiAgJ2xjaG93blN5bmMnLFxuICAnbHN0YXRTeW5jJyxcbiAgJ2x1dGltZXNTeW5jJyxcbiAgJ29wZW5kaXJTeW5jJyxcbiAgJ21rZGlyU3luYycsXG4gICdvcGVuU3luYycsXG4gICdyZWFkZGlyU3luYycsXG4gICdyZWFkRmlsZVN5bmMnLFxuICAncmVhZGxpbmtTeW5jJyxcbiAgJ3JlYWxwYXRoU3luYycsXG4gICdyZWFscGF0aFN5bmMubmF0aXZlJyxcbiAgJ3JtZGlyU3luYycsXG4gICdybVN5bmMnLFxuICAnc3RhdFN5bmMnLFxuICAndHJ1bmNhdGVTeW5jJyxcbiAgJ3VubGlua1N5bmMnLFxuICAndXRpbWVzU3luYycsXG4gICd3cml0ZUZpbGVTeW5jJyxcbl07XG5cbmV4cG9ydHMuZnNJbnRlZ3JhdGlvbiA9IGZzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/fs.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"buffer\")[\"Buffer\"];\nObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst diagnosticsChannel = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core = __webpack_require__(/*! @opentelemetry/core */ \"(ssr)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core$1 = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(ssr)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst baggage = __webpack_require__(/*! ../../utils/baggage.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/baggage.js\");\nconst getRequestUrl = __webpack_require__(/*! ../../utils/getRequestUrl.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js\");\n\nconst INSTRUMENTATION_NAME = '@sentry/instrumentation-http';\n\n// We only want to capture request bodies up to 1mb.\nconst MAX_BODY_BYTE_LENGTH = 1024 * 1024;\n\n/**\n * This custom HTTP instrumentation is used to isolate incoming requests and annotate them with additional information.\n * It does not emit any spans.\n *\n * The reason this is isolated from the OpenTelemetry instrumentation is that users may overwrite this,\n * which would lead to Sentry not working as expected.\n *\n * Important note: Contrary to other OTEL instrumentation, this one cannot be unwrapped.\n * It only does minimal things though and does not emit any spans.\n *\n * This is heavily inspired & adapted from:\n * https://github.com/open-telemetry/opentelemetry-js/blob/f8ab5592ddea5cba0a3b33bf8d74f27872c0367f/experimental/packages/opentelemetry-instrumentation-http/src/http.ts\n */\nclass SentryHttpInstrumentation extends instrumentation.InstrumentationBase {\n\n   constructor(config = {}) {\n    super(INSTRUMENTATION_NAME, core.VERSION, config);\n\n    this._propagationDecisionMap = new core$1.LRUMap(100);\n    this._ignoreOutgoingRequestsMap = new WeakMap();\n  }\n\n  /** @inheritdoc */\n   init() {\n    // We register handlers when either http or https is instrumented\n    // but we only want to register them once, whichever is loaded first\n    let hasRegisteredHandlers = false;\n\n    const onHttpServerRequestStart = ((_data) => {\n      const data = _data ;\n      this._patchServerEmitOnce(data.server);\n    }) ;\n\n    const onHttpClientResponseFinish = ((_data) => {\n      const data = _data ;\n      this._onOutgoingRequestFinish(data.request, data.response);\n    }) ;\n\n    const onHttpClientRequestError = ((_data) => {\n      const data = _data ;\n      this._onOutgoingRequestFinish(data.request, undefined);\n    }) ;\n\n    const onHttpClientRequestCreated = ((_data) => {\n      const data = _data ;\n      this._onOutgoingRequestCreated(data.request);\n    }) ;\n\n    const wrap = (moduleExports) => {\n      if (hasRegisteredHandlers) {\n        return moduleExports;\n      }\n\n      hasRegisteredHandlers = true;\n\n      diagnosticsChannel.subscribe('http.server.request.start', onHttpServerRequestStart);\n      diagnosticsChannel.subscribe('http.client.response.finish', onHttpClientResponseFinish);\n\n      // When an error happens, we still want to have a breadcrumb\n      // In this case, `http.client.response.finish` is not triggered\n      diagnosticsChannel.subscribe('http.client.request.error', onHttpClientRequestError);\n\n      // NOTE: This channel only exist since Node 22\n      // Before that, outgoing requests are not patched\n      // and trace headers are not propagated, sadly.\n      if (this.getConfig().propagateTraceInOutgoingRequests) {\n        diagnosticsChannel.subscribe('http.client.request.created', onHttpClientRequestCreated);\n      }\n\n      return moduleExports;\n    };\n\n    const unwrap = () => {\n      diagnosticsChannel.unsubscribe('http.server.request.start', onHttpServerRequestStart);\n      diagnosticsChannel.unsubscribe('http.client.response.finish', onHttpClientResponseFinish);\n      diagnosticsChannel.unsubscribe('http.client.request.error', onHttpClientRequestError);\n      diagnosticsChannel.unsubscribe('http.client.request.created', onHttpClientRequestCreated);\n    };\n\n    /**\n     * You may be wondering why we register these diagnostics-channel listeners\n     * in such a convoluted way (as InstrumentationNodeModuleDefinition...)˝,\n     * instead of simply subscribing to the events once in here.\n     * The reason for this is timing semantics: These functions are called once the http or https module is loaded.\n     * If we'd subscribe before that, there seem to be conflicts with the OTEL native instrumentation in some scenarios,\n     * especially the \"import-on-top\" pattern of setting up ESM applications.\n     */\n    return [\n      new instrumentation.InstrumentationNodeModuleDefinition('http', ['*'], wrap, unwrap),\n      new instrumentation.InstrumentationNodeModuleDefinition('https', ['*'], wrap, unwrap),\n    ];\n  }\n\n  /**\n   * This is triggered when an outgoing request finishes.\n   * It has access to the final request and response objects.\n   */\n   _onOutgoingRequestFinish(request, response) {\n    debugBuild.DEBUG_BUILD && core$1.logger.log(INSTRUMENTATION_NAME, 'Handling finished outgoing request');\n\n    const _breadcrumbs = this.getConfig().breadcrumbs;\n    const breadCrumbsEnabled = typeof _breadcrumbs === 'undefined' ? true : _breadcrumbs;\n\n    // Note: We cannot rely on the map being set by `_onOutgoingRequestCreated`, because that is not run in Node <22\n    const shouldIgnore = this._ignoreOutgoingRequestsMap.get(request) ?? this._shouldIgnoreOutgoingRequest(request);\n    this._ignoreOutgoingRequestsMap.set(request, shouldIgnore);\n\n    if (breadCrumbsEnabled && !shouldIgnore) {\n      addRequestBreadcrumb(request, response);\n    }\n  }\n\n  /**\n   * This is triggered when an outgoing request is created.\n   * It has access to the request object, and can mutate it before the request is sent.\n   */\n   _onOutgoingRequestCreated(request) {\n    const shouldIgnore = this._ignoreOutgoingRequestsMap.get(request) ?? this._shouldIgnoreOutgoingRequest(request);\n    this._ignoreOutgoingRequestsMap.set(request, shouldIgnore);\n\n    if (shouldIgnore) {\n      return;\n    }\n\n    // Add trace propagation headers\n    const url = getRequestUrl.getRequestUrl(request);\n\n    // Manually add the trace headers, if it applies\n    // Note: We do not use `propagation.inject()` here, because our propagator relies on an active span\n    // Which we do not have in this case\n    const tracePropagationTargets = core$1.getClient()?.getOptions().tracePropagationTargets;\n    const addedHeaders = opentelemetry.shouldPropagateTraceForUrl(url, tracePropagationTargets, this._propagationDecisionMap)\n      ? core$1.getTraceData()\n      : undefined;\n\n    if (!addedHeaders) {\n      return;\n    }\n\n    const { 'sentry-trace': sentryTrace, baggage: baggage$1 } = addedHeaders;\n\n    // We do not want to overwrite existing header here, if it was already set\n    if (sentryTrace && !request.getHeader('sentry-trace')) {\n      try {\n        request.setHeader('sentry-trace', sentryTrace);\n        debugBuild.DEBUG_BUILD && core$1.logger.log(INSTRUMENTATION_NAME, 'Added sentry-trace header to outgoing request');\n      } catch (error) {\n        debugBuild.DEBUG_BUILD &&\n          core$1.logger.error(\n            INSTRUMENTATION_NAME,\n            'Failed to add sentry-trace header to outgoing request:',\n            core$1.isError(error) ? error.message : 'Unknown error',\n          );\n      }\n    }\n\n    if (baggage$1) {\n      // For baggage, we make sure to merge this into a possibly existing header\n      const newBaggage = baggage.mergeBaggageHeaders(request.getHeader('baggage'), baggage$1);\n      if (newBaggage) {\n        try {\n          request.setHeader('baggage', newBaggage);\n          debugBuild.DEBUG_BUILD && core$1.logger.log(INSTRUMENTATION_NAME, 'Added baggage header to outgoing request');\n        } catch (error) {\n          debugBuild.DEBUG_BUILD &&\n            core$1.logger.error(\n              INSTRUMENTATION_NAME,\n              'Failed to add baggage header to outgoing request:',\n              core$1.isError(error) ? error.message : 'Unknown error',\n            );\n        }\n      }\n    }\n  }\n\n  /**\n   * Patch a server.emit function to handle process isolation for incoming requests.\n   * This will only patch the emit function if it was not already patched.\n   */\n   _patchServerEmitOnce(server) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const originalEmit = server.emit;\n\n    // This means it was already patched, do nothing\n    if ((originalEmit ).__sentry_patched__) {\n      return;\n    }\n\n    debugBuild.DEBUG_BUILD && core$1.logger.log(INSTRUMENTATION_NAME, 'Patching server.emit');\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n    const { ignoreIncomingRequestBody, maxIncomingRequestBodySize = 'medium' } = instrumentation.getConfig();\n\n    const newEmit = new Proxy(originalEmit, {\n      apply(target, thisArg, args) {\n        // Only traces request events\n        if (args[0] !== 'request') {\n          return target.apply(thisArg, args);\n        }\n\n        debugBuild.DEBUG_BUILD && core$1.logger.log(INSTRUMENTATION_NAME, 'Handling incoming request');\n\n        const isolationScope = core$1.getIsolationScope().clone();\n        const request = args[1] ;\n        const response = args[2] ;\n\n        const normalizedRequest = core$1.httpRequestToRequestData(request);\n\n        // request.ip is non-standard but some frameworks set this\n        const ipAddress = (request ).ip || request.socket?.remoteAddress;\n\n        const url = request.url || '/';\n        if (!ignoreIncomingRequestBody?.(url, request) && maxIncomingRequestBodySize !== 'none') {\n          patchRequestToCaptureBody(request, isolationScope, maxIncomingRequestBodySize);\n        }\n\n        // Update the isolation scope, isolate this request\n        isolationScope.setSDKProcessingMetadata({ normalizedRequest, ipAddress });\n\n        // attempt to update the scope's `transactionName` based on the request URL\n        // Ideally, framework instrumentations coming after the HttpInstrumentation\n        // update the transactionName once we get a parameterized route.\n        const httpMethod = (request.method || 'GET').toUpperCase();\n        const httpTarget = core$1.stripUrlQueryAndFragment(url);\n\n        const bestEffortTransactionName = `${httpMethod} ${httpTarget}`;\n\n        isolationScope.setTransactionName(bestEffortTransactionName);\n\n        if (instrumentation.getConfig().trackIncomingRequestsAsSessions !== false) {\n          recordRequestSession({\n            requestIsolationScope: isolationScope,\n            response,\n            sessionFlushingDelayMS: instrumentation.getConfig().sessionFlushingDelayMS ?? 60000,\n          });\n        }\n\n        return core$1.withIsolationScope(isolationScope, () => {\n          // Set a new propagationSpanId for this request\n          // We rely on the fact that `withIsolationScope()` will implicitly also fork the current scope\n          // This way we can save an \"unnecessary\" `withScope()` invocation\n          core$1.getCurrentScope().getPropagationContext().propagationSpanId = core$1.generateSpanId();\n\n          // If we don't want to extract the trace from the header, we can skip this\n          if (!instrumentation.getConfig().extractIncomingTraceFromHeader) {\n            return target.apply(thisArg, args);\n          }\n\n          const ctx = api.propagation.extract(api.context.active(), normalizedRequest.headers);\n          return api.context.with(ctx, () => {\n            return target.apply(thisArg, args);\n          });\n        });\n      },\n    });\n\n    core$1.addNonEnumerableProperty(newEmit, '__sentry_patched__', true);\n\n    server.emit = newEmit;\n  }\n\n  /**\n   * Check if the given outgoing request should be ignored.\n   */\n   _shouldIgnoreOutgoingRequest(request) {\n    if (core.isTracingSuppressed(api.context.active())) {\n      return true;\n    }\n\n    const ignoreOutgoingRequests = this.getConfig().ignoreOutgoingRequests;\n\n    if (!ignoreOutgoingRequests) {\n      return false;\n    }\n\n    const options = getRequestOptions(request);\n    const url = getRequestUrl.getRequestUrl(request);\n    return ignoreOutgoingRequests(url, options);\n  }\n}\n\n/** Add a breadcrumb for outgoing requests. */\nfunction addRequestBreadcrumb(request, response) {\n  const data = getBreadcrumbData(request);\n\n  const statusCode = response?.statusCode;\n  const level = core$1.getBreadcrumbLogLevelFromHttpStatusCode(statusCode);\n\n  core$1.addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        status_code: statusCode,\n        ...data,\n      },\n      type: 'http',\n      level,\n    },\n    {\n      event: 'response',\n      request,\n      response,\n    },\n  );\n}\n\nfunction getBreadcrumbData(request) {\n  try {\n    // `request.host` does not contain the port, but the host header does\n    const host = request.getHeader('host') || request.host;\n    const url = new URL(request.path, `${request.protocol}//${host}`);\n    const parsedUrl = core$1.parseUrl(url.toString());\n\n    const data = {\n      url: core$1.getSanitizedUrlString(parsedUrl),\n      'http.method': request.method || 'GET',\n    };\n\n    if (parsedUrl.search) {\n      data['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      data['http.fragment'] = parsedUrl.hash;\n    }\n\n    return data;\n  } catch {\n    return {};\n  }\n}\n\n/**\n * This method patches the request object to capture the body.\n * Instead of actually consuming the streamed body ourselves, which has potential side effects,\n * we monkey patch `req.on('data')` to intercept the body chunks.\n * This way, we only read the body if the user also consumes the body, ensuring we do not change any behavior in unexpected ways.\n */\nfunction patchRequestToCaptureBody(\n  req,\n  isolationScope,\n  maxIncomingRequestBodySize,\n) {\n  let bodyByteLength = 0;\n  const chunks = [];\n\n  debugBuild.DEBUG_BUILD && core$1.logger.log(INSTRUMENTATION_NAME, 'Patching request.on');\n\n  /**\n   * We need to keep track of the original callbacks, in order to be able to remove listeners again.\n   * Since `off` depends on having the exact same function reference passed in, we need to be able to map\n   * original listeners to our wrapped ones.\n   */\n  const callbackMap = new WeakMap();\n\n  const maxBodySize =\n    maxIncomingRequestBodySize === 'small'\n      ? 1000\n      : maxIncomingRequestBodySize === 'medium'\n        ? 10000\n        : MAX_BODY_BYTE_LENGTH;\n\n  try {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    req.on = new Proxy(req.on, {\n      apply: (target, thisArg, args) => {\n        const [event, listener, ...restArgs] = args;\n\n        if (event === 'data') {\n          debugBuild.DEBUG_BUILD &&\n            core$1.logger.log(INSTRUMENTATION_NAME, `Handling request.on(\"data\") with maximum body size of ${maxBodySize}b`);\n\n          const callback = new Proxy(listener, {\n            apply: (target, thisArg, args) => {\n              try {\n                const chunk = args[0] ;\n                const bufferifiedChunk = Buffer.from(chunk);\n\n                if (bodyByteLength < maxBodySize) {\n                  chunks.push(bufferifiedChunk);\n                  bodyByteLength += bufferifiedChunk.byteLength;\n                } else if (debugBuild.DEBUG_BUILD) {\n                  core$1.logger.log(\n                    INSTRUMENTATION_NAME,\n                    `Dropping request body chunk because maximum body length of ${maxBodySize}b is exceeded.`,\n                  );\n                }\n              } catch (err) {\n                debugBuild.DEBUG_BUILD && core$1.logger.error(INSTRUMENTATION_NAME, 'Encountered error while storing body chunk.');\n              }\n\n              return Reflect.apply(target, thisArg, args);\n            },\n          });\n\n          callbackMap.set(listener, callback);\n\n          return Reflect.apply(target, thisArg, [event, callback, ...restArgs]);\n        }\n\n        return Reflect.apply(target, thisArg, args);\n      },\n    });\n\n    // Ensure we also remove callbacks correctly\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    req.off = new Proxy(req.off, {\n      apply: (target, thisArg, args) => {\n        const [, listener] = args;\n\n        const callback = callbackMap.get(listener);\n        if (callback) {\n          callbackMap.delete(listener);\n\n          const modifiedArgs = args.slice();\n          modifiedArgs[1] = callback;\n          return Reflect.apply(target, thisArg, modifiedArgs);\n        }\n\n        return Reflect.apply(target, thisArg, args);\n      },\n    });\n\n    req.on('end', () => {\n      try {\n        const body = Buffer.concat(chunks).toString('utf-8');\n        if (body) {\n          // Using Buffer.byteLength here, because the body may contain characters that are not 1 byte long\n          const bodyByteLength = Buffer.byteLength(body, 'utf-8');\n          const truncatedBody =\n            bodyByteLength > maxBodySize\n              ? `${Buffer.from(body)\n                  .subarray(0, maxBodySize - 3)\n                  .toString('utf-8')}...`\n              : body;\n\n          isolationScope.setSDKProcessingMetadata({ normalizedRequest: { data: truncatedBody } });\n        }\n      } catch (error) {\n        if (debugBuild.DEBUG_BUILD) {\n          core$1.logger.error(INSTRUMENTATION_NAME, 'Error building captured request body', error);\n        }\n      }\n    });\n  } catch (error) {\n    if (debugBuild.DEBUG_BUILD) {\n      core$1.logger.error(INSTRUMENTATION_NAME, 'Error patching request to capture body', error);\n    }\n  }\n}\n\nfunction getRequestOptions(request) {\n  return {\n    method: request.method,\n    protocol: request.protocol,\n    host: request.host,\n    hostname: request.host,\n    path: request.path,\n    headers: request.getHeaders(),\n  };\n}\n\n/**\n * Starts a session and tracks it in the context of a given isolation scope.\n * When the passed response is finished, the session is put into a task and is\n * aggregated with other sessions that may happen in a certain time window\n * (sessionFlushingDelayMs).\n *\n * The sessions are always aggregated by the client that is on the current scope\n * at the time of ending the response (if there is one).\n */\n// Exported for unit tests\nfunction recordRequestSession({\n  requestIsolationScope,\n  response,\n  sessionFlushingDelayMS,\n}\n\n) {\n  requestIsolationScope.setSDKProcessingMetadata({\n    requestSession: { status: 'ok' },\n  });\n  response.once('close', () => {\n    // We need to grab the client off the current scope instead of the isolation scope because the isolation scope doesn't hold any client out of the box.\n    const client = core$1.getClient();\n    const requestSession = requestIsolationScope.getScopeData().sdkProcessingMetadata.requestSession;\n\n    if (client && requestSession) {\n      debugBuild.DEBUG_BUILD && core$1.logger.debug(`Recorded request session with status: ${requestSession.status}`);\n\n      const roundedDate = new Date();\n      roundedDate.setSeconds(0, 0);\n      const dateBucketKey = roundedDate.toISOString();\n\n      const existingClientAggregate = clientToRequestSessionAggregatesMap.get(client);\n      const bucket = existingClientAggregate?.[dateBucketKey] || { exited: 0, crashed: 0, errored: 0 };\n      bucket[({ ok: 'exited', crashed: 'crashed', errored: 'errored' } )[requestSession.status]]++;\n\n      if (existingClientAggregate) {\n        existingClientAggregate[dateBucketKey] = bucket;\n      } else {\n        debugBuild.DEBUG_BUILD && core$1.logger.debug('Opened new request session aggregate.');\n        const newClientAggregate = { [dateBucketKey]: bucket };\n        clientToRequestSessionAggregatesMap.set(client, newClientAggregate);\n\n        const flushPendingClientAggregates = () => {\n          clearTimeout(timeout);\n          unregisterClientFlushHook();\n          clientToRequestSessionAggregatesMap.delete(client);\n\n          const aggregatePayload = Object.entries(newClientAggregate).map(\n            ([timestamp, value]) => ({\n              started: timestamp,\n              exited: value.exited,\n              errored: value.errored,\n              crashed: value.crashed,\n            }),\n          );\n          client.sendSession({ aggregates: aggregatePayload });\n        };\n\n        const unregisterClientFlushHook = client.on('flush', () => {\n          debugBuild.DEBUG_BUILD && core$1.logger.debug('Sending request session aggregate due to client flush');\n          flushPendingClientAggregates();\n        });\n        const timeout = setTimeout(() => {\n          debugBuild.DEBUG_BUILD && core$1.logger.debug('Sending request session aggregate due to flushing schedule');\n          flushPendingClientAggregates();\n        }, sessionFlushingDelayMS).unref();\n      }\n    }\n  });\n}\n\nconst clientToRequestSessionAggregatesMap = new Map\n\n();\n\nexports.SentryHttpInstrumentation = SentryHttpInstrumentation;\nexports.recordRequestSession = recordRequestSession;\n//# sourceMappingURL=SentryHttpInstrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/http/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentationHttp = __webpack_require__(/*! @opentelemetry/instrumentation-http */ \"(ssr)/./node_modules/@opentelemetry/instrumentation-http/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/nodeVersion.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst getRequestUrl = __webpack_require__(/*! ../../utils/getRequestUrl.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js\");\nconst SentryHttpInstrumentation = __webpack_require__(/*! ./SentryHttpInstrumentation.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js\");\n\nconst INTEGRATION_NAME = 'Http';\n\nconst INSTRUMENTATION_NAME = '@opentelemetry_sentry-patched/instrumentation-http';\n\nconst instrumentSentryHttp = instrument.generateInstrumentOnce(\n  `${INTEGRATION_NAME}.sentry`,\n  options => {\n    return new SentryHttpInstrumentation.SentryHttpInstrumentation(options);\n  },\n);\n\nconst instrumentOtelHttp = instrument.generateInstrumentOnce(INTEGRATION_NAME, config => {\n  const instrumentation = new instrumentationHttp.HttpInstrumentation(config);\n\n  // We want to update the logger namespace so we can better identify what is happening here\n  try {\n    instrumentation['_diag'] = api.diag.createComponentLogger({\n      namespace: INSTRUMENTATION_NAME,\n    });\n    // @ts-expect-error We are writing a read-only property here...\n    instrumentation.instrumentationName = INSTRUMENTATION_NAME;\n  } catch {\n    // ignore errors here...\n  }\n\n  return instrumentation;\n});\n\n/** Exported only for tests. */\nfunction _shouldInstrumentSpans(options, clientOptions = {}) {\n  // If `spans` is passed in, it takes precedence\n  // Else, we by default emit spans, unless `skipOpenTelemetrySetup` is set to `true` or spans are not enabled\n  if (typeof options.spans === 'boolean') {\n    return options.spans;\n  }\n\n  if (clientOptions.skipOpenTelemetrySetup) {\n    return false;\n  }\n\n  // IMPORTANT: We only disable span instrumentation when spans are not enabled _and_ we are on Node 22+,\n  // as otherwise the necessary diagnostics channel is not available yet\n  if (!core.hasSpansEnabled(clientOptions) && nodeVersion.NODE_VERSION.major >= 22) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * The http integration instruments Node's internal http and https modules.\n * It creates breadcrumbs and spans for outgoing HTTP requests which will be attached to the currently active span.\n */\nconst httpIntegration = core.defineIntegration((options = {}) => {\n  const dropSpansForIncomingRequestStatusCodes = options.dropSpansForIncomingRequestStatusCodes ?? [404];\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentSpans = _shouldInstrumentSpans(options, core.getClient()?.getOptions());\n\n      // This is Sentry-specific instrumentation for request isolation and breadcrumbs\n      instrumentSentryHttp({\n        ...options,\n        // If spans are not instrumented, it means the HttpInstrumentation has not been added\n        // In that case, we want to handle incoming trace extraction ourselves\n        extractIncomingTraceFromHeader: !instrumentSpans,\n        // If spans are not instrumented, it means the HttpInstrumentation has not been added\n        // In that case, we want to handle trace propagation ourselves\n        propagateTraceInOutgoingRequests: !instrumentSpans,\n      });\n\n      // This is the \"regular\" OTEL instrumentation that emits spans\n      if (instrumentSpans) {\n        const instrumentationConfig = getConfigWithDefaults(options);\n        instrumentOtelHttp(instrumentationConfig);\n      }\n    },\n    processEvent(event) {\n      // Drop transaction if it has a status code that should be ignored\n      if (event.type === 'transaction') {\n        const statusCode = event.contexts?.trace?.data?.['http.response.status_code'];\n        if (\n          typeof statusCode === 'number' &&\n          dropSpansForIncomingRequestStatusCodes.some(code => {\n            if (typeof code === 'number') {\n              return code === statusCode;\n            }\n\n            const [min, max] = code;\n            return statusCode >= min && statusCode <= max;\n          })\n        ) {\n          return null;\n        }\n      }\n\n      return event;\n    },\n  };\n});\n\n/**\n * Determines if @param req is a ClientRequest, meaning the request was created within the express app\n * and it's an outgoing request.\n * Checking for properties instead of using `instanceOf` to avoid importing the request classes.\n */\nfunction _isClientRequest(req) {\n  return 'outputData' in req && 'outputSize' in req && !('client' in req) && !('statusCode' in req);\n}\n\n/**\n * Detects if an incoming request is a prefetch request.\n */\nfunction isKnownPrefetchRequest(req) {\n  // Currently only handles Next.js prefetch requests but may check other frameworks in the future.\n  return req.headers['next-router-prefetch'] === '1';\n}\n\nfunction getConfigWithDefaults(options = {}) {\n  const instrumentationConfig = {\n    ...options.instrumentation?._experimentalConfig,\n\n    disableIncomingRequestInstrumentation: options.disableIncomingRequestSpans,\n\n    ignoreOutgoingRequestHook: request => {\n      const url = getRequestUrl.getRequestUrl(request);\n\n      if (!url) {\n        return false;\n      }\n\n      const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n      if (_ignoreOutgoingRequests?.(url, request)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    ignoreIncomingRequestHook: request => {\n      // request.url is the only property that holds any information about the url\n      // it only consists of the URL path and query string (if any)\n      const urlPath = request.url;\n\n      const method = request.method?.toUpperCase();\n      // We do not capture OPTIONS/HEAD requests as transactions\n      if (method === 'OPTIONS' || method === 'HEAD') {\n        return true;\n      }\n\n      const _ignoreIncomingRequests = options.ignoreIncomingRequests;\n      if (urlPath && _ignoreIncomingRequests?.(urlPath, request)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    requireParentforOutgoingSpans: false,\n    requireParentforIncomingSpans: false,\n    requestHook: (span, req) => {\n      addOriginToSpan.addOriginToSpan(span, 'auto.http.otel.http');\n      if (!_isClientRequest(req) && isKnownPrefetchRequest(req)) {\n        span.setAttribute('sentry.http.prefetch', true);\n      }\n\n      options.instrumentation?.requestHook?.(span, req);\n    },\n    responseHook: (span, res) => {\n      options.instrumentation?.responseHook?.(span, res);\n    },\n    applyCustomAttributesOnSpan: (\n      span,\n      request,\n      response,\n    ) => {\n      options.instrumentation?.applyCustomAttributesOnSpan?.(span, request, response);\n    },\n  } ;\n\n  return instrumentationConfig;\n}\n\nexports._shouldInstrumentSpans = _shouldInstrumentSpans;\nexports.httpIntegration = httpIntegration;\nexports.instrumentOtelHttp = instrumentOtelHttp;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/http/index.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js":(__unused_webpack_module,exports)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * The key used to store the local variables on the error object.\n */\nconst LOCAL_VARIABLES_KEY = '__SENTRY_ERROR_LOCAL_VARIABLES__';\n\n/**\n * Creates a rate limiter that will call the disable callback when the rate limit is reached and the enable callback\n * when a timeout has occurred.\n * @param maxPerSecond Maximum number of calls per second\n * @param enable Callback to enable capture\n * @param disable Callback to disable capture\n * @returns A function to call to increment the rate limiter count\n */\nfunction createRateLimiter(\n  maxPerSecond,\n  enable,\n  disable,\n) {\n  let count = 0;\n  let retrySeconds = 5;\n  let disabledTimeout = 0;\n\n  setInterval(() => {\n    if (disabledTimeout === 0) {\n      if (count > maxPerSecond) {\n        retrySeconds *= 2;\n        disable(retrySeconds);\n\n        // Cap at one day\n        if (retrySeconds > 86400) {\n          retrySeconds = 86400;\n        }\n        disabledTimeout = retrySeconds;\n      }\n    } else {\n      disabledTimeout -= 1;\n\n      if (disabledTimeout === 0) {\n        enable();\n      }\n    }\n\n    count = 0;\n  }, 1000).unref();\n\n  return () => {\n    count += 1;\n  };\n}\n\n// Add types for the exception event data\n\n/** Could this be an anonymous function? */\nfunction isAnonymous(name) {\n  return name !== undefined && (name.length === 0 || name === '?' || name === '<anonymous>');\n}\n\n/** Do the function names appear to match? */\nfunction functionNamesMatch(a, b) {\n  return a === b || (isAnonymous(a) && isAnonymous(b));\n}\n\nexports.LOCAL_VARIABLES_KEY = LOCAL_VARIABLES_KEY;\nexports.createRateLimiter = createRateLimiter;\nexports.functionNamesMatch = functionNamesMatch;\nexports.isAnonymous = isAnonymous;\n//# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbG9jYWwtdmFyaWFibGVzL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkJBQTJCO0FBQzNCLHlCQUF5QjtBQUN6QiwwQkFBMEI7QUFDMUIsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAc2VudHJ5XFxub2RlXFxidWlsZFxcY2pzXFxpbnRlZ3JhdGlvbnNcXGxvY2FsLXZhcmlhYmxlc1xcY29tbW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG4vKipcbiAqIFRoZSBrZXkgdXNlZCB0byBzdG9yZSB0aGUgbG9jYWwgdmFyaWFibGVzIG9uIHRoZSBlcnJvciBvYmplY3QuXG4gKi9cbmNvbnN0IExPQ0FMX1ZBUklBQkxFU19LRVkgPSAnX19TRU5UUllfRVJST1JfTE9DQUxfVkFSSUFCTEVTX18nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSByYXRlIGxpbWl0ZXIgdGhhdCB3aWxsIGNhbGwgdGhlIGRpc2FibGUgY2FsbGJhY2sgd2hlbiB0aGUgcmF0ZSBsaW1pdCBpcyByZWFjaGVkIGFuZCB0aGUgZW5hYmxlIGNhbGxiYWNrXG4gKiB3aGVuIGEgdGltZW91dCBoYXMgb2NjdXJyZWQuXG4gKiBAcGFyYW0gbWF4UGVyU2Vjb25kIE1heGltdW0gbnVtYmVyIG9mIGNhbGxzIHBlciBzZWNvbmRcbiAqIEBwYXJhbSBlbmFibGUgQ2FsbGJhY2sgdG8gZW5hYmxlIGNhcHR1cmVcbiAqIEBwYXJhbSBkaXNhYmxlIENhbGxiYWNrIHRvIGRpc2FibGUgY2FwdHVyZVxuICogQHJldHVybnMgQSBmdW5jdGlvbiB0byBjYWxsIHRvIGluY3JlbWVudCB0aGUgcmF0ZSBsaW1pdGVyIGNvdW50XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJhdGVMaW1pdGVyKFxuICBtYXhQZXJTZWNvbmQsXG4gIGVuYWJsZSxcbiAgZGlzYWJsZSxcbikge1xuICBsZXQgY291bnQgPSAwO1xuICBsZXQgcmV0cnlTZWNvbmRzID0gNTtcbiAgbGV0IGRpc2FibGVkVGltZW91dCA9IDA7XG5cbiAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgIGlmIChkaXNhYmxlZFRpbWVvdXQgPT09IDApIHtcbiAgICAgIGlmIChjb3VudCA+IG1heFBlclNlY29uZCkge1xuICAgICAgICByZXRyeVNlY29uZHMgKj0gMjtcbiAgICAgICAgZGlzYWJsZShyZXRyeVNlY29uZHMpO1xuXG4gICAgICAgIC8vIENhcCBhdCBvbmUgZGF5XG4gICAgICAgIGlmIChyZXRyeVNlY29uZHMgPiA4NjQwMCkge1xuICAgICAgICAgIHJldHJ5U2Vjb25kcyA9IDg2NDAwO1xuICAgICAgICB9XG4gICAgICAgIGRpc2FibGVkVGltZW91dCA9IHJldHJ5U2Vjb25kcztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGlzYWJsZWRUaW1lb3V0IC09IDE7XG5cbiAgICAgIGlmIChkaXNhYmxlZFRpbWVvdXQgPT09IDApIHtcbiAgICAgICAgZW5hYmxlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY291bnQgPSAwO1xuICB9LCAxMDAwKS51bnJlZigpO1xuXG4gIHJldHVybiAoKSA9PiB7XG4gICAgY291bnQgKz0gMTtcbiAgfTtcbn1cblxuLy8gQWRkIHR5cGVzIGZvciB0aGUgZXhjZXB0aW9uIGV2ZW50IGRhdGFcblxuLyoqIENvdWxkIHRoaXMgYmUgYW4gYW5vbnltb3VzIGZ1bmN0aW9uPyAqL1xuZnVuY3Rpb24gaXNBbm9ueW1vdXMobmFtZSkge1xuICByZXR1cm4gbmFtZSAhPT0gdW5kZWZpbmVkICYmIChuYW1lLmxlbmd0aCA9PT0gMCB8fCBuYW1lID09PSAnPycgfHwgbmFtZSA9PT0gJzxhbm9ueW1vdXM+Jyk7XG59XG5cbi8qKiBEbyB0aGUgZnVuY3Rpb24gbmFtZXMgYXBwZWFyIHRvIG1hdGNoPyAqL1xuZnVuY3Rpb24gZnVuY3Rpb25OYW1lc01hdGNoKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGIgfHwgKGlzQW5vbnltb3VzKGEpICYmIGlzQW5vbnltb3VzKGIpKTtcbn1cblxuZXhwb3J0cy5MT0NBTF9WQVJJQUJMRVNfS0VZID0gTE9DQUxfVkFSSUFCTEVTX0tFWTtcbmV4cG9ydHMuY3JlYXRlUmF0ZUxpbWl0ZXIgPSBjcmVhdGVSYXRlTGltaXRlcjtcbmV4cG9ydHMuZnVuY3Rpb25OYW1lc01hdGNoID0gZnVuY3Rpb25OYW1lc01hdGNoO1xuZXhwb3J0cy5pc0Fub255bW91cyA9IGlzQW5vbnltb3VzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('Object.defineProperty(exports, Symbol.toStringTag, { value: \'Module\' });\n\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/nodeVersion.js");\nconst localVariablesAsync = __webpack_require__(/*! ./local-variables-async.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js");\nconst localVariablesSync = __webpack_require__(/*! ./local-variables-sync.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js");\n\nconst localVariablesIntegration = (options = {}) => {\n  return nodeVersion.NODE_VERSION.major < 19 ? localVariablesSync.localVariablesSyncIntegration(options) : localVariablesAsync.localVariablesAsyncIntegration(options);\n};\n\nexports.localVariablesIntegration = localVariablesIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbG9jYWwtdmFyaWFibGVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLG9CQUFvQixtQkFBTyxDQUFDLHdGQUFzQjtBQUNsRCw0QkFBNEIsbUJBQU8sQ0FBQyxxSUFBNEI7QUFDaEUsMkJBQTJCLG1CQUFPLENBQUMsbUlBQTJCOztBQUU5RCwrQ0FBK0M7QUFDL0M7QUFDQTs7QUFFQSxpQ0FBaUM7QUFDakMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXGludGVncmF0aW9uc1xcbG9jYWwtdmFyaWFibGVzXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3Qgbm9kZVZlcnNpb24gPSByZXF1aXJlKCcuLi8uLi9ub2RlVmVyc2lvbi5qcycpO1xuY29uc3QgbG9jYWxWYXJpYWJsZXNBc3luYyA9IHJlcXVpcmUoJy4vbG9jYWwtdmFyaWFibGVzLWFzeW5jLmpzJyk7XG5jb25zdCBsb2NhbFZhcmlhYmxlc1N5bmMgPSByZXF1aXJlKCcuL2xvY2FsLXZhcmlhYmxlcy1zeW5jLmpzJyk7XG5cbmNvbnN0IGxvY2FsVmFyaWFibGVzSW50ZWdyYXRpb24gPSAob3B0aW9ucyA9IHt9KSA9PiB7XG4gIHJldHVybiBub2RlVmVyc2lvbi5OT0RFX1ZFUlNJT04ubWFqb3IgPCAxOSA/IGxvY2FsVmFyaWFibGVzU3luYy5sb2NhbFZhcmlhYmxlc1N5bmNJbnRlZ3JhdGlvbihvcHRpb25zKSA6IGxvY2FsVmFyaWFibGVzQXN5bmMubG9jYWxWYXJpYWJsZXNBc3luY0ludGVncmF0aW9uKG9wdGlvbnMpO1xufTtcblxuZXhwb3J0cy5sb2NhbFZhcmlhYmxlc0ludGVncmF0aW9uID0gbG9jYWxWYXJpYWJsZXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js\n')},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst node_worker_threads = __webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst debug = __webpack_require__(/*! ../../utils/debug.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/debug.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js\");\n\n// This string is a placeholder that gets overwritten with the worker code.\nconst base64WorkerScript = 'LyohIEBzZW50cnkvbm9kZSA5LjMwLjAgKGE1Y2EzOTYpIHwgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdCAqLwppbXBvcnR7U2Vzc2lvbiBhcyBlfWZyb20ibm9kZTppbnNwZWN0b3IvcHJvbWlzZXMiO2ltcG9ydHt3b3JrZXJEYXRhIGFzIHR9ZnJvbSJub2RlOndvcmtlcl90aHJlYWRzIjtjb25zdCBuPSJ1bmRlZmluZWQiPT10eXBlb2YgX19TRU5UUllfREVCVUdfX3x8X19TRU5UUllfREVCVUdfXyxvPSI5LjMwLjAiLGk9Z2xvYmFsVGhpcztjb25zdCBhPVsiZGVidWciLCJpbmZvIiwid2FybiIsImVycm9yIiwibG9nIiwiYXNzZXJ0IiwidHJhY2UiXSxzPXt9O2Z1bmN0aW9uIGMoZSl7aWYoISgiY29uc29sZSJpbiBpKSlyZXR1cm4gZSgpO2NvbnN0IHQ9aS5jb25zb2xlLG49e30sbz1PYmplY3Qua2V5cyhzKTtvLmZvckVhY2goKGU9Pntjb25zdCBvPXNbZV07bltlXT10W2VdLHRbZV09b30pKTt0cnl7cmV0dXJuIGUoKX1maW5hbGx5e28uZm9yRWFjaCgoZT0+e3RbZV09bltlXX0pKX19IWZ1bmN0aW9uKGUsdCxuPWkpe2NvbnN0IGE9bi5fX1NFTlRSWV9fPW4uX19TRU5UUllfX3x8e30scz1hW29dPWFbb118fHt9O3NbZV18fChzW2VdPXQoKSl9KCJsb2dnZXIiLChmdW5jdGlvbigpe2xldCBlPSExO2NvbnN0IHQ9e2VuYWJsZTooKT0+e2U9ITB9LGRpc2FibGU6KCk9PntlPSExfSxpc0VuYWJsZWQ6KCk9PmV9O3JldHVybiBuP2EuZm9yRWFjaCgobj0+e3Rbbl09KC4uLnQpPT57ZSYmYygoKCk9PntpLmNvbnNvbGVbbl0oYFNlbnRyeSBMb2dnZXIgWyR7bn1dOmAsLi4udCl9KSl9fSkpOmEuZm9yRWFjaCgoZT0+e3RbZV09KCk9Pnt9fSkpLHR9KSk7Y29uc3Qgcj0iX19TRU5UUllfRVJST1JfTE9DQUxfVkFSSUFCTEVTX18iO2NvbnN0IHU9dDtmdW5jdGlvbiBsKC4uLmUpe3UuZGVidWcmJmMoKCgpPT5jb25zb2xlLmxvZygiW0xvY2FsVmFyaWFibGVzIFdvcmtlcl0iLC4uLmUpKSl9YXN5bmMgZnVuY3Rpb24gZihlLHQsbixvKXtjb25zdCBpPWF3YWl0IGUucG9zdCgiUnVudGltZS5nZXRQcm9wZXJ0aWVzIix7b2JqZWN0SWQ6dCxvd25Qcm9wZXJ0aWVzOiEwfSk7b1tuXT1pLnJlc3VsdC5maWx0ZXIoKGU9PiJsZW5ndGgiIT09ZS5uYW1lJiYhaXNOYU4ocGFyc2VJbnQoZS5uYW1lLDEwKSkpKS5zb3J0KCgoZSx0KT0+cGFyc2VJbnQoZS5uYW1lLDEwKS1wYXJzZUludCh0Lm5hbWUsMTApKSkubWFwKChlPT5lLnZhbHVlPy52YWx1ZSkpfWFzeW5jIGZ1bmN0aW9uIGcoZSx0LG4sbyl7Y29uc3QgaT1hd2FpdCBlLnBvc3QoIlJ1bnRpbWUuZ2V0UHJvcGVydGllcyIse29iamVjdElkOnQsb3duUHJvcGVydGllczohMH0pO29bbl09aS5yZXN1bHQubWFwKChlPT5bZS5uYW1lLGUudmFsdWU/LnZhbHVlXSkpLnJlZHVjZSgoKGUsW3Qsbl0pPT4oZVt0XT1uLGUpKSx7fSl9ZnVuY3Rpb24gZChlLHQpe2UudmFsdWUmJigidmFsdWUiaW4gZS52YWx1ZT92b2lkIDA9PT1lLnZhbHVlLnZhbHVlfHxudWxsPT09ZS52YWx1ZS52YWx1ZT90W2UubmFtZV09YDwke2UudmFsdWUudmFsdWV9PmA6dFtlLm5hbWVdPWUudmFsdWUudmFsdWU6ImRlc2NyaXB0aW9uImluIGUudmFsdWUmJiJmdW5jdGlvbiIhPT1lLnZhbHVlLnR5cGU/dFtlLm5hbWVdPWA8JHtlLnZhbHVlLmRlc2NyaXB0aW9ufT5gOiJ1bmRlZmluZWQiPT09ZS52YWx1ZS50eXBlJiYodFtlLm5hbWVdPSI8dW5kZWZpbmVkPiIpKX1hc3luYyBmdW5jdGlvbiBiKGUsdCl7Y29uc3Qgbj1hd2FpdCBlLnBvc3QoIlJ1bnRpbWUuZ2V0UHJvcGVydGllcyIse29iamVjdElkOnQsb3duUHJvcGVydGllczohMH0pLG89e307Zm9yKGNvbnN0IHQgb2Ygbi5yZXN1bHQpaWYodC52YWx1ZT8ub2JqZWN0SWQmJiJBcnJheSI9PT10LnZhbHVlLmNsYXNzTmFtZSl7Y29uc3Qgbj10LnZhbHVlLm9iamVjdElkO2F3YWl0IGYoZSxuLHQubmFtZSxvKX1lbHNlIGlmKHQudmFsdWU/Lm9iamVjdElkJiYiT2JqZWN0Ij09PXQudmFsdWUuY2xhc3NOYW1lKXtjb25zdCBuPXQudmFsdWUub2JqZWN0SWQ7YXdhaXQgZyhlLG4sdC5uYW1lLG8pfWVsc2UgdC52YWx1ZSYmZCh0LG8pO3JldHVybiBvfWxldCBwOyhhc3luYyBmdW5jdGlvbigpe2NvbnN0IHQ9bmV3IGU7dC5jb25uZWN0VG9NYWluVGhyZWFkKCksbCgiQ29ubmVjdGVkIHRvIG1haW4gdGhyZWFkIik7bGV0IG49ITE7dC5vbigiRGVidWdnZXIucmVzdW1lZCIsKCgpPT57bj0hMX0pKSx0Lm9uKCJEZWJ1Z2dlci5wYXVzZWQiLChlPT57bj0hMCxhc3luYyBmdW5jdGlvbihlLHtyZWFzb246dCxkYXRhOntvYmplY3RJZDpufSxjYWxsRnJhbWVzOm99KXtpZigiZXhjZXB0aW9uIiE9PXQmJiJwcm9taXNlUmVqZWN0aW9uIiE9PXQpcmV0dXJuO2lmKHA/LigpLG51bGw9PW4pcmV0dXJuO2NvbnN0IGk9W107Zm9yKGxldCB0PTA7dDxvLmxlbmd0aDt0Kyspe2NvbnN0e3Njb3BlQ2hhaW46bixmdW5jdGlvbk5hbWU6YSx0aGlzOnN9PW9bdF0sYz1uLmZpbmQoKGU9PiJsb2NhbCI9PT1lLnR5cGUpKSxyPSJnbG9iYWwiIT09cy5jbGFzc05hbWUmJnMuY2xhc3NOYW1lP2Ake3MuY2xhc3NOYW1lfS4ke2F9YDphO2lmKHZvaWQgMD09PWM/Lm9iamVjdC5vYmplY3RJZClpW3RdPXtmdW5jdGlvbjpyfTtlbHNle2NvbnN0IG49YXdhaXQgYihlLGMub2JqZWN0Lm9iamVjdElkKTtpW3RdPXtmdW5jdGlvbjpyLHZhcnM6bn19fWF3YWl0IGUucG9zdCgiUnVudGltZS5jYWxsRnVuY3Rpb25PbiIse2Z1bmN0aW9uRGVjbGFyYXRpb246YGZ1bmN0aW9uKCkgeyB0aGlzLiR7cn0gPSB0aGlzLiR7cn0gfHwgJHtKU09OLnN0cmluZ2lmeShpKX07IH1gLHNpbGVudDohMCxvYmplY3RJZDpufSksYXdhaXQgZS5wb3N0KCJSdW50aW1lLnJlbGVhc2VPYmplY3QiLHtvYmplY3RJZDpufSl9KHQsZS5wYXJhbXMpLnRoZW4oKGFzeW5jKCk9PntuJiZhd2FpdCB0LnBvc3QoIkRlYnVnZ2VyLnJlc3VtZSIpfSksKGFzeW5jIGU9PntuJiZhd2FpdCB0LnBvc3QoIkRlYnVnZ2VyLnJlc3VtZSIpfSkpfSkpLGF3YWl0IHQucG9zdCgiRGVidWdnZXIuZW5hYmxlIik7Y29uc3Qgbz0hMSE9PXUuY2FwdHVyZUFsbEV4Y2VwdGlvbnM7aWYoYXdhaXQgdC5wb3N0KCJEZWJ1Z2dlci5zZXRQYXVzZU9uRXhjZXB0aW9ucyIse3N0YXRlOm8/ImFsbCI6InVuY2F1Z2h0In0pLG8pe2NvbnN0IGU9dS5tYXhFeGNlcHRpb25zUGVyU2Vjb25kfHw1MDtwPWZ1bmN0aW9uKGUsdCxuKXtsZXQgbz0wLGk9NSxhPTA7cmV0dXJuIHNldEludGVydmFsKCgoKT0+ezA9PT1hP28+ZSYmKGkqPTIsbihpKSxpPjg2NDAwJiYoaT04NjQwMCksYT1pKTooYS09MSwwPT09YSYmdCgpKSxvPTB9KSwxZTMpLnVucmVmKCksKCk9PntvKz0xfX0oZSwoYXN5bmMoKT0+e2woIlJhdGUtbGltaXQgbGlmdGVkLiIpLGF3YWl0IHQucG9zdCgiRGVidWdnZXIuc2V0UGF1c2VPbkV4Y2VwdGlvbnMiLHtzdGF0ZToiYWxsIn0pfSksKGFzeW5jIGU9PntsKGBSYXRlLWxpbWl0IGV4Y2VlZGVkLiBEaXNhYmxpbmcgY2FwdHVyaW5nIG9mIGNhdWdodCBleGNlcHRpb25zIGZvciAke2V9IHNlY29uZHMuYCksYXdhaXQgdC5wb3N0KCJEZWJ1Z2dlci5zZXRQYXVzZU9uRXhjZXB0aW9ucyIse3N0YXRlOiJ1bmNhdWdodCJ9KX0pKX19KSgpLmNhdGNoKChlPT57bCgiRmFpbGVkIHRvIHN0YXJ0IGRlYnVnZ2VyIixlKX0pKSxzZXRJbnRlcnZhbCgoKCk9Pnt9KSwxZTQpOw==';\n\nfunction log(...args) {\n  core.logger.log('[LocalVariables]', ...args);\n}\n\n/**\n * Adds local variables to exception frames\n */\nconst localVariablesAsyncIntegration = core.defineIntegration(((\n  integrationOptions = {},\n) => {\n  function addLocalVariablesToException(exception, localVariables) {\n    // Filter out frames where the function name is `new Promise` since these are in the error.stack frames\n    // but do not appear in the debugger call frames\n    const frames = (exception.stacktrace?.frames || []).filter(frame => frame.function !== 'new Promise');\n\n    for (let i = 0; i < frames.length; i++) {\n      // Sentry frames are in reverse order\n      const frameIndex = frames.length - i - 1;\n\n      const frameLocalVariables = localVariables[i];\n      const frame = frames[frameIndex];\n\n      if (!frame || !frameLocalVariables) {\n        // Drop out if we run out of frames to match up\n        break;\n      }\n\n      if (\n        // We need to have vars to add\n        frameLocalVariables.vars === undefined ||\n        // We're not interested in frames that are not in_app because the vars are not relevant\n        frame.in_app === false ||\n        // The function names need to match\n        !common.functionNamesMatch(frame.function, frameLocalVariables.function)\n      ) {\n        continue;\n      }\n\n      frame.vars = frameLocalVariables.vars;\n    }\n  }\n\n  function addLocalVariablesToEvent(event, hint) {\n    if (\n      hint.originalException &&\n      typeof hint.originalException === 'object' &&\n      common.LOCAL_VARIABLES_KEY in hint.originalException &&\n      Array.isArray(hint.originalException[common.LOCAL_VARIABLES_KEY])\n    ) {\n      for (const exception of event.exception?.values || []) {\n        addLocalVariablesToException(exception, hint.originalException[common.LOCAL_VARIABLES_KEY]);\n      }\n\n      hint.originalException[common.LOCAL_VARIABLES_KEY] = undefined;\n    }\n\n    return event;\n  }\n\n  async function startInspector() {\n    // We load inspector dynamically because on some platforms Node is built without inspector support\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    if (!inspector.url()) {\n      inspector.open(0);\n    }\n  }\n\n  function startWorker(options) {\n    const worker = new node_worker_threads.Worker(new URL(`data:application/javascript;base64,${base64WorkerScript}`), {\n      workerData: options,\n      // We don't want any Node args to be passed to the worker\n      execArgv: [],\n      env: { ...process.env, NODE_OPTIONS: undefined },\n    });\n\n    process.on('exit', () => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      worker.terminate();\n    });\n\n    worker.once('error', (err) => {\n      log('Worker error', err);\n    });\n\n    worker.once('exit', (code) => {\n      log('Worker exit', code);\n    });\n\n    // Ensure this thread can't block app exit\n    worker.unref();\n  }\n\n  return {\n    name: 'LocalVariablesAsync',\n    async setup(client) {\n      const clientOptions = client.getOptions();\n\n      if (!clientOptions.includeLocalVariables) {\n        return;\n      }\n\n      if (await debug.isDebuggerEnabled()) {\n        core.logger.warn('Local variables capture has been disabled because the debugger was already enabled');\n        return;\n      }\n\n      const options = {\n        ...integrationOptions,\n        debug: core.logger.isEnabled(),\n      };\n\n      startInspector().then(\n        () => {\n          try {\n            startWorker(options);\n          } catch (e) {\n            core.logger.error('Failed to start worker', e);\n          }\n        },\n        e => {\n          core.logger.error('Failed to start inspector', e);\n        },\n      );\n    },\n    processEvent(event, hint) {\n      return addLocalVariablesToEvent(event, hint);\n    },\n  };\n}) );\n\nexports.base64WorkerScript = base64WorkerScript;\nexports.localVariablesAsyncIntegration = localVariablesAsyncIntegration;\n//# sourceMappingURL=local-variables-async.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/nodeVersion.js\");\nconst debug = __webpack_require__(/*! ../../utils/debug.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/debug.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js\");\n\n/** Creates a unique hash from stack frames */\nfunction hashFrames(frames) {\n  if (frames === undefined) {\n    return;\n  }\n\n  // Only hash the 10 most recent frames (ie. the last 10)\n  return frames.slice(-10).reduce((acc, frame) => `${acc},${frame.function},${frame.lineno},${frame.colno}`, '');\n}\n\n/**\n * We use the stack parser to create a unique hash from the exception stack trace\n * This is used to lookup vars when the exception passes through the event processor\n */\nfunction hashFromStack(stackParser, stack) {\n  if (stack === undefined) {\n    return undefined;\n  }\n\n  return hashFrames(stackParser(stack, 1));\n}\n\n/** Creates a container for callbacks to be called sequentially */\nfunction createCallbackList(complete) {\n  // A collection of callbacks to be executed last to first\n  let callbacks = [];\n\n  let completedCalled = false;\n  function checkedComplete(result) {\n    callbacks = [];\n    if (completedCalled) {\n      return;\n    }\n    completedCalled = true;\n    complete(result);\n  }\n\n  // complete should be called last\n  callbacks.push(checkedComplete);\n\n  function add(fn) {\n    callbacks.push(fn);\n  }\n\n  function next(result) {\n    const popped = callbacks.pop() || checkedComplete;\n\n    try {\n      popped(result);\n    } catch (_) {\n      // If there is an error, we still want to call the complete callback\n      checkedComplete(result);\n    }\n  }\n\n  return { add, next };\n}\n\n/**\n * Promise API is available as `Experimental` and in Node 19 only.\n *\n * Callback-based API is `Stable` since v14 and `Experimental` since v8.\n * Because of that, we are creating our own `AsyncSession` class.\n *\n * https://nodejs.org/docs/latest-v19.x/api/inspector.html#promises-api\n * https://nodejs.org/docs/latest-v14.x/api/inspector.html\n */\nclass AsyncSession  {\n  /** Throws if inspector API is not available */\n   constructor(  _session) {this._session = _session;\n    //\n  }\n\n   static async create(orDefault) {\n    if (orDefault) {\n      return orDefault;\n    }\n\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    return new AsyncSession(new inspector.Session());\n  }\n\n  /** @inheritdoc */\n   configureAndConnect(onPause, captureAll) {\n    this._session.connect();\n\n    this._session.on('Debugger.paused', event => {\n      onPause(event, () => {\n        // After the pause work is complete, resume execution or the exception context memory is leaked\n        this._session.post('Debugger.resume');\n      });\n    });\n\n    this._session.post('Debugger.enable');\n    this._session.post('Debugger.setPauseOnExceptions', { state: captureAll ? 'all' : 'uncaught' });\n  }\n\n   setPauseOnExceptions(captureAll) {\n    this._session.post('Debugger.setPauseOnExceptions', { state: captureAll ? 'all' : 'uncaught' });\n  }\n\n  /** @inheritdoc */\n   getLocalVariables(objectId, complete) {\n    this._getProperties(objectId, props => {\n      const { add, next } = createCallbackList(complete);\n\n      for (const prop of props) {\n        if (prop.value?.objectId && prop.value.className === 'Array') {\n          const id = prop.value.objectId;\n          add(vars => this._unrollArray(id, prop.name, vars, next));\n        } else if (prop.value?.objectId && prop.value.className === 'Object') {\n          const id = prop.value.objectId;\n          add(vars => this._unrollObject(id, prop.name, vars, next));\n        } else if (prop.value) {\n          add(vars => this._unrollOther(prop, vars, next));\n        }\n      }\n\n      next({});\n    });\n  }\n\n  /**\n   * Gets all the PropertyDescriptors of an object\n   */\n   _getProperties(objectId, next) {\n    this._session.post(\n      'Runtime.getProperties',\n      {\n        objectId,\n        ownProperties: true,\n      },\n      (err, params) => {\n        if (err) {\n          next([]);\n        } else {\n          next(params.result);\n        }\n      },\n    );\n  }\n\n  /**\n   * Unrolls an array property\n   */\n   _unrollArray(objectId, name, vars, next) {\n    this._getProperties(objectId, props => {\n      vars[name] = props\n        .filter(v => v.name !== 'length' && !isNaN(parseInt(v.name, 10)))\n        .sort((a, b) => parseInt(a.name, 10) - parseInt(b.name, 10))\n        .map(v => v.value?.value);\n\n      next(vars);\n    });\n  }\n\n  /**\n   * Unrolls an object property\n   */\n   _unrollObject(objectId, name, vars, next) {\n    this._getProperties(objectId, props => {\n      vars[name] = props\n        .map(v => [v.name, v.value?.value])\n        .reduce((obj, [key, val]) => {\n          obj[key] = val;\n          return obj;\n        }, {} );\n\n      next(vars);\n    });\n  }\n\n  /**\n   * Unrolls other properties\n   */\n   _unrollOther(prop, vars, next) {\n    if (prop.value) {\n      if ('value' in prop.value) {\n        if (prop.value.value === undefined || prop.value.value === null) {\n          vars[prop.name] = `<${prop.value.value}>`;\n        } else {\n          vars[prop.name] = prop.value.value;\n        }\n      } else if ('description' in prop.value && prop.value.type !== 'function') {\n        vars[prop.name] = `<${prop.value.description}>`;\n      } else if (prop.value.type === 'undefined') {\n        vars[prop.name] = '<undefined>';\n      }\n    }\n\n    next(vars);\n  }\n}\n\nconst INTEGRATION_NAME = 'LocalVariables';\n\n/**\n * Adds local variables to exception frames\n */\nconst _localVariablesSyncIntegration = ((\n  options = {},\n  sessionOverride,\n) => {\n  const cachedFrames = new core.LRUMap(20);\n  let rateLimiter;\n  let shouldProcessEvent = false;\n\n  function addLocalVariablesToException(exception) {\n    const hash = hashFrames(exception.stacktrace?.frames);\n\n    if (hash === undefined) {\n      return;\n    }\n\n    // Check if we have local variables for an exception that matches the hash\n    // remove is identical to get but also removes the entry from the cache\n    const cachedFrame = cachedFrames.remove(hash);\n\n    if (cachedFrame === undefined) {\n      return;\n    }\n\n    // Filter out frames where the function name is `new Promise` since these are in the error.stack frames\n    // but do not appear in the debugger call frames\n    const frames = (exception.stacktrace?.frames || []).filter(frame => frame.function !== 'new Promise');\n\n    for (let i = 0; i < frames.length; i++) {\n      // Sentry frames are in reverse order\n      const frameIndex = frames.length - i - 1;\n\n      const cachedFrameVariable = cachedFrame[i];\n      const frameVariable = frames[frameIndex];\n\n      // Drop out if we run out of frames to match up\n      if (!frameVariable || !cachedFrameVariable) {\n        break;\n      }\n\n      if (\n        // We need to have vars to add\n        cachedFrameVariable.vars === undefined ||\n        // We're not interested in frames that are not in_app because the vars are not relevant\n        frameVariable.in_app === false ||\n        // The function names need to match\n        !common.functionNamesMatch(frameVariable.function, cachedFrameVariable.function)\n      ) {\n        continue;\n      }\n\n      frameVariable.vars = cachedFrameVariable.vars;\n    }\n  }\n\n  function addLocalVariablesToEvent(event) {\n    for (const exception of event.exception?.values || []) {\n      addLocalVariablesToException(exception);\n    }\n\n    return event;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    async setupOnce() {\n      const client = core.getClient();\n      const clientOptions = client?.getOptions();\n\n      if (!clientOptions?.includeLocalVariables) {\n        return;\n      }\n\n      // Only setup this integration if the Node version is >= v18\n      // https://github.com/getsentry/sentry-javascript/issues/7697\n      const unsupportedNodeVersion = nodeVersion.NODE_MAJOR < 18;\n\n      if (unsupportedNodeVersion) {\n        core.logger.log('The `LocalVariables` integration is only supported on Node >= v18.');\n        return;\n      }\n\n      if (await debug.isDebuggerEnabled()) {\n        core.logger.warn('Local variables capture has been disabled because the debugger was already enabled');\n        return;\n      }\n\n      AsyncSession.create(sessionOverride).then(\n        session => {\n          function handlePaused(\n            stackParser,\n            { params: { reason, data, callFrames } },\n            complete,\n          ) {\n            if (reason !== 'exception' && reason !== 'promiseRejection') {\n              complete();\n              return;\n            }\n\n            rateLimiter?.();\n\n            // data.description contains the original error.stack\n            const exceptionHash = hashFromStack(stackParser, data.description);\n\n            if (exceptionHash == undefined) {\n              complete();\n              return;\n            }\n\n            const { add, next } = createCallbackList(frames => {\n              cachedFrames.set(exceptionHash, frames);\n              complete();\n            });\n\n            // Because we're queuing up and making all these calls synchronously, we can potentially overflow the stack\n            // For this reason we only attempt to get local variables for the first 5 frames\n            for (let i = 0; i < Math.min(callFrames.length, 5); i++) {\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              const { scopeChain, functionName, this: obj } = callFrames[i];\n\n              const localScope = scopeChain.find(scope => scope.type === 'local');\n\n              // obj.className is undefined in ESM modules\n              const fn =\n                obj.className === 'global' || !obj.className ? functionName : `${obj.className}.${functionName}`;\n\n              if (localScope?.object.objectId === undefined) {\n                add(frames => {\n                  frames[i] = { function: fn };\n                  next(frames);\n                });\n              } else {\n                const id = localScope.object.objectId;\n                add(frames =>\n                  session.getLocalVariables(id, vars => {\n                    frames[i] = { function: fn, vars };\n                    next(frames);\n                  }),\n                );\n              }\n            }\n\n            next([]);\n          }\n\n          const captureAll = options.captureAllExceptions !== false;\n\n          session.configureAndConnect(\n            (ev, complete) =>\n              handlePaused(clientOptions.stackParser, ev , complete),\n            captureAll,\n          );\n\n          if (captureAll) {\n            const max = options.maxExceptionsPerSecond || 50;\n\n            rateLimiter = common.createRateLimiter(\n              max,\n              () => {\n                core.logger.log('Local variables rate-limit lifted.');\n                session.setPauseOnExceptions(true);\n              },\n              seconds => {\n                core.logger.log(\n                  `Local variables rate-limit exceeded. Disabling capturing of caught exceptions for ${seconds} seconds.`,\n                );\n                session.setPauseOnExceptions(false);\n              },\n            );\n          }\n\n          shouldProcessEvent = true;\n        },\n        error => {\n          core.logger.log('The `LocalVariables` integration failed to start.', error);\n        },\n      );\n    },\n    processEvent(event) {\n      if (shouldProcessEvent) {\n        return addLocalVariablesToEvent(event);\n      }\n\n      return event;\n    },\n    // These are entirely for testing\n    _getCachedFramesCount() {\n      return cachedFrames.size;\n    },\n    _getFirstCachedFrame() {\n      return cachedFrames.values()[0];\n    },\n  };\n}) ;\n\n/**\n * Adds local variables to exception frames.\n */\nconst localVariablesSyncIntegration = core.defineIntegration(_localVariablesSyncIntegration);\n\nexports.createCallbackList = createCallbackList;\nexports.hashFrames = hashFrames;\nexports.hashFromStack = hashFromStack;\nexports.localVariablesSyncIntegration = localVariablesSyncIntegration;\n//# sourceMappingURL=local-variables-sync.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/modules.js":(module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst commonjs = __webpack_require__(/*! ../utils/commonjs.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\n\nlet moduleCache;\n\nconst INTEGRATION_NAME = 'Modules';\n\n/**\n * `__SENTRY_SERVER_MODULES__` can be replaced at build time with the modules loaded by the server.\n * Right now, we leverage this in Next.js to circumvent the problem that we do not get access to these things at runtime.\n */\nconst SERVER_MODULES = typeof __SENTRY_SERVER_MODULES__ === 'undefined' ? {} : __SENTRY_SERVER_MODULES__;\n\nconst _modulesIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      event.modules = {\n        ...event.modules,\n        ..._getModules(),\n      };\n\n      return event;\n    },\n    getModules: _getModules,\n  };\n}) ;\n\n/**\n * Add node modules / packages to the event.\n * For this, multiple sources are used:\n * - They can be injected at build time into the __SENTRY_SERVER_MODULES__ variable (e.g. in Next.js)\n * - They are extracted from the dependencies & devDependencies in the package.json file\n * - They are extracted from the require.cache (CJS only)\n */\nconst modulesIntegration = _modulesIntegration;\n\nfunction getRequireCachePaths() {\n  try {\n    return __webpack_require__.c ? Object.keys(__webpack_require__.c ) : [];\n  } catch (e) {\n    return [];\n  }\n}\n\n/** Extract information about package.json modules */\nfunction collectModules() {\n  return {\n    ...SERVER_MODULES,\n    ...getModulesFromPackageJson(),\n    ...(commonjs.isCjs() ? collectRequireModules() : {}),\n  };\n}\n\n/** Extract information about package.json modules from require.cache */\nfunction collectRequireModules() {\n  const mainPaths = __webpack_require__.c[__webpack_require__.s]?.paths || [];\n  const paths = getRequireCachePaths();\n\n  // We start with the modules from package.json (if possible)\n  // These may be overwritten by more specific versions from the require.cache\n  const infos = {};\n  const seen = new Set();\n\n  paths.forEach(path => {\n    let dir = path;\n\n    /** Traverse directories upward in the search of package.json file */\n    const updir = () => {\n      const orig = dir;\n      dir = node_path.dirname(orig);\n\n      if (!dir || orig === dir || seen.has(orig)) {\n        return undefined;\n      }\n      if (mainPaths.indexOf(dir) < 0) {\n        return updir();\n      }\n\n      const pkgfile = node_path.join(orig, 'package.json');\n      seen.add(orig);\n\n      if (!node_fs.existsSync(pkgfile)) {\n        return updir();\n      }\n\n      try {\n        const info = JSON.parse(node_fs.readFileSync(pkgfile, 'utf8'))\n\n;\n        infos[info.name] = info.version;\n      } catch (_oO) {\n        // no-empty\n      }\n    };\n\n    updir();\n  });\n\n  return infos;\n}\n\n/** Fetches the list of modules and the versions loaded by the entry file for your node.js app. */\nfunction _getModules() {\n  if (!moduleCache) {\n    moduleCache = collectModules();\n  }\n  return moduleCache;\n}\n\nfunction getPackageJson() {\n  try {\n    const filePath = node_path.join(process.cwd(), 'package.json');\n    const packageJson = JSON.parse(node_fs.readFileSync(filePath, 'utf8')) ;\n\n    return packageJson;\n  } catch (e) {\n    return {};\n  }\n}\n\nfunction getModulesFromPackageJson() {\n  const packageJson = getPackageJson();\n\n  return {\n    ...packageJson.dependencies,\n    ...packageJson.devDependencies,\n  };\n}\n\nexports.modulesIntegration = modulesIntegration;\n//# sourceMappingURL=modules.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbW9kdWxlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxnQkFBZ0IsbUJBQU8sQ0FBQyx3QkFBUztBQUNqQyxrQkFBa0IsbUJBQU8sQ0FBQyw0QkFBVztBQUNyQyxpQkFBaUIsbUJBQU8sQ0FBQywyRkFBc0I7O0FBRS9DOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFOztBQUU3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcscUJBQWEsZUFBZSxxQkFBYTtBQUNwRCxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLDRDQUFZO0FBQ2hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXGludGVncmF0aW9uc1xcbW9kdWxlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3Qgbm9kZV9mcyA9IHJlcXVpcmUoJ25vZGU6ZnMnKTtcbmNvbnN0IG5vZGVfcGF0aCA9IHJlcXVpcmUoJ25vZGU6cGF0aCcpO1xuY29uc3QgY29tbW9uanMgPSByZXF1aXJlKCcuLi91dGlscy9jb21tb25qcy5qcycpO1xuXG5sZXQgbW9kdWxlQ2FjaGU7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTW9kdWxlcyc7XG5cbi8qKlxuICogYF9fU0VOVFJZX1NFUlZFUl9NT0RVTEVTX19gIGNhbiBiZSByZXBsYWNlZCBhdCBidWlsZCB0aW1lIHdpdGggdGhlIG1vZHVsZXMgbG9hZGVkIGJ5IHRoZSBzZXJ2ZXIuXG4gKiBSaWdodCBub3csIHdlIGxldmVyYWdlIHRoaXMgaW4gTmV4dC5qcyB0byBjaXJjdW12ZW50IHRoZSBwcm9ibGVtIHRoYXQgd2UgZG8gbm90IGdldCBhY2Nlc3MgdG8gdGhlc2UgdGhpbmdzIGF0IHJ1bnRpbWUuXG4gKi9cbmNvbnN0IFNFUlZFUl9NT0RVTEVTID0gdHlwZW9mIF9fU0VOVFJZX1NFUlZFUl9NT0RVTEVTX18gPT09ICd1bmRlZmluZWQnID8ge30gOiBfX1NFTlRSWV9TRVJWRVJfTU9EVUxFU19fO1xuXG5jb25zdCBfbW9kdWxlc0ludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHByb2Nlc3NFdmVudChldmVudCkge1xuICAgICAgZXZlbnQubW9kdWxlcyA9IHtcbiAgICAgICAgLi4uZXZlbnQubW9kdWxlcyxcbiAgICAgICAgLi4uX2dldE1vZHVsZXMoKSxcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBldmVudDtcbiAgICB9LFxuICAgIGdldE1vZHVsZXM6IF9nZXRNb2R1bGVzLFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZCBub2RlIG1vZHVsZXMgLyBwYWNrYWdlcyB0byB0aGUgZXZlbnQuXG4gKiBGb3IgdGhpcywgbXVsdGlwbGUgc291cmNlcyBhcmUgdXNlZDpcbiAqIC0gVGhleSBjYW4gYmUgaW5qZWN0ZWQgYXQgYnVpbGQgdGltZSBpbnRvIHRoZSBfX1NFTlRSWV9TRVJWRVJfTU9EVUxFU19fIHZhcmlhYmxlIChlLmcuIGluIE5leHQuanMpXG4gKiAtIFRoZXkgYXJlIGV4dHJhY3RlZCBmcm9tIHRoZSBkZXBlbmRlbmNpZXMgJiBkZXZEZXBlbmRlbmNpZXMgaW4gdGhlIHBhY2thZ2UuanNvbiBmaWxlXG4gKiAtIFRoZXkgYXJlIGV4dHJhY3RlZCBmcm9tIHRoZSByZXF1aXJlLmNhY2hlIChDSlMgb25seSlcbiAqL1xuY29uc3QgbW9kdWxlc0ludGVncmF0aW9uID0gX21vZHVsZXNJbnRlZ3JhdGlvbjtcblxuZnVuY3Rpb24gZ2V0UmVxdWlyZUNhY2hlUGF0aHMoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHJlcXVpcmUuY2FjaGUgPyBPYmplY3Qua2V5cyhyZXF1aXJlLmNhY2hlICkgOiBbXTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxufVxuXG4vKiogRXh0cmFjdCBpbmZvcm1hdGlvbiBhYm91dCBwYWNrYWdlLmpzb24gbW9kdWxlcyAqL1xuZnVuY3Rpb24gY29sbGVjdE1vZHVsZXMoKSB7XG4gIHJldHVybiB7XG4gICAgLi4uU0VSVkVSX01PRFVMRVMsXG4gICAgLi4uZ2V0TW9kdWxlc0Zyb21QYWNrYWdlSnNvbigpLFxuICAgIC4uLihjb21tb25qcy5pc0NqcygpID8gY29sbGVjdFJlcXVpcmVNb2R1bGVzKCkgOiB7fSksXG4gIH07XG59XG5cbi8qKiBFeHRyYWN0IGluZm9ybWF0aW9uIGFib3V0IHBhY2thZ2UuanNvbiBtb2R1bGVzIGZyb20gcmVxdWlyZS5jYWNoZSAqL1xuZnVuY3Rpb24gY29sbGVjdFJlcXVpcmVNb2R1bGVzKCkge1xuICBjb25zdCBtYWluUGF0aHMgPSByZXF1aXJlLm1haW4/LnBhdGhzIHx8IFtdO1xuICBjb25zdCBwYXRocyA9IGdldFJlcXVpcmVDYWNoZVBhdGhzKCk7XG5cbiAgLy8gV2Ugc3RhcnQgd2l0aCB0aGUgbW9kdWxlcyBmcm9tIHBhY2thZ2UuanNvbiAoaWYgcG9zc2libGUpXG4gIC8vIFRoZXNlIG1heSBiZSBvdmVyd3JpdHRlbiBieSBtb3JlIHNwZWNpZmljIHZlcnNpb25zIGZyb20gdGhlIHJlcXVpcmUuY2FjaGVcbiAgY29uc3QgaW5mb3MgPSB7fTtcbiAgY29uc3Qgc2VlbiA9IG5ldyBTZXQoKTtcblxuICBwYXRocy5mb3JFYWNoKHBhdGggPT4ge1xuICAgIGxldCBkaXIgPSBwYXRoO1xuXG4gICAgLyoqIFRyYXZlcnNlIGRpcmVjdG9yaWVzIHVwd2FyZCBpbiB0aGUgc2VhcmNoIG9mIHBhY2thZ2UuanNvbiBmaWxlICovXG4gICAgY29uc3QgdXBkaXIgPSAoKSA9PiB7XG4gICAgICBjb25zdCBvcmlnID0gZGlyO1xuICAgICAgZGlyID0gbm9kZV9wYXRoLmRpcm5hbWUob3JpZyk7XG5cbiAgICAgIGlmICghZGlyIHx8IG9yaWcgPT09IGRpciB8fCBzZWVuLmhhcyhvcmlnKSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKG1haW5QYXRocy5pbmRleE9mKGRpcikgPCAwKSB7XG4gICAgICAgIHJldHVybiB1cGRpcigpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwa2dmaWxlID0gbm9kZV9wYXRoLmpvaW4ob3JpZywgJ3BhY2thZ2UuanNvbicpO1xuICAgICAgc2Vlbi5hZGQob3JpZyk7XG5cbiAgICAgIGlmICghbm9kZV9mcy5leGlzdHNTeW5jKHBrZ2ZpbGUpKSB7XG4gICAgICAgIHJldHVybiB1cGRpcigpO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBpbmZvID0gSlNPTi5wYXJzZShub2RlX2ZzLnJlYWRGaWxlU3luYyhwa2dmaWxlLCAndXRmOCcpKVxuXG47XG4gICAgICAgIGluZm9zW2luZm8ubmFtZV0gPSBpbmZvLnZlcnNpb247XG4gICAgICB9IGNhdGNoIChfb08pIHtcbiAgICAgICAgLy8gbm8tZW1wdHlcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdXBkaXIoKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGluZm9zO1xufVxuXG4vKiogRmV0Y2hlcyB0aGUgbGlzdCBvZiBtb2R1bGVzIGFuZCB0aGUgdmVyc2lvbnMgbG9hZGVkIGJ5IHRoZSBlbnRyeSBmaWxlIGZvciB5b3VyIG5vZGUuanMgYXBwLiAqL1xuZnVuY3Rpb24gX2dldE1vZHVsZXMoKSB7XG4gIGlmICghbW9kdWxlQ2FjaGUpIHtcbiAgICBtb2R1bGVDYWNoZSA9IGNvbGxlY3RNb2R1bGVzKCk7XG4gIH1cbiAgcmV0dXJuIG1vZHVsZUNhY2hlO1xufVxuXG5mdW5jdGlvbiBnZXRQYWNrYWdlSnNvbigpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBmaWxlUGF0aCA9IG5vZGVfcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdwYWNrYWdlLmpzb24nKTtcbiAgICBjb25zdCBwYWNrYWdlSnNvbiA9IEpTT04ucGFyc2Uobm9kZV9mcy5yZWFkRmlsZVN5bmMoZmlsZVBhdGgsICd1dGY4JykpIDtcblxuICAgIHJldHVybiBwYWNrYWdlSnNvbjtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7fTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRNb2R1bGVzRnJvbVBhY2thZ2VKc29uKCkge1xuICBjb25zdCBwYWNrYWdlSnNvbiA9IGdldFBhY2thZ2VKc29uKCk7XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5wYWNrYWdlSnNvbi5kZXBlbmRlbmNpZXMsXG4gICAgLi4ucGFja2FnZUpzb24uZGV2RGVwZW5kZW5jaWVzLFxuICB9O1xufVxuXG5leHBvcnRzLm1vZHVsZXNJbnRlZ3JhdGlvbiA9IG1vZHVsZXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZXMuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/modules.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/node-fetch/SentryNodeFetchInstrumentation.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core = __webpack_require__(/*! @opentelemetry/core */ \"(ssr)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core$1 = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(ssr)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst diagch = __webpack_require__(/*! diagnostics_channel */ \"diagnostics_channel\");\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/nodeVersion.js\");\nconst baggage = __webpack_require__(/*! ../../utils/baggage.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/baggage.js\");\n\nconst SENTRY_TRACE_HEADER = 'sentry-trace';\nconst SENTRY_BAGGAGE_HEADER = 'baggage';\n\n// For baggage, we make sure to merge this into a possibly existing header\nconst BAGGAGE_HEADER_REGEX = /baggage: (.*)\\r\\n/;\n\n/**\n * This custom node-fetch instrumentation is used to instrument outgoing fetch requests.\n * It does not emit any spans.\n *\n * The reason this is isolated from the OpenTelemetry instrumentation is that users may overwrite this,\n * which would lead to Sentry not working as expected.\n *\n * This is heavily inspired & adapted from:\n * https://github.com/open-telemetry/opentelemetry-js-contrib/blob/28e209a9da36bc4e1f8c2b0db7360170ed46cb80/plugins/node/instrumentation-undici/src/undici.ts\n */\nclass SentryNodeFetchInstrumentation extends instrumentation.InstrumentationBase {\n  // Keep ref to avoid https://github.com/nodejs/node/issues/42170 bug and for\n  // unsubscribing.\n\n   constructor(config = {}) {\n    super('@sentry/instrumentation-node-fetch', core.VERSION, config);\n    this._channelSubs = [];\n    this._propagationDecisionMap = new core$1.LRUMap(100);\n    this._ignoreOutgoingRequestsMap = new WeakMap();\n  }\n\n  /** No need to instrument files/modules. */\n   init() {\n    return undefined;\n  }\n\n  /** Disable the instrumentation. */\n   disable() {\n    super.disable();\n    this._channelSubs.forEach(sub => sub.unsubscribe());\n    this._channelSubs = [];\n  }\n\n  /** Enable the instrumentation. */\n   enable() {\n    // \"enabled\" handling is currently a bit messy with InstrumentationBase.\n    // If constructed with `{enabled: false}`, this `.enable()` is still called,\n    // and `this.getConfig().enabled !== this.isEnabled()`, creating confusion.\n    //\n    // For now, this class will setup for instrumenting if `.enable()` is\n    // called, but use `this.getConfig().enabled` to determine if\n    // instrumentation should be generated. This covers the more likely common\n    // case of config being given a construction time, rather than later via\n    // `instance.enable()`, `.disable()`, or `.setConfig()` calls.\n    super.enable();\n\n    // This method is called by the super-class constructor before ours is\n    // called. So we need to ensure the property is initalized.\n    this._channelSubs = this._channelSubs || [];\n\n    // Avoid to duplicate subscriptions\n    if (this._channelSubs.length > 0) {\n      return;\n    }\n\n    this._subscribeToChannel('undici:request:create', this._onRequestCreated.bind(this));\n    this._subscribeToChannel('undici:request:headers', this._onResponseHeaders.bind(this));\n  }\n\n  /**\n   * This method is called when a request is created.\n   * You can still mutate the request here before it is sent.\n   */\n   _onRequestCreated({ request }) {\n    const config = this.getConfig();\n    const enabled = config.enabled !== false;\n\n    if (!enabled) {\n      return;\n    }\n\n    const shouldIgnore = this._shouldIgnoreOutgoingRequest(request);\n    // We store this decisision for later so we do not need to re-evaluate it\n    // Additionally, the active context is not correct in _onResponseHeaders, so we need to make sure it is evaluated here\n    this._ignoreOutgoingRequestsMap.set(request, shouldIgnore);\n\n    if (shouldIgnore) {\n      return;\n    }\n\n    const url = getAbsoluteUrl(request.origin, request.path);\n\n    // Manually add the trace headers, if it applies\n    // Note: We do not use `propagation.inject()` here, because our propagator relies on an active span\n    // Which we do not have in this case\n    // The propagator _may_ overwrite this, but this should be fine as it is the same data\n    const tracePropagationTargets = core$1.getClient()?.getOptions().tracePropagationTargets;\n    const addedHeaders = opentelemetry.shouldPropagateTraceForUrl(url, tracePropagationTargets, this._propagationDecisionMap)\n      ? core$1.getTraceData()\n      : undefined;\n\n    if (!addedHeaders) {\n      return;\n    }\n\n    const { 'sentry-trace': sentryTrace, baggage: baggage$1 } = addedHeaders;\n\n    // We do not want to overwrite existing headers here\n    // If the core UndiciInstrumentation is registered, it will already have set the headers\n    // We do not want to add any then\n    if (Array.isArray(request.headers)) {\n      const requestHeaders = request.headers;\n\n      // We do not want to overwrite existing header here, if it was already set\n      if (sentryTrace && !requestHeaders.includes(SENTRY_TRACE_HEADER)) {\n        requestHeaders.push(SENTRY_TRACE_HEADER, sentryTrace);\n      }\n\n      // For baggage, we make sure to merge this into a possibly existing header\n      const existingBaggagePos = requestHeaders.findIndex(header => header === SENTRY_BAGGAGE_HEADER);\n      if (baggage$1 && existingBaggagePos === -1) {\n        requestHeaders.push(SENTRY_BAGGAGE_HEADER, baggage$1);\n      } else if (baggage$1) {\n        const existingBaggage = requestHeaders[existingBaggagePos + 1];\n        const merged = baggage.mergeBaggageHeaders(existingBaggage, baggage$1);\n        if (merged) {\n          requestHeaders[existingBaggagePos + 1] = merged;\n        }\n      }\n    } else {\n      const requestHeaders = request.headers;\n      // We do not want to overwrite existing header here, if it was already set\n      if (sentryTrace && !requestHeaders.includes(`${SENTRY_TRACE_HEADER}:`)) {\n        request.headers += `${SENTRY_TRACE_HEADER}: ${sentryTrace}\\r\\n`;\n      }\n\n      const existingBaggage = request.headers.match(BAGGAGE_HEADER_REGEX)?.[1];\n      if (baggage$1 && !existingBaggage) {\n        request.headers += `${SENTRY_BAGGAGE_HEADER}: ${baggage$1}\\r\\n`;\n      } else if (baggage$1) {\n        const merged = baggage.mergeBaggageHeaders(existingBaggage, baggage$1);\n        if (merged) {\n          request.headers = request.headers.replace(BAGGAGE_HEADER_REGEX, `baggage: ${merged}\\r\\n`);\n        }\n      }\n    }\n  }\n\n  /**\n   * This method is called when a response is received.\n   */\n   _onResponseHeaders({ request, response }) {\n    const config = this.getConfig();\n    const enabled = config.enabled !== false;\n\n    if (!enabled) {\n      return;\n    }\n\n    const _breadcrumbs = config.breadcrumbs;\n    const breadCrumbsEnabled = typeof _breadcrumbs === 'undefined' ? true : _breadcrumbs;\n\n    const shouldIgnore = this._ignoreOutgoingRequestsMap.get(request);\n\n    if (breadCrumbsEnabled && !shouldIgnore) {\n      addRequestBreadcrumb(request, response);\n    }\n  }\n\n  /** Subscribe to a diagnostics channel. */\n   _subscribeToChannel(\n    diagnosticChannel,\n    onMessage,\n  ) {\n    // `diagnostics_channel` had a ref counting bug until v18.19.0.\n    // https://github.com/nodejs/node/pull/47520\n    const useNewSubscribe = nodeVersion.NODE_MAJOR > 18 || (nodeVersion.NODE_MAJOR === 18 && nodeVersion.NODE_MINOR >= 19);\n\n    let unsubscribe;\n    if (useNewSubscribe) {\n      diagch.subscribe?.(diagnosticChannel, onMessage);\n      unsubscribe = () => diagch.unsubscribe?.(diagnosticChannel, onMessage);\n    } else {\n      const channel = diagch.channel(diagnosticChannel);\n      channel.subscribe(onMessage);\n      unsubscribe = () => channel.unsubscribe(onMessage);\n    }\n\n    this._channelSubs.push({\n      name: diagnosticChannel,\n      unsubscribe,\n    });\n  }\n\n  /**\n   * Check if the given outgoing request should be ignored.\n   */\n   _shouldIgnoreOutgoingRequest(request) {\n    if (core.isTracingSuppressed(api.context.active())) {\n      return true;\n    }\n\n    // Add trace propagation headers\n    const url = getAbsoluteUrl(request.origin, request.path);\n    const ignoreOutgoingRequests = this.getConfig().ignoreOutgoingRequests;\n\n    if (typeof ignoreOutgoingRequests !== 'function' || !url) {\n      return false;\n    }\n\n    return ignoreOutgoingRequests(url);\n  }\n}\n\n/** Add a breadcrumb for outgoing requests. */\nfunction addRequestBreadcrumb(request, response) {\n  const data = getBreadcrumbData(request);\n\n  const statusCode = response.statusCode;\n  const level = core$1.getBreadcrumbLogLevelFromHttpStatusCode(statusCode);\n\n  core$1.addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        status_code: statusCode,\n        ...data,\n      },\n      type: 'http',\n      level,\n    },\n    {\n      event: 'response',\n      request,\n      response,\n    },\n  );\n}\n\nfunction getBreadcrumbData(request) {\n  try {\n    const url = getAbsoluteUrl(request.origin, request.path);\n    const parsedUrl = core$1.parseUrl(url);\n\n    const data = {\n      url: core$1.getSanitizedUrlString(parsedUrl),\n      'http.method': request.method || 'GET',\n    };\n\n    if (parsedUrl.search) {\n      data['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      data['http.fragment'] = parsedUrl.hash;\n    }\n\n    return data;\n  } catch {\n    return {};\n  }\n}\n\nfunction getAbsoluteUrl(origin, path = '/') {\n  try {\n    const url = new URL(path, origin);\n    return url.toString();\n  } catch {\n    // fallback: Construct it on our own\n    const url = `${origin}`;\n\n    if (url.endsWith('/') && path.startsWith('/')) {\n      return `${url}${path.slice(1)}`;\n    }\n\n    if (!url.endsWith('/') && !path.startsWith('/')) {\n      return `${url}/${path.slice(1)}`;\n    }\n\n    return `${url}${path}`;\n  }\n}\n\nexports.SentryNodeFetchInstrumentation = SentryNodeFetchInstrumentation;\n//# sourceMappingURL=SentryNodeFetchInstrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/node-fetch/SentryNodeFetchInstrumentation.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/node-fetch/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationUndici = __webpack_require__(/*! @opentelemetry/instrumentation-undici */ \"(ssr)/./node_modules/@opentelemetry/instrumentation-undici/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst SentryNodeFetchInstrumentation = __webpack_require__(/*! ./SentryNodeFetchInstrumentation.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/node-fetch/SentryNodeFetchInstrumentation.js\");\n\nconst INTEGRATION_NAME = 'NodeFetch';\n\nconst instrumentOtelNodeFetch = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  instrumentationUndici.UndiciInstrumentation,\n  (options) => {\n    return getConfigWithDefaults(options);\n  },\n);\n\nconst instrumentSentryNodeFetch = instrument.generateInstrumentOnce(\n  `${INTEGRATION_NAME}.sentry`,\n  SentryNodeFetchInstrumentation.SentryNodeFetchInstrumentation,\n  (options) => {\n    return options;\n  },\n);\n\nconst _nativeNodeFetchIntegration = ((options = {}) => {\n  return {\n    name: 'NodeFetch',\n    setupOnce() {\n      const instrumentSpans = _shouldInstrumentSpans(options, core.getClient()?.getOptions());\n\n      // This is the \"regular\" OTEL instrumentation that emits spans\n      if (instrumentSpans) {\n        instrumentOtelNodeFetch(options);\n      }\n\n      // This is the Sentry-specific instrumentation that creates breadcrumbs & propagates traces\n      // This must be registered after the OTEL one, to ensure that the core trace propagation logic takes presedence\n      // Otherwise, the sentry-trace header may be set multiple times\n      instrumentSentryNodeFetch(options);\n    },\n  };\n}) ;\n\nconst nativeNodeFetchIntegration = core.defineIntegration(_nativeNodeFetchIntegration);\n\n// Matching the behavior of the base instrumentation\nfunction getAbsoluteUrl(origin, path = '/') {\n  const url = `${origin}`;\n\n  if (url.endsWith('/') && path.startsWith('/')) {\n    return `${url}${path.slice(1)}`;\n  }\n\n  if (!url.endsWith('/') && !path.startsWith('/')) {\n    return `${url}/${path.slice(1)}`;\n  }\n\n  return `${url}${path}`;\n}\n\nfunction _shouldInstrumentSpans(options, clientOptions = {}) {\n  // If `spans` is passed in, it takes precedence\n  // Else, we by default emit spans, unless `skipOpenTelemetrySetup` is set to `true` or spans are not enabled\n  return typeof options.spans === 'boolean'\n    ? options.spans\n    : !clientOptions.skipOpenTelemetrySetup && core.hasSpansEnabled(clientOptions);\n}\n\nfunction getConfigWithDefaults(options = {}) {\n  const instrumentationConfig = {\n    requireParentforSpans: false,\n    ignoreRequestHook: request => {\n      const url = getAbsoluteUrl(request.origin, request.path);\n      const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n      const shouldIgnore = _ignoreOutgoingRequests && url && _ignoreOutgoingRequests(url);\n\n      return !!shouldIgnore;\n    },\n    startSpanHook: () => {\n      return {\n        [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.node_fetch',\n      };\n    },\n  } ;\n\n  return instrumentationConfig;\n}\n\nexports.nativeNodeFetchIntegration = nativeNodeFetchIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbm9kZS1mZXRjaC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSw4QkFBOEIsbUJBQU8sQ0FBQyw0SEFBdUM7QUFDN0UsYUFBYSxtQkFBTyxDQUFDLG9HQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLGdHQUEwQjtBQUNyRCx1Q0FBdUMsbUJBQU8sQ0FBQyxrSkFBcUM7O0FBRXBGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQSxLQUFLLGlCQUFpQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87O0FBRXhCO0FBQ0EsY0FBYyxJQUFJLEVBQUUsY0FBYztBQUNsQzs7QUFFQTtBQUNBLGNBQWMsSUFBSSxHQUFHLGNBQWM7QUFDbkM7O0FBRUEsWUFBWSxJQUFJLEVBQUUsS0FBSztBQUN2Qjs7QUFFQSwyREFBMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQSxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXGludGVncmF0aW9uc1xcbm9kZS1mZXRjaFxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvblVuZGljaSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi11bmRpY2knKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IFNlbnRyeU5vZGVGZXRjaEluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vU2VudHJ5Tm9kZUZldGNoSW5zdHJ1bWVudGF0aW9uLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTm9kZUZldGNoJztcblxuY29uc3QgaW5zdHJ1bWVudE90ZWxOb2RlRmV0Y2ggPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gIGluc3RydW1lbnRhdGlvblVuZGljaS5VbmRpY2lJbnN0cnVtZW50YXRpb24sXG4gIChvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIGdldENvbmZpZ1dpdGhEZWZhdWx0cyhvcHRpb25zKTtcbiAgfSxcbik7XG5cbmNvbnN0IGluc3RydW1lbnRTZW50cnlOb2RlRmV0Y2ggPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIGAke0lOVEVHUkFUSU9OX05BTUV9LnNlbnRyeWAsXG4gIFNlbnRyeU5vZGVGZXRjaEluc3RydW1lbnRhdGlvbi5TZW50cnlOb2RlRmV0Y2hJbnN0cnVtZW50YXRpb24sXG4gIChvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH0sXG4pO1xuXG5jb25zdCBfbmF0aXZlTm9kZUZldGNoSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdOb2RlRmV0Y2gnLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGNvbnN0IGluc3RydW1lbnRTcGFucyA9IF9zaG91bGRJbnN0cnVtZW50U3BhbnMob3B0aW9ucywgY29yZS5nZXRDbGllbnQoKT8uZ2V0T3B0aW9ucygpKTtcblxuICAgICAgLy8gVGhpcyBpcyB0aGUgXCJyZWd1bGFyXCIgT1RFTCBpbnN0cnVtZW50YXRpb24gdGhhdCBlbWl0cyBzcGFuc1xuICAgICAgaWYgKGluc3RydW1lbnRTcGFucykge1xuICAgICAgICBpbnN0cnVtZW50T3RlbE5vZGVGZXRjaChvcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgLy8gVGhpcyBpcyB0aGUgU2VudHJ5LXNwZWNpZmljIGluc3RydW1lbnRhdGlvbiB0aGF0IGNyZWF0ZXMgYnJlYWRjcnVtYnMgJiBwcm9wYWdhdGVzIHRyYWNlc1xuICAgICAgLy8gVGhpcyBtdXN0IGJlIHJlZ2lzdGVyZWQgYWZ0ZXIgdGhlIE9URUwgb25lLCB0byBlbnN1cmUgdGhhdCB0aGUgY29yZSB0cmFjZSBwcm9wYWdhdGlvbiBsb2dpYyB0YWtlcyBwcmVzZWRlbmNlXG4gICAgICAvLyBPdGhlcndpc2UsIHRoZSBzZW50cnktdHJhY2UgaGVhZGVyIG1heSBiZSBzZXQgbXVsdGlwbGUgdGltZXNcbiAgICAgIGluc3RydW1lbnRTZW50cnlOb2RlRmV0Y2gob3B0aW9ucyk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuY29uc3QgbmF0aXZlTm9kZUZldGNoSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9uYXRpdmVOb2RlRmV0Y2hJbnRlZ3JhdGlvbik7XG5cbi8vIE1hdGNoaW5nIHRoZSBiZWhhdmlvciBvZiB0aGUgYmFzZSBpbnN0cnVtZW50YXRpb25cbmZ1bmN0aW9uIGdldEFic29sdXRlVXJsKG9yaWdpbiwgcGF0aCA9ICcvJykge1xuICBjb25zdCB1cmwgPSBgJHtvcmlnaW59YDtcblxuICBpZiAodXJsLmVuZHNXaXRoKCcvJykgJiYgcGF0aC5zdGFydHNXaXRoKCcvJykpIHtcbiAgICByZXR1cm4gYCR7dXJsfSR7cGF0aC5zbGljZSgxKX1gO1xuICB9XG5cbiAgaWYgKCF1cmwuZW5kc1dpdGgoJy8nKSAmJiAhcGF0aC5zdGFydHNXaXRoKCcvJykpIHtcbiAgICByZXR1cm4gYCR7dXJsfS8ke3BhdGguc2xpY2UoMSl9YDtcbiAgfVxuXG4gIHJldHVybiBgJHt1cmx9JHtwYXRofWA7XG59XG5cbmZ1bmN0aW9uIF9zaG91bGRJbnN0cnVtZW50U3BhbnMob3B0aW9ucywgY2xpZW50T3B0aW9ucyA9IHt9KSB7XG4gIC8vIElmIGBzcGFuc2AgaXMgcGFzc2VkIGluLCBpdCB0YWtlcyBwcmVjZWRlbmNlXG4gIC8vIEVsc2UsIHdlIGJ5IGRlZmF1bHQgZW1pdCBzcGFucywgdW5sZXNzIGBza2lwT3BlblRlbGVtZXRyeVNldHVwYCBpcyBzZXQgdG8gYHRydWVgIG9yIHNwYW5zIGFyZSBub3QgZW5hYmxlZFxuICByZXR1cm4gdHlwZW9mIG9wdGlvbnMuc3BhbnMgPT09ICdib29sZWFuJ1xuICAgID8gb3B0aW9ucy5zcGFuc1xuICAgIDogIWNsaWVudE9wdGlvbnMuc2tpcE9wZW5UZWxlbWV0cnlTZXR1cCAmJiBjb3JlLmhhc1NwYW5zRW5hYmxlZChjbGllbnRPcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29uZmlnV2l0aERlZmF1bHRzKG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBpbnN0cnVtZW50YXRpb25Db25maWcgPSB7XG4gICAgcmVxdWlyZVBhcmVudGZvclNwYW5zOiBmYWxzZSxcbiAgICBpZ25vcmVSZXF1ZXN0SG9vazogcmVxdWVzdCA9PiB7XG4gICAgICBjb25zdCB1cmwgPSBnZXRBYnNvbHV0ZVVybChyZXF1ZXN0Lm9yaWdpbiwgcmVxdWVzdC5wYXRoKTtcbiAgICAgIGNvbnN0IF9pZ25vcmVPdXRnb2luZ1JlcXVlc3RzID0gb3B0aW9ucy5pZ25vcmVPdXRnb2luZ1JlcXVlc3RzO1xuICAgICAgY29uc3Qgc2hvdWxkSWdub3JlID0gX2lnbm9yZU91dGdvaW5nUmVxdWVzdHMgJiYgdXJsICYmIF9pZ25vcmVPdXRnb2luZ1JlcXVlc3RzKHVybCk7XG5cbiAgICAgIHJldHVybiAhIXNob3VsZElnbm9yZTtcbiAgICB9LFxuICAgIHN0YXJ0U3Bhbkhvb2s6ICgpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8uaHR0cC5vdGVsLm5vZGVfZmV0Y2gnLFxuICAgICAgfTtcbiAgICB9LFxuICB9IDtcblxuICByZXR1cm4gaW5zdHJ1bWVudGF0aW9uQ29uZmlnO1xufVxuXG5leHBvcnRzLm5hdGl2ZU5vZGVGZXRjaEludGVncmF0aW9uID0gbmF0aXZlTm9kZUZldGNoSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/node-fetch/index.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst errorhandling = __webpack_require__(/*! ../utils/errorhandling.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/errorhandling.js\");\n\nconst INTEGRATION_NAME = 'OnUncaughtException';\n\n/**\n * Add a global exception handler.\n */\nconst onUncaughtExceptionIntegration = core.defineIntegration((options = {}) => {\n  const optionsWithDefaults = {\n    exitEvenIfOtherHandlersAreRegistered: false,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      global.process.on('uncaughtException', makeErrorHandler(client, optionsWithDefaults));\n    },\n  };\n});\n\n/** Exported only for tests */\nfunction makeErrorHandler(client, options) {\n  const timeout = 2000;\n  let caughtFirstError = false;\n  let caughtSecondError = false;\n  let calledFatalError = false;\n  let firstError;\n\n  const clientOptions = client.getOptions();\n\n  return Object.assign(\n    (error) => {\n      let onFatalError = errorhandling.logAndExitProcess;\n\n      if (options.onFatalError) {\n        onFatalError = options.onFatalError;\n      } else if (clientOptions.onFatalError) {\n        onFatalError = clientOptions.onFatalError ;\n      }\n\n      // Attaching a listener to `uncaughtException` will prevent the node process from exiting. We generally do not\n      // want to alter this behaviour so we check for other listeners that users may have attached themselves and adjust\n      // exit behaviour of the SDK accordingly:\n      // - If other listeners are attached, do not exit.\n      // - If the only listener attached is ours, exit.\n      const userProvidedListenersCount = (global.process.listeners('uncaughtException') ).filter(\n        listener => {\n          // There are 3 listeners we ignore:\n          return (\n            // as soon as we're using domains this listener is attached by node itself\n            listener.name !== 'domainUncaughtExceptionClear' &&\n            // the handler we register for tracing\n            listener.tag !== 'sentry_tracingErrorCallback' &&\n            // the handler we register in this integration\n            (listener )._errorHandler !== true\n          );\n        },\n      ).length;\n\n      const processWouldExit = userProvidedListenersCount === 0;\n      const shouldApplyFatalHandlingLogic = options.exitEvenIfOtherHandlersAreRegistered || processWouldExit;\n\n      if (!caughtFirstError) {\n        // this is the first uncaught error and the ultimate reason for shutting down\n        // we want to do absolutely everything possible to ensure it gets captured\n        // also we want to make sure we don't go recursion crazy if more errors happen after this one\n        firstError = error;\n        caughtFirstError = true;\n\n        if (core.getClient() === client) {\n          core.captureException(error, {\n            originalException: error,\n            captureContext: {\n              level: 'fatal',\n            },\n            mechanism: {\n              handled: false,\n              type: 'onuncaughtexception',\n            },\n          });\n        }\n\n        if (!calledFatalError && shouldApplyFatalHandlingLogic) {\n          calledFatalError = true;\n          onFatalError(error);\n        }\n      } else {\n        if (shouldApplyFatalHandlingLogic) {\n          if (calledFatalError) {\n            // we hit an error *after* calling onFatalError - pretty boned at this point, just shut it down\n            debugBuild.DEBUG_BUILD &&\n              core.logger.warn(\n                'uncaught exception after calling fatal error shutdown callback - this is bad! forcing shutdown',\n              );\n            errorhandling.logAndExitProcess(error);\n          } else if (!caughtSecondError) {\n            // two cases for how we can hit this branch:\n            //   - capturing of first error blew up and we just caught the exception from that\n            //     - quit trying to capture, proceed with shutdown\n            //   - a second independent error happened while waiting for first error to capture\n            //     - want to avoid causing premature shutdown before first error capture finishes\n            // it's hard to immediately tell case 1 from case 2 without doing some fancy/questionable domain stuff\n            // so let's instead just delay a bit before we proceed with our action here\n            // in case 1, we just wait a bit unnecessarily but ultimately do the same thing\n            // in case 2, the delay hopefully made us wait long enough for the capture to finish\n            // two potential nonideal outcomes:\n            //   nonideal case 1: capturing fails fast, we sit around for a few seconds unnecessarily before proceeding correctly by calling onFatalError\n            //   nonideal case 2: case 2 happens, 1st error is captured but slowly, timeout completes before capture and we treat second error as the sendErr of (nonexistent) failure from trying to capture first error\n            // note that after hitting this branch, we might catch more errors where (caughtSecondError && !calledFatalError)\n            //   we ignore them - they don't matter to us, we're just waiting for the second error timeout to finish\n            caughtSecondError = true;\n            setTimeout(() => {\n              if (!calledFatalError) {\n                // it was probably case 1, let's treat err as the sendErr and call onFatalError\n                calledFatalError = true;\n                onFatalError(firstError, error);\n              }\n            }, timeout); // capturing could take at least sendTimeout to fail, plus an arbitrary second for how long it takes to collect surrounding source etc\n          }\n        }\n      }\n    },\n    { _errorHandler: true },\n  );\n}\n\nexports.makeErrorHandler = makeErrorHandler;\nexports.onUncaughtExceptionIntegration = onUncaughtExceptionIntegration;\n//# sourceMappingURL=onuncaughtexception.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst errorhandling = __webpack_require__(/*! ../utils/errorhandling.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/errorhandling.js\");\n\nconst INTEGRATION_NAME = 'OnUnhandledRejection';\n\nconst _onUnhandledRejectionIntegration = ((options = {}) => {\n  const opts = {\n    mode: 'warn',\n    ...options,\n  } ;\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      global.process.on('unhandledRejection', makeUnhandledPromiseHandler(client, opts));\n    },\n  };\n}) ;\n\n/**\n * Add a global promise rejection handler.\n */\nconst onUnhandledRejectionIntegration = core.defineIntegration(_onUnhandledRejectionIntegration);\n\n/**\n * Send an exception with reason\n * @param reason string\n * @param promise promise\n *\n * Exported only for tests.\n */\nfunction makeUnhandledPromiseHandler(\n  client,\n  options,\n) {\n  return function sendUnhandledPromise(reason, promise) {\n    if (core.getClient() !== client) {\n      return;\n    }\n\n    const level = options.mode === 'strict' ? 'fatal' : 'error';\n\n    core.captureException(reason, {\n      originalException: promise,\n      captureContext: {\n        extra: { unhandledPromiseRejection: true },\n        level,\n      },\n      mechanism: {\n        handled: false,\n        type: 'onunhandledrejection',\n      },\n    });\n\n    handleRejection(reason, options.mode);\n  };\n}\n\n/**\n * Handler for `mode` option\n */\nfunction handleRejection(reason, mode) {\n  // https://github.com/nodejs/node/blob/7cf6f9e964aa00772965391c23acda6d71972a9a/lib/internal/process/promises.js#L234-L240\n  const rejectionWarning =\n    'This error originated either by ' +\n    'throwing inside of an async function without a catch block, ' +\n    'or by rejecting a promise which was not handled with .catch().' +\n    ' The promise rejected with the reason:';\n\n  /* eslint-disable no-console */\n  if (mode === 'warn') {\n    core.consoleSandbox(() => {\n      console.warn(rejectionWarning);\n      console.error(reason && typeof reason === 'object' && 'stack' in reason ? reason.stack : reason);\n    });\n  } else if (mode === 'strict') {\n    core.consoleSandbox(() => {\n      console.warn(rejectionWarning);\n    });\n    errorhandling.logAndExitProcess(reason);\n  }\n  /* eslint-enable no-console */\n}\n\nexports.makeUnhandledPromiseHandler = makeUnhandledPromiseHandler;\nexports.onUnhandledRejectionIntegration = onUnhandledRejectionIntegration;\n//# sourceMappingURL=onunhandledrejection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvb251bmhhbmRsZWRyZWplY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLG9HQUFjO0FBQ25DLHNCQUFzQixtQkFBTyxDQUFDLHFHQUEyQjs7QUFFekQ7O0FBRUEsdURBQXVEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGlDQUFpQztBQUNsRDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQ0FBbUM7QUFDbkMsdUNBQXVDO0FBQ3ZDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAc2VudHJ5XFxub2RlXFxidWlsZFxcY2pzXFxpbnRlZ3JhdGlvbnNcXG9udW5oYW5kbGVkcmVqZWN0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBlcnJvcmhhbmRsaW5nID0gcmVxdWlyZSgnLi4vdXRpbHMvZXJyb3JoYW5kbGluZy5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ09uVW5oYW5kbGVkUmVqZWN0aW9uJztcblxuY29uc3QgX29uVW5oYW5kbGVkUmVqZWN0aW9uSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCBvcHRzID0ge1xuICAgIG1vZGU6ICd3YXJuJyxcbiAgICAuLi5vcHRpb25zLFxuICB9IDtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBnbG9iYWwucHJvY2Vzcy5vbigndW5oYW5kbGVkUmVqZWN0aW9uJywgbWFrZVVuaGFuZGxlZFByb21pc2VIYW5kbGVyKGNsaWVudCwgb3B0cykpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkIGEgZ2xvYmFsIHByb21pc2UgcmVqZWN0aW9uIGhhbmRsZXIuXG4gKi9cbmNvbnN0IG9uVW5oYW5kbGVkUmVqZWN0aW9uSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9vblVuaGFuZGxlZFJlamVjdGlvbkludGVncmF0aW9uKTtcblxuLyoqXG4gKiBTZW5kIGFuIGV4Y2VwdGlvbiB3aXRoIHJlYXNvblxuICogQHBhcmFtIHJlYXNvbiBzdHJpbmdcbiAqIEBwYXJhbSBwcm9taXNlIHByb21pc2VcbiAqXG4gKiBFeHBvcnRlZCBvbmx5IGZvciB0ZXN0cy5cbiAqL1xuZnVuY3Rpb24gbWFrZVVuaGFuZGxlZFByb21pc2VIYW5kbGVyKFxuICBjbGllbnQsXG4gIG9wdGlvbnMsXG4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlbmRVbmhhbmRsZWRQcm9taXNlKHJlYXNvbiwgcHJvbWlzZSkge1xuICAgIGlmIChjb3JlLmdldENsaWVudCgpICE9PSBjbGllbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBsZXZlbCA9IG9wdGlvbnMubW9kZSA9PT0gJ3N0cmljdCcgPyAnZmF0YWwnIDogJ2Vycm9yJztcblxuICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihyZWFzb24sIHtcbiAgICAgIG9yaWdpbmFsRXhjZXB0aW9uOiBwcm9taXNlLFxuICAgICAgY2FwdHVyZUNvbnRleHQ6IHtcbiAgICAgICAgZXh0cmE6IHsgdW5oYW5kbGVkUHJvbWlzZVJlamVjdGlvbjogdHJ1ZSB9LFxuICAgICAgICBsZXZlbCxcbiAgICAgIH0sXG4gICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICAgIHR5cGU6ICdvbnVuaGFuZGxlZHJlamVjdGlvbicsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgaGFuZGxlUmVqZWN0aW9uKHJlYXNvbiwgb3B0aW9ucy5tb2RlKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBIYW5kbGVyIGZvciBgbW9kZWAgb3B0aW9uXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZVJlamVjdGlvbihyZWFzb24sIG1vZGUpIHtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvN2NmNmY5ZTk2NGFhMDA3NzI5NjUzOTFjMjNhY2RhNmQ3MTk3MmE5YS9saWIvaW50ZXJuYWwvcHJvY2Vzcy9wcm9taXNlcy5qcyNMMjM0LUwyNDBcbiAgY29uc3QgcmVqZWN0aW9uV2FybmluZyA9XG4gICAgJ1RoaXMgZXJyb3Igb3JpZ2luYXRlZCBlaXRoZXIgYnkgJyArXG4gICAgJ3Rocm93aW5nIGluc2lkZSBvZiBhbiBhc3luYyBmdW5jdGlvbiB3aXRob3V0IGEgY2F0Y2ggYmxvY2ssICcgK1xuICAgICdvciBieSByZWplY3RpbmcgYSBwcm9taXNlIHdoaWNoIHdhcyBub3QgaGFuZGxlZCB3aXRoIC5jYXRjaCgpLicgK1xuICAgICcgVGhlIHByb21pc2UgcmVqZWN0ZWQgd2l0aCB0aGUgcmVhc29uOic7XG5cbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAobW9kZSA9PT0gJ3dhcm4nKSB7XG4gICAgY29yZS5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICBjb25zb2xlLndhcm4ocmVqZWN0aW9uV2FybmluZyk7XG4gICAgICBjb25zb2xlLmVycm9yKHJlYXNvbiAmJiB0eXBlb2YgcmVhc29uID09PSAnb2JqZWN0JyAmJiAnc3RhY2snIGluIHJlYXNvbiA/IHJlYXNvbi5zdGFjayA6IHJlYXNvbik7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAobW9kZSA9PT0gJ3N0cmljdCcpIHtcbiAgICBjb3JlLmNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgIGNvbnNvbGUud2FybihyZWplY3Rpb25XYXJuaW5nKTtcbiAgICB9KTtcbiAgICBlcnJvcmhhbmRsaW5nLmxvZ0FuZEV4aXRQcm9jZXNzKHJlYXNvbik7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG59XG5cbmV4cG9ydHMubWFrZVVuaGFuZGxlZFByb21pc2VIYW5kbGVyID0gbWFrZVVuaGFuZGxlZFByb21pc2VIYW5kbGVyO1xuZXhwb3J0cy5vblVuaGFuZGxlZFJlamVjdGlvbkludGVncmF0aW9uID0gb25VbmhhbmRsZWRSZWplY3Rpb25JbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9udW5oYW5kbGVkcmVqZWN0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/processSession.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'ProcessSession';\n\n/**\n * Records a Session for the current process to track release health.\n */\nconst processSessionIntegration = core.defineIntegration(() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      core.startSession();\n\n      // Emitted in the case of healthy sessions, error of `mechanism.handled: true` and unhandledrejections because\n      // The 'beforeExit' event is not emitted for conditions causing explicit termination,\n      // such as calling process.exit() or uncaught exceptions.\n      // Ref: https://nodejs.org/api/process.html#process_event_beforeexit\n      process.on('beforeExit', () => {\n        const session = core.getIsolationScope().getSession();\n\n        // Only call endSession, if the Session exists on Scope and SessionStatus is not a\n        // Terminal Status i.e. Exited or Crashed because\n        // \"When a session is moved away from ok it must not be updated anymore.\"\n        // Ref: https://develop.sentry.dev/sdk/sessions/\n        if (session?.status !== 'ok') {\n          core.endSession();\n        }\n      });\n    },\n  };\n});\n\nexports.processSessionIntegration = processSessionIntegration;\n//# sourceMappingURL=processSession.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvcHJvY2Vzc1Nlc3Npb24uanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLG9HQUFjOztBQUVuQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVELGlDQUFpQztBQUNqQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFwxXFxEb3dubG9hZHNcXHRhYm9yQWNhZGVteVVwZGF0ZWRcXHRhYm9yLWFjYWRlbXlcXG5vZGVfbW9kdWxlc1xcQHNlbnRyeVxcbm9kZVxcYnVpbGRcXGNqc1xcaW50ZWdyYXRpb25zXFxwcm9jZXNzU2Vzc2lvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1Byb2Nlc3NTZXNzaW9uJztcblxuLyoqXG4gKiBSZWNvcmRzIGEgU2Vzc2lvbiBmb3IgdGhlIGN1cnJlbnQgcHJvY2VzcyB0byB0cmFjayByZWxlYXNlIGhlYWx0aC5cbiAqL1xuY29uc3QgcHJvY2Vzc1Nlc3Npb25JbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgY29yZS5zdGFydFNlc3Npb24oKTtcblxuICAgICAgLy8gRW1pdHRlZCBpbiB0aGUgY2FzZSBvZiBoZWFsdGh5IHNlc3Npb25zLCBlcnJvciBvZiBgbWVjaGFuaXNtLmhhbmRsZWQ6IHRydWVgIGFuZCB1bmhhbmRsZWRyZWplY3Rpb25zIGJlY2F1c2VcbiAgICAgIC8vIFRoZSAnYmVmb3JlRXhpdCcgZXZlbnQgaXMgbm90IGVtaXR0ZWQgZm9yIGNvbmRpdGlvbnMgY2F1c2luZyBleHBsaWNpdCB0ZXJtaW5hdGlvbixcbiAgICAgIC8vIHN1Y2ggYXMgY2FsbGluZyBwcm9jZXNzLmV4aXQoKSBvciB1bmNhdWdodCBleGNlcHRpb25zLlxuICAgICAgLy8gUmVmOiBodHRwczovL25vZGVqcy5vcmcvYXBpL3Byb2Nlc3MuaHRtbCNwcm9jZXNzX2V2ZW50X2JlZm9yZWV4aXRcbiAgICAgIHByb2Nlc3Mub24oJ2JlZm9yZUV4aXQnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNlc3Npb24gPSBjb3JlLmdldElzb2xhdGlvblNjb3BlKCkuZ2V0U2Vzc2lvbigpO1xuXG4gICAgICAgIC8vIE9ubHkgY2FsbCBlbmRTZXNzaW9uLCBpZiB0aGUgU2Vzc2lvbiBleGlzdHMgb24gU2NvcGUgYW5kIFNlc3Npb25TdGF0dXMgaXMgbm90IGFcbiAgICAgICAgLy8gVGVybWluYWwgU3RhdHVzIGkuZS4gRXhpdGVkIG9yIENyYXNoZWQgYmVjYXVzZVxuICAgICAgICAvLyBcIldoZW4gYSBzZXNzaW9uIGlzIG1vdmVkIGF3YXkgZnJvbSBvayBpdCBtdXN0IG5vdCBiZSB1cGRhdGVkIGFueW1vcmUuXCJcbiAgICAgICAgLy8gUmVmOiBodHRwczovL2RldmVsb3Auc2VudHJ5LmRldi9zZGsvc2Vzc2lvbnMvXG4gICAgICAgIGlmIChzZXNzaW9uPy5zdGF0dXMgIT09ICdvaycpIHtcbiAgICAgICAgICBjb3JlLmVuZFNlc3Npb24oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn0pO1xuXG5leHBvcnRzLnByb2Nlc3NTZXNzaW9uSW50ZWdyYXRpb24gPSBwcm9jZXNzU2Vzc2lvbkludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvY2Vzc1Nlc3Npb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/processSession.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/spotlight.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Spotlight';\n\nconst _spotlightIntegration = ((options = {}) => {\n  const _options = {\n    sidecarUrl: options.sidecarUrl || 'http://localhost:8969/stream',\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      if (\n        typeof process === 'object' &&\n        process.env &&\n        \"development\" &&\n        \"development\" !== 'development'\n      ) {}\n      connectToSpotlight(client, _options);\n    },\n  };\n}) ;\n\n/**\n * Use this integration to send errors and transactions to Spotlight.\n *\n * Learn more about spotlight at https://spotlightjs.com\n *\n * Important: This integration only works with Node 18 or newer.\n */\nconst spotlightIntegration = core.defineIntegration(_spotlightIntegration);\n\nfunction connectToSpotlight(client, options) {\n  const spotlightUrl = parseSidecarUrl(options.sidecarUrl);\n  if (!spotlightUrl) {\n    return;\n  }\n\n  let failedRequests = 0;\n\n  client.on('beforeEnvelope', (envelope) => {\n    if (failedRequests > 3) {\n      core.logger.warn('[Spotlight] Disabled Sentry -> Spotlight integration due to too many failed requests');\n      return;\n    }\n\n    const serializedEnvelope = core.serializeEnvelope(envelope);\n    core.suppressTracing(() => {\n      const req = http.request(\n        {\n          method: 'POST',\n          path: spotlightUrl.pathname,\n          hostname: spotlightUrl.hostname,\n          port: spotlightUrl.port,\n          headers: {\n            'Content-Type': 'application/x-sentry-envelope',\n          },\n        },\n        res => {\n          if (res.statusCode && res.statusCode >= 200 && res.statusCode < 400) {\n            // Reset failed requests counter on success\n            failedRequests = 0;\n          }\n          res.on('data', () => {\n            // Drain socket\n          });\n\n          res.on('end', () => {\n            // Drain socket\n          });\n          res.setEncoding('utf8');\n        },\n      );\n\n      req.on('error', () => {\n        failedRequests++;\n        core.logger.warn('[Spotlight] Failed to send envelope to Spotlight Sidecar');\n      });\n      req.write(serializedEnvelope);\n      req.end();\n    });\n  });\n}\n\nfunction parseSidecarUrl(url) {\n  try {\n    return new URL(`${url}`);\n  } catch {\n    core.logger.warn(`[Spotlight] Invalid sidecar URL: ${url}`);\n    return undefined;\n  }\n}\n\nexports.INTEGRATION_NAME = INTEGRATION_NAME;\nexports.spotlightIntegration = spotlightIntegration;\n//# sourceMappingURL=spotlight.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvc3BvdGxpZ2h0LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyw0QkFBVztBQUNoQyxhQUFhLG1CQUFPLENBQUMsb0dBQWM7O0FBRW5DOztBQUVBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxhQUFvQjtBQUM1QixRQUFRLGFBQW9CO0FBQzVCLFFBQVEsRUFFRDtBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQSxzQkFBc0IsSUFBSTtBQUMxQixJQUFJO0FBQ0oseURBQXlELElBQUk7QUFDN0Q7QUFDQTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4Qiw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXGludGVncmF0aW9uc1xcc3BvdGxpZ2h0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBodHRwID0gcmVxdWlyZSgnbm9kZTpodHRwJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnU3BvdGxpZ2h0JztcblxuY29uc3QgX3Nwb3RsaWdodEludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgY29uc3QgX29wdGlvbnMgPSB7XG4gICAgc2lkZWNhclVybDogb3B0aW9ucy5zaWRlY2FyVXJsIHx8ICdodHRwOi8vbG9jYWxob3N0Ojg5Njkvc3RyZWFtJyxcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBpZiAoXG4gICAgICAgIHR5cGVvZiBwcm9jZXNzID09PSAnb2JqZWN0JyAmJlxuICAgICAgICBwcm9jZXNzLmVudiAmJlxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAmJlxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ2RldmVsb3BtZW50J1xuICAgICAgKSB7XG4gICAgICAgIGNvcmUubG9nZ2VyLndhcm4oXCJbU3BvdGxpZ2h0XSBJdCBzZWVtcyB5b3UncmUgbm90IGluIGRldiBtb2RlLiBEbyB5b3UgcmVhbGx5IHdhbnQgdG8gaGF2ZSBTcG90bGlnaHQgZW5hYmxlZD9cIik7XG4gICAgICB9XG4gICAgICBjb25uZWN0VG9TcG90bGlnaHQoY2xpZW50LCBfb3B0aW9ucyk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBVc2UgdGhpcyBpbnRlZ3JhdGlvbiB0byBzZW5kIGVycm9ycyBhbmQgdHJhbnNhY3Rpb25zIHRvIFNwb3RsaWdodC5cbiAqXG4gKiBMZWFybiBtb3JlIGFib3V0IHNwb3RsaWdodCBhdCBodHRwczovL3Nwb3RsaWdodGpzLmNvbVxuICpcbiAqIEltcG9ydGFudDogVGhpcyBpbnRlZ3JhdGlvbiBvbmx5IHdvcmtzIHdpdGggTm9kZSAxOCBvciBuZXdlci5cbiAqL1xuY29uc3Qgc3BvdGxpZ2h0SW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9zcG90bGlnaHRJbnRlZ3JhdGlvbik7XG5cbmZ1bmN0aW9uIGNvbm5lY3RUb1Nwb3RsaWdodChjbGllbnQsIG9wdGlvbnMpIHtcbiAgY29uc3Qgc3BvdGxpZ2h0VXJsID0gcGFyc2VTaWRlY2FyVXJsKG9wdGlvbnMuc2lkZWNhclVybCk7XG4gIGlmICghc3BvdGxpZ2h0VXJsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGZhaWxlZFJlcXVlc3RzID0gMDtcblxuICBjbGllbnQub24oJ2JlZm9yZUVudmVsb3BlJywgKGVudmVsb3BlKSA9PiB7XG4gICAgaWYgKGZhaWxlZFJlcXVlc3RzID4gMykge1xuICAgICAgY29yZS5sb2dnZXIud2FybignW1Nwb3RsaWdodF0gRGlzYWJsZWQgU2VudHJ5IC0+IFNwb3RsaWdodCBpbnRlZ3JhdGlvbiBkdWUgdG8gdG9vIG1hbnkgZmFpbGVkIHJlcXVlc3RzJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc2VyaWFsaXplZEVudmVsb3BlID0gY29yZS5zZXJpYWxpemVFbnZlbG9wZShlbnZlbG9wZSk7XG4gICAgY29yZS5zdXBwcmVzc1RyYWNpbmcoKCkgPT4ge1xuICAgICAgY29uc3QgcmVxID0gaHR0cC5yZXF1ZXN0KFxuICAgICAgICB7XG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgcGF0aDogc3BvdGxpZ2h0VXJsLnBhdGhuYW1lLFxuICAgICAgICAgIGhvc3RuYW1lOiBzcG90bGlnaHRVcmwuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogc3BvdGxpZ2h0VXJsLnBvcnQsXG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXNlbnRyeS1lbnZlbG9wZScsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgcmVzID0+IHtcbiAgICAgICAgICBpZiAocmVzLnN0YXR1c0NvZGUgJiYgcmVzLnN0YXR1c0NvZGUgPj0gMjAwICYmIHJlcy5zdGF0dXNDb2RlIDwgNDAwKSB7XG4gICAgICAgICAgICAvLyBSZXNldCBmYWlsZWQgcmVxdWVzdHMgY291bnRlciBvbiBzdWNjZXNzXG4gICAgICAgICAgICBmYWlsZWRSZXF1ZXN0cyA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlcy5vbignZGF0YScsICgpID0+IHtcbiAgICAgICAgICAgIC8vIERyYWluIHNvY2tldFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmVzLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICAvLyBEcmFpbiBzb2NrZXRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXMuc2V0RW5jb2RpbmcoJ3V0ZjgnKTtcbiAgICAgICAgfSxcbiAgICAgICk7XG5cbiAgICAgIHJlcS5vbignZXJyb3InLCAoKSA9PiB7XG4gICAgICAgIGZhaWxlZFJlcXVlc3RzKys7XG4gICAgICAgIGNvcmUubG9nZ2VyLndhcm4oJ1tTcG90bGlnaHRdIEZhaWxlZCB0byBzZW5kIGVudmVsb3BlIHRvIFNwb3RsaWdodCBTaWRlY2FyJyk7XG4gICAgICB9KTtcbiAgICAgIHJlcS53cml0ZShzZXJpYWxpemVkRW52ZWxvcGUpO1xuICAgICAgcmVxLmVuZCgpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcGFyc2VTaWRlY2FyVXJsKHVybCkge1xuICB0cnkge1xuICAgIHJldHVybiBuZXcgVVJMKGAke3VybH1gKTtcbiAgfSBjYXRjaCB7XG4gICAgY29yZS5sb2dnZXIud2FybihgW1Nwb3RsaWdodF0gSW52YWxpZCBzaWRlY2FyIFVSTDogJHt1cmx9YCk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5leHBvcnRzLklOVEVHUkFUSU9OX05BTUUgPSBJTlRFR1JBVElPTl9OQU1FO1xuZXhwb3J0cy5zcG90bGlnaHRJbnRlZ3JhdGlvbiA9IHNwb3RsaWdodEludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3BvdGxpZ2h0LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/spotlight.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationAmqplib = __webpack_require__(/*! @opentelemetry/instrumentation-amqplib */ \"(ssr)/./node_modules/@opentelemetry/instrumentation-amqplib/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Amqplib';\n\nconst config = {\n  consumeEndHook: (span) => {\n    addOriginToSpan.addOriginToSpan(span, 'auto.amqplib.otel.consumer');\n  },\n  publishHook: (span) => {\n    addOriginToSpan.addOriginToSpan(span, 'auto.amqplib.otel.publisher');\n  },\n};\n\nconst instrumentAmqplib = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationAmqplib.AmqplibInstrumentation(config));\n\nconst _amqplibIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentAmqplib();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [amqplib](https://www.npmjs.com/package/amqplib) library.\n *\n * For more information, see the [`amqplibIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/amqplib/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.amqplibIntegration()],\n * });\n * ```\n */\nconst amqplibIntegration = core.defineIntegration(_amqplibIntegration);\n\nexports.amqplibIntegration = amqplibIntegration;\nexports.instrumentAmqplib = instrumentAmqplib;\n//# sourceMappingURL=amqplib.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9hbXFwbGliLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLCtCQUErQixtQkFBTyxDQUFDLDhIQUF3QztBQUMvRSxhQUFhLG1CQUFPLENBQUMsb0dBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsZ0dBQTBCO0FBQ3JELHdCQUF3QixtQkFBTyxDQUFDLDRHQUFnQzs7QUFFaEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFwxXFxEb3dubG9hZHNcXHRhYm9yQWNhZGVteVVwZGF0ZWRcXHRhYm9yLWFjYWRlbXlcXG5vZGVfbW9kdWxlc1xcQHNlbnRyeVxcbm9kZVxcYnVpbGRcXGNqc1xcaW50ZWdyYXRpb25zXFx0cmFjaW5nXFxhbXFwbGliLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25BbXFwbGliID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWFtcXBsaWInKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IGFkZE9yaWdpblRvU3BhbiA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2FkZE9yaWdpblRvU3Bhbi5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0FtcXBsaWInO1xuXG5jb25zdCBjb25maWcgPSB7XG4gIGNvbnN1bWVFbmRIb29rOiAoc3BhbikgPT4ge1xuICAgIGFkZE9yaWdpblRvU3Bhbi5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uYW1xcGxpYi5vdGVsLmNvbnN1bWVyJyk7XG4gIH0sXG4gIHB1Ymxpc2hIb29rOiAoc3BhbikgPT4ge1xuICAgIGFkZE9yaWdpblRvU3Bhbi5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uYW1xcGxpYi5vdGVsLnB1Ymxpc2hlcicpO1xuICB9LFxufTtcblxuY29uc3QgaW5zdHJ1bWVudEFtcXBsaWIgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbkFtcXBsaWIuQW1xcGxpYkluc3RydW1lbnRhdGlvbihjb25maWcpKTtcblxuY29uc3QgX2FtcXBsaWJJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50QW1xcGxpYigpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbYW1xcGxpYl0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYW1xcGxpYikgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYGFtcXBsaWJJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9hbXFwbGliLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkuYW1xcGxpYkludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgYW1xcGxpYkludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfYW1xcGxpYkludGVncmF0aW9uKTtcblxuZXhwb3J0cy5hbXFwbGliSW50ZWdyYXRpb24gPSBhbXFwbGliSW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRBbXFwbGliID0gaW5zdHJ1bWVudEFtcXBsaWI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbXFwbGliLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationConnect = __webpack_require__(/*! @opentelemetry/instrumentation-connect */ \"(ssr)/./node_modules/@opentelemetry/instrumentation-connect/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\nconst INTEGRATION_NAME = 'Connect';\n\nconst instrumentConnect = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationConnect.ConnectInstrumentation());\n\nconst _connectIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentConnect();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Connect](https://github.com/senchalabs/connect/).\n *\n * If you also want to capture errors, you need to call `setupConnectErrorHandler(app)` after you initialize your connect app.\n *\n * For more information, see the [connect documentation](https://docs.sentry.io/platforms/javascript/guides/connect/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.connectIntegration()],\n * })\n * ```\n */\nconst connectIntegration = core.defineIntegration(_connectIntegration);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction connectErrorMiddleware(err, req, res, next) {\n  core.captureException(err);\n  next(err);\n}\n\n/**\n * Add a Connect middleware to capture errors to Sentry.\n *\n * @param app The Connect app to attach the error handler to\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const connect = require(\"connect\");\n *\n * const app = connect();\n *\n * Sentry.setupConnectErrorHandler(app);\n *\n * // Add you connect routes here\n *\n * app.listen(3000);\n * ```\n */\nconst setupConnectErrorHandler = (app) => {\n  app.use(connectErrorMiddleware);\n\n  // Sadly, ConnectInstrumentation has no requestHook, so we need to add the attributes here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using connect\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addConnectSpanAttributes(span);\n    });\n  }\n\n  ensureIsWrapped.ensureIsWrapped(app.use, 'connect');\n};\n\nfunction addConnectSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data;\n\n  // this is one of: middleware, request_handler\n  const type = attributes['connect.type'];\n\n  // If this is already set, or we have no connect span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.connect',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.connect`,\n  });\n\n  // Also update the name, we don't need the \"middleware - \" prefix\n  const name = attributes['connect.name'];\n  if (typeof name === 'string') {\n    span.updateName(name);\n  }\n}\n\nexports.connectIntegration = connectIntegration;\nexports.instrumentConnect = instrumentConnect;\nexports.setupConnectErrorHandler = setupConnectErrorHandler;\n//# sourceMappingURL=connect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9jb25uZWN0LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLCtCQUErQixtQkFBTyxDQUFDLDhIQUF3QztBQUMvRSxhQUFhLG1CQUFPLENBQUMsb0dBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsZ0dBQTBCO0FBQ3JELHdCQUF3QixtQkFBTyxDQUFDLDRHQUFnQzs7QUFFaEU7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEMsS0FBSztBQUNqRCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIseUJBQXlCO0FBQ3pCLGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFwxXFxEb3dubG9hZHNcXHRhYm9yQWNhZGVteVVwZGF0ZWRcXHRhYm9yLWFjYWRlbXlcXG5vZGVfbW9kdWxlc1xcQHNlbnRyeVxcbm9kZVxcYnVpbGRcXGNqc1xcaW50ZWdyYXRpb25zXFx0cmFjaW5nXFxjb25uZWN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25Db25uZWN0ID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWNvbm5lY3QnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IGVuc3VyZUlzV3JhcHBlZCA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2Vuc3VyZUlzV3JhcHBlZC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0Nvbm5lY3QnO1xuXG5jb25zdCBpbnN0cnVtZW50Q29ubmVjdCA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uQ29ubmVjdC5Db25uZWN0SW5zdHJ1bWVudGF0aW9uKCkpO1xuXG5jb25zdCBfY29ubmVjdEludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRDb25uZWN0KCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgW0Nvbm5lY3RdKGh0dHBzOi8vZ2l0aHViLmNvbS9zZW5jaGFsYWJzL2Nvbm5lY3QvKS5cbiAqXG4gKiBJZiB5b3UgYWxzbyB3YW50IHRvIGNhcHR1cmUgZXJyb3JzLCB5b3UgbmVlZCB0byBjYWxsIGBzZXR1cENvbm5lY3RFcnJvckhhbmRsZXIoYXBwKWAgYWZ0ZXIgeW91IGluaXRpYWxpemUgeW91ciBjb25uZWN0IGFwcC5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbY29ubmVjdCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9jb25uZWN0LykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmNvbm5lY3RJbnRlZ3JhdGlvbigpXSxcbiAqIH0pXG4gKiBgYGBcbiAqL1xuY29uc3QgY29ubmVjdEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfY29ubmVjdEludGVncmF0aW9uKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIGNvbm5lY3RFcnJvck1pZGRsZXdhcmUoZXJyLCByZXEsIHJlcywgbmV4dCkge1xuICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZXJyKTtcbiAgbmV4dChlcnIpO1xufVxuXG4vKipcbiAqIEFkZCBhIENvbm5lY3QgbWlkZGxld2FyZSB0byBjYXB0dXJlIGVycm9ycyB0byBTZW50cnkuXG4gKlxuICogQHBhcmFtIGFwcCBUaGUgQ29ubmVjdCBhcHAgdG8gYXR0YWNoIHRoZSBlcnJvciBoYW5kbGVyIHRvXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICogY29uc3QgY29ubmVjdCA9IHJlcXVpcmUoXCJjb25uZWN0XCIpO1xuICpcbiAqIGNvbnN0IGFwcCA9IGNvbm5lY3QoKTtcbiAqXG4gKiBTZW50cnkuc2V0dXBDb25uZWN0RXJyb3JIYW5kbGVyKGFwcCk7XG4gKlxuICogLy8gQWRkIHlvdSBjb25uZWN0IHJvdXRlcyBoZXJlXG4gKlxuICogYXBwLmxpc3RlbigzMDAwKTtcbiAqIGBgYFxuICovXG5jb25zdCBzZXR1cENvbm5lY3RFcnJvckhhbmRsZXIgPSAoYXBwKSA9PiB7XG4gIGFwcC51c2UoY29ubmVjdEVycm9yTWlkZGxld2FyZSk7XG5cbiAgLy8gU2FkbHksIENvbm5lY3RJbnN0cnVtZW50YXRpb24gaGFzIG5vIHJlcXVlc3RIb29rLCBzbyB3ZSBuZWVkIHRvIGFkZCB0aGUgYXR0cmlidXRlcyBoZXJlXG4gIC8vIFdlIHJlZ2lzdGVyIHRoaXMgaG9vayBpbiB0aGlzIG1ldGhvZCwgYmVjYXVzZSBpZiB3ZSByZWdpc3RlciBpdCBpbiB0aGUgaW50ZWdyYXRpb24gYHNldHVwYCxcbiAgLy8gaXQgd291bGQgYWx3YXlzIHJ1biBldmVuIGZvciB1c2VycyB0aGF0IGFyZSBub3QgZXZlbiB1c2luZyBjb25uZWN0XG4gIGNvbnN0IGNsaWVudCA9IGNvcmUuZ2V0Q2xpZW50KCk7XG4gIGlmIChjbGllbnQpIHtcbiAgICBjbGllbnQub24oJ3NwYW5TdGFydCcsIHNwYW4gPT4ge1xuICAgICAgYWRkQ29ubmVjdFNwYW5BdHRyaWJ1dGVzKHNwYW4pO1xuICAgIH0pO1xuICB9XG5cbiAgZW5zdXJlSXNXcmFwcGVkLmVuc3VyZUlzV3JhcHBlZChhcHAudXNlLCAnY29ubmVjdCcpO1xufTtcblxuZnVuY3Rpb24gYWRkQ29ubmVjdFNwYW5BdHRyaWJ1dGVzKHNwYW4pIHtcbiAgY29uc3QgYXR0cmlidXRlcyA9IGNvcmUuc3BhblRvSlNPTihzcGFuKS5kYXRhO1xuXG4gIC8vIHRoaXMgaXMgb25lIG9mOiBtaWRkbGV3YXJlLCByZXF1ZXN0X2hhbmRsZXJcbiAgY29uc3QgdHlwZSA9IGF0dHJpYnV0ZXNbJ2Nvbm5lY3QudHlwZSddO1xuXG4gIC8vIElmIHRoaXMgaXMgYWxyZWFkeSBzZXQsIG9yIHdlIGhhdmUgbm8gY29ubmVjdCBzcGFuLCBubyBuZWVkIHRvIHByb2Nlc3MgYWdhaW4uLi5cbiAgaWYgKGF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXSB8fCAhdHlwZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHNwYW4uc2V0QXR0cmlidXRlcyh7XG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiAnYXV0by5odHRwLm90ZWwuY29ubmVjdCcsXG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF06IGAke3R5cGV9LmNvbm5lY3RgLFxuICB9KTtcblxuICAvLyBBbHNvIHVwZGF0ZSB0aGUgbmFtZSwgd2UgZG9uJ3QgbmVlZCB0aGUgXCJtaWRkbGV3YXJlIC0gXCIgcHJlZml4XG4gIGNvbnN0IG5hbWUgPSBhdHRyaWJ1dGVzWydjb25uZWN0Lm5hbWUnXTtcbiAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgIHNwYW4udXBkYXRlTmFtZShuYW1lKTtcbiAgfVxufVxuXG5leHBvcnRzLmNvbm5lY3RJbnRlZ3JhdGlvbiA9IGNvbm5lY3RJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudENvbm5lY3QgPSBpbnN0cnVtZW50Q29ubmVjdDtcbmV4cG9ydHMuc2V0dXBDb25uZWN0RXJyb3JIYW5kbGVyID0gc2V0dXBDb25uZWN0RXJyb3JIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29ubmVjdC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationDataloader = __webpack_require__(/*! @opentelemetry/instrumentation-dataloader */ \"(ssr)/./node_modules/@opentelemetry/instrumentation-dataloader/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'Dataloader';\n\nconst instrumentDataloader = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationDataloader.DataloaderInstrumentation({\n      requireParentSpan: true,\n    }),\n);\n\nconst _dataloaderIntegration = (() => {\n  let instrumentationWrappedCallback;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentation = instrumentDataloader();\n      instrumentationWrappedCallback = instrument.instrumentWhenWrapped(instrumentation);\n    },\n\n    setup(client) {\n      // This is called either immediately or when the instrumentation is wrapped\n      instrumentationWrappedCallback?.(() => {\n        client.on('spanStart', span => {\n          const spanJSON = core.spanToJSON(span);\n          if (spanJSON.description?.startsWith('dataloader')) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.dataloader');\n          }\n\n          // These are all possible dataloader span descriptions\n          // Still checking for the future versions\n          // in case they add support for `clear` and `prime`\n          if (\n            spanJSON.description === 'dataloader.load' ||\n            spanJSON.description === 'dataloader.loadMany' ||\n            spanJSON.description === 'dataloader.batch'\n          ) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'cache.get');\n            // TODO: We can try adding `key` to the `data` attribute upstream.\n            // Or alternatively, we can add `requestHook` to the dataloader instrumentation.\n          }\n        });\n      });\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [dataloader](https://www.npmjs.com/package/dataloader) library.\n *\n * For more information, see the [`dataloaderIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/dataloader/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.dataloaderIntegration()],\n * });\n * ```\n */\nconst dataloaderIntegration = core.defineIntegration(_dataloaderIntegration);\n\nexports.dataloaderIntegration = dataloaderIntegration;\nexports.instrumentDataloader = instrumentDataloader;\n//# sourceMappingURL=dataloader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9kYXRhbG9hZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGtDQUFrQyxtQkFBTyxDQUFDLG9JQUEyQztBQUNyRixhQUFhLG1CQUFPLENBQUMsb0dBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsZ0dBQTBCOztBQUVyRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsNkJBQTZCO0FBQzdCLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFwxXFxEb3dubG9hZHNcXHRhYm9yQWNhZGVteVVwZGF0ZWRcXHRhYm9yLWFjYWRlbXlcXG5vZGVfbW9kdWxlc1xcQHNlbnRyeVxcbm9kZVxcYnVpbGRcXGNqc1xcaW50ZWdyYXRpb25zXFx0cmFjaW5nXFxkYXRhbG9hZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25EYXRhbG9hZGVyID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWRhdGFsb2FkZXInKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdEYXRhbG9hZGVyJztcblxuY29uc3QgaW5zdHJ1bWVudERhdGFsb2FkZXIgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvbkRhdGFsb2FkZXIuRGF0YWxvYWRlckluc3RydW1lbnRhdGlvbih7XG4gICAgICByZXF1aXJlUGFyZW50U3BhbjogdHJ1ZSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9kYXRhbG9hZGVySW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICBsZXQgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSBpbnN0cnVtZW50RGF0YWxvYWRlcigpO1xuICAgICAgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrID0gaW5zdHJ1bWVudC5pbnN0cnVtZW50V2hlbldyYXBwZWQoaW5zdHJ1bWVudGF0aW9uKTtcbiAgICB9LFxuXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICAvLyBUaGlzIGlzIGNhbGxlZCBlaXRoZXIgaW1tZWRpYXRlbHkgb3Igd2hlbiB0aGUgaW5zdHJ1bWVudGF0aW9uIGlzIHdyYXBwZWRcbiAgICAgIGluc3RydW1lbnRhdGlvbldyYXBwZWRDYWxsYmFjaz8uKCgpID0+IHtcbiAgICAgICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgICAgICBjb25zdCBzcGFuSlNPTiA9IGNvcmUuc3BhblRvSlNPTihzcGFuKTtcbiAgICAgICAgICBpZiAoc3BhbkpTT04uZGVzY3JpcHRpb24/LnN0YXJ0c1dpdGgoJ2RhdGFsb2FkZXInKSkge1xuICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiwgJ2F1dG8uZGIub3RlbC5kYXRhbG9hZGVyJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVGhlc2UgYXJlIGFsbCBwb3NzaWJsZSBkYXRhbG9hZGVyIHNwYW4gZGVzY3JpcHRpb25zXG4gICAgICAgICAgLy8gU3RpbGwgY2hlY2tpbmcgZm9yIHRoZSBmdXR1cmUgdmVyc2lvbnNcbiAgICAgICAgICAvLyBpbiBjYXNlIHRoZXkgYWRkIHN1cHBvcnQgZm9yIGBjbGVhcmAgYW5kIGBwcmltZWBcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBzcGFuSlNPTi5kZXNjcmlwdGlvbiA9PT0gJ2RhdGFsb2FkZXIubG9hZCcgfHxcbiAgICAgICAgICAgIHNwYW5KU09OLmRlc2NyaXB0aW9uID09PSAnZGF0YWxvYWRlci5sb2FkTWFueScgfHxcbiAgICAgICAgICAgIHNwYW5KU09OLmRlc2NyaXB0aW9uID09PSAnZGF0YWxvYWRlci5iYXRjaCdcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCwgJ2NhY2hlLmdldCcpO1xuICAgICAgICAgICAgLy8gVE9ETzogV2UgY2FuIHRyeSBhZGRpbmcgYGtleWAgdG8gdGhlIGBkYXRhYCBhdHRyaWJ1dGUgdXBzdHJlYW0uXG4gICAgICAgICAgICAvLyBPciBhbHRlcm5hdGl2ZWx5LCB3ZSBjYW4gYWRkIGByZXF1ZXN0SG9va2AgdG8gdGhlIGRhdGFsb2FkZXIgaW5zdHJ1bWVudGF0aW9uLlxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2RhdGFsb2FkZXJdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2RhdGFsb2FkZXIpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BkYXRhbG9hZGVySW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvZGF0YWxvYWRlci8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmRhdGFsb2FkZXJJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IGRhdGFsb2FkZXJJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2RhdGFsb2FkZXJJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuZGF0YWxvYWRlckludGVncmF0aW9uID0gZGF0YWxvYWRlckludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50RGF0YWxvYWRlciA9IGluc3RydW1lbnREYXRhbG9hZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YWxvYWRlci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express-v5/enums/AttributeNames.js":(__unused_webpack_module,exports)=>{eval('Object.defineProperty(exports, Symbol.toStringTag, { value: \'Module\' });\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexports.AttributeNames = void 0; (function (AttributeNames) {\n  const EXPRESS_TYPE = \'express.type\'; AttributeNames["EXPRESS_TYPE"] = EXPRESS_TYPE;\n  const EXPRESS_NAME = \'express.name\'; AttributeNames["EXPRESS_NAME"] = EXPRESS_NAME;\n})(exports.AttributeNames || (exports.AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9leHByZXNzLXY1L2VudW1zL0F0dHJpYnV0ZU5hbWVzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixXQUFXO0FBQ2pDLHVDQUF1QztBQUN2Qyx1Q0FBdUM7QUFDdkMsQ0FBQyw2QkFBNkIsc0JBQXNCLEtBQUs7QUFDekQiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXGludGVncmF0aW9uc1xcdHJhY2luZ1xcZXhwcmVzcy12NVxcZW51bXNcXEF0dHJpYnV0ZU5hbWVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyA9IHZvaWQgMDsgKGZ1bmN0aW9uIChBdHRyaWJ1dGVOYW1lcykge1xuICBjb25zdCBFWFBSRVNTX1RZUEUgPSAnZXhwcmVzcy50eXBlJzsgQXR0cmlidXRlTmFtZXNbXCJFWFBSRVNTX1RZUEVcIl0gPSBFWFBSRVNTX1RZUEU7XG4gIGNvbnN0IEVYUFJFU1NfTkFNRSA9ICdleHByZXNzLm5hbWUnOyBBdHRyaWJ1dGVOYW1lc1tcIkVYUFJFU1NfTkFNRVwiXSA9IEVYUFJFU1NfTkFNRTtcbn0pKGV4cG9ydHMuQXR0cmlidXRlTmFtZXMgfHwgKGV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXR0cmlidXRlTmFtZXMuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express-v5/enums/AttributeNames.js\n')},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express-v5/enums/ExpressLayerType.js":(__unused_webpack_module,exports)=>{eval('Object.defineProperty(exports, Symbol.toStringTag, { value: \'Module\' });\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexports.ExpressLayerType = void 0; (function (ExpressLayerType) {\n  const ROUTER = \'router\'; ExpressLayerType["ROUTER"] = ROUTER;\n  const MIDDLEWARE = \'middleware\'; ExpressLayerType["MIDDLEWARE"] = MIDDLEWARE;\n  const REQUEST_HANDLER = \'request_handler\'; ExpressLayerType["REQUEST_HANDLER"] = REQUEST_HANDLER;\n})(exports.ExpressLayerType || (exports.ExpressLayerType = {}));\n//# sourceMappingURL=ExpressLayerType.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9leHByZXNzLXY1L2VudW1zL0V4cHJlc3NMYXllclR5cGUuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFdBQVc7QUFDbkMsMkJBQTJCO0FBQzNCLG1DQUFtQztBQUNuQyw2Q0FBNkM7QUFDN0MsQ0FBQywrQkFBK0Isd0JBQXdCLEtBQUs7QUFDN0QiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXGludGVncmF0aW9uc1xcdHJhY2luZ1xcZXhwcmVzcy12NVxcZW51bXNcXEV4cHJlc3NMYXllclR5cGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5leHBvcnRzLkV4cHJlc3NMYXllclR5cGUgPSB2b2lkIDA7IChmdW5jdGlvbiAoRXhwcmVzc0xheWVyVHlwZSkge1xuICBjb25zdCBST1VURVIgPSAncm91dGVyJzsgRXhwcmVzc0xheWVyVHlwZVtcIlJPVVRFUlwiXSA9IFJPVVRFUjtcbiAgY29uc3QgTUlERExFV0FSRSA9ICdtaWRkbGV3YXJlJzsgRXhwcmVzc0xheWVyVHlwZVtcIk1JRERMRVdBUkVcIl0gPSBNSURETEVXQVJFO1xuICBjb25zdCBSRVFVRVNUX0hBTkRMRVIgPSAncmVxdWVzdF9oYW5kbGVyJzsgRXhwcmVzc0xheWVyVHlwZVtcIlJFUVVFU1RfSEFORExFUlwiXSA9IFJFUVVFU1RfSEFORExFUjtcbn0pKGV4cG9ydHMuRXhwcmVzc0xheWVyVHlwZSB8fCAoZXhwb3J0cy5FeHByZXNzTGF5ZXJUeXBlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUV4cHJlc3NMYXllclR5cGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express-v5/enums/ExpressLayerType.js\n')},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express-v5/instrumentation.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core = __webpack_require__(/*! @opentelemetry/core */ \"(ssr)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(ssr)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst AttributeNames = __webpack_require__(/*! ./enums/AttributeNames.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express-v5/enums/AttributeNames.js\");\nconst ExpressLayerType = __webpack_require__(/*! ./enums/ExpressLayerType.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express-v5/enums/ExpressLayerType.js\");\nconst internalTypes = __webpack_require__(/*! ./internal-types.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express-v5/internal-types.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express-v5/utils.js\");\n\nconst PACKAGE_VERSION = '0.1.0';\nconst PACKAGE_NAME = '@sentry/instrumentation-express-v5';\n\n/** Express instrumentation for OpenTelemetry */\nclass ExpressInstrumentationV5 extends instrumentation.InstrumentationBase {\n  constructor(config = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n  init() {\n    return [\n      new instrumentation.InstrumentationNodeModuleDefinition(\n        'express',\n        ['>=5.0.0'],\n        moduleExports => this._setup(moduleExports),\n        moduleExports => this._tearDown(moduleExports),\n      ),\n    ];\n  }\n\n   _setup(moduleExports) {\n    const routerProto = moduleExports.Router.prototype;\n    // patch express.Router.route\n    if (instrumentation.isWrapped(routerProto.route)) {\n      this._unwrap(routerProto, 'route');\n    }\n    this._wrap(routerProto, 'route', this._getRoutePatch());\n    // patch express.Router.use\n    if (instrumentation.isWrapped(routerProto.use)) {\n      this._unwrap(routerProto, 'use');\n    }\n    this._wrap(routerProto, 'use', this._getRouterUsePatch() );\n    // patch express.Application.use\n    if (instrumentation.isWrapped(moduleExports.application.use)) {\n      this._unwrap(moduleExports.application, 'use');\n    }\n    this._wrap(moduleExports.application, 'use', this._getAppUsePatch() );\n    return moduleExports;\n  }\n\n   _tearDown(moduleExports) {\n    if (moduleExports === undefined) return;\n    const routerProto = moduleExports.Router.prototype;\n    this._unwrap(routerProto, 'route');\n    this._unwrap(routerProto, 'use');\n    this._unwrap(moduleExports.application, 'use');\n  }\n\n  /**\n   * Get the patch for Router.route function\n   */\n   _getRoutePatch() {\n    const instrumentation = this;\n    return function (original) {\n      return function route_trace( ...args) {\n        const route = original.apply(this, args);\n        const layer = this.stack[this.stack.length - 1] ;\n        instrumentation._applyPatch(layer, utils.getLayerPath(args));\n        return route;\n      };\n    };\n  }\n\n  /**\n   * Get the patch for Router.use function\n   */\n   _getRouterUsePatch() {\n    const instrumentation = this;\n    return function (original) {\n      return function use( ...args) {\n        const route = original.apply(this, args);\n        const layer = this.stack[this.stack.length - 1] ;\n        instrumentation._applyPatch(layer, utils.getLayerPath(args));\n        return route;\n      };\n    };\n  }\n\n  /**\n   * Get the patch for Application.use function\n   */\n   _getAppUsePatch() {\n    const instrumentation = this;\n    return function (original) {\n      return function use(\n        // In express 5.x the router is stored in `router` whereas in 4.x it's stored in `_router`\n\n        ...args\n      ) {\n        // if we access app.router in express 4.x we trigger an assertion error\n        // This property existed in v3, was removed in v4 and then re-added in v5\n        const router = this.router;\n        const route = original.apply(this, args);\n        if (router) {\n          const layer = router.stack[router.stack.length - 1] ;\n          instrumentation._applyPatch(layer, utils.getLayerPath(args));\n        }\n        return route;\n      };\n    };\n  }\n\n  /** Patch each express layer to create span and propagate context */\n   _applyPatch( layer, layerPath) {\n    const instrumentation$1 = this;\n    // avoid patching multiple times the same layer\n    if (layer[internalTypes.kLayerPatched] === true) return;\n    layer[internalTypes.kLayerPatched] = true;\n\n    this._wrap(layer, 'handle', original => {\n      // TODO: instrument error handlers\n      if (original.length === 4) return original;\n\n      const patched = function ( req, res) {\n        utils.storeLayerPath(req, layerPath);\n        const route = (req[internalTypes._LAYERS_STORE_PROPERTY] )\n          .filter(path => path !== '/' && path !== '/*')\n          .join('')\n          // remove duplicate slashes to normalize route\n          .replace(/\\/{2,}/g, '/');\n\n        const actualRoute = route.length > 0 ? route : undefined;\n\n        const attributes = {\n          // eslint-disable-next-line deprecation/deprecation\n          [semanticConventions.SEMATTRS_HTTP_ROUTE]: actualRoute,\n        };\n        const metadata = utils.getLayerMetadata(route, layer, layerPath);\n        const type = metadata.attributes[AttributeNames.AttributeNames.EXPRESS_TYPE] ;\n\n        const rpcMetadata = core.getRPCMetadata(api.context.active());\n        if (rpcMetadata?.type === core.RPCType.HTTP) {\n          rpcMetadata.route = actualRoute;\n        }\n\n        // verify against the config if the layer should be ignored\n        if (utils.isLayerIgnored(metadata.name, type, instrumentation$1.getConfig())) {\n          if (type === ExpressLayerType.ExpressLayerType.MIDDLEWARE) {\n            (req[internalTypes._LAYERS_STORE_PROPERTY] ).pop();\n          }\n          return original.apply(this, arguments);\n        }\n\n        if (api.trace.getSpan(api.context.active()) === undefined) {\n          return original.apply(this, arguments);\n        }\n\n        const spanName = instrumentation$1._getSpanName(\n          {\n            request: req,\n            layerType: type,\n            route,\n          },\n          metadata.name,\n        );\n        const span = instrumentation$1.tracer.startSpan(spanName, {\n          attributes: Object.assign(attributes, metadata.attributes),\n        });\n\n        const { requestHook } = instrumentation$1.getConfig();\n        if (requestHook) {\n          instrumentation.safeExecuteInTheMiddle(\n            () =>\n              requestHook(span, {\n                request: req,\n                layerType: type,\n                route,\n              }),\n            e => {\n              if (e) {\n                api.diag.error('express instrumentation: request hook failed', e);\n              }\n            },\n            true,\n          );\n        }\n\n        let spanHasEnded = false;\n        if (metadata.attributes[AttributeNames.AttributeNames.EXPRESS_TYPE] !== ExpressLayerType.ExpressLayerType.MIDDLEWARE) {\n          span.end();\n          spanHasEnded = true;\n        }\n        // listener for response.on('finish')\n        const onResponseFinish = () => {\n          if (spanHasEnded === false) {\n            spanHasEnded = true;\n            span.end();\n          }\n        };\n\n        // verify we have a callback\n        const args = Array.from(arguments);\n        const callbackIdx = args.findIndex(arg => typeof arg === 'function');\n        if (callbackIdx >= 0) {\n          arguments[callbackIdx] = function () {\n            // express considers anything but an empty value, \"route\" or \"router\"\n            // passed to its callback to be an error\n            const maybeError = arguments[0];\n            const isError = ![undefined, null, 'route', 'router'].includes(maybeError);\n            if (!spanHasEnded && isError) {\n              const [error, message] = utils.asErrorAndMessage(maybeError);\n              span.recordException(error);\n              span.setStatus({\n                code: api.SpanStatusCode.ERROR,\n                message,\n              });\n            }\n\n            if (spanHasEnded === false) {\n              spanHasEnded = true;\n              req.res?.removeListener('finish', onResponseFinish);\n              span.end();\n            }\n            if (!(req.route && isError)) {\n              (req[internalTypes._LAYERS_STORE_PROPERTY] ).pop();\n            }\n            const callback = args[callbackIdx] ;\n            return callback.apply(this, arguments);\n          };\n        }\n\n        try {\n          return original.apply(this, arguments);\n        } catch (anyError) {\n          const [error, message] = utils.asErrorAndMessage(anyError);\n          span.recordException(error);\n          span.setStatus({\n            code: api.SpanStatusCode.ERROR,\n            message,\n          });\n          throw anyError;\n        } finally {\n          /**\n           * At this point if the callback wasn't called, that means either the\n           * layer is asynchronous (so it will call the callback later on) or that\n           * the layer directly end the http response, so we'll hook into the \"finish\"\n           * event to handle the later case.\n           */\n          if (!spanHasEnded) {\n            res.once('finish', onResponseFinish);\n          }\n        }\n      };\n\n      // `handle` isn't just a regular function in some cases. It also contains\n      // some properties holding metadata and state so we need to proxy them\n      // through through patched function\n      // ref: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/1950\n      // Also some apps/libs do their own patching before OTEL and have these properties\n      // in the proptotype. So we use a `for...in` loop to get own properties and also\n      // any enumerable prop in the prototype chain\n      // ref: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/2271\n      for (const key in original) {\n        Object.defineProperty(patched, key, {\n          get() {\n            return original[key];\n          },\n          set(value) {\n            original[key] = value;\n          },\n        });\n      }\n      return patched;\n    });\n  }\n\n  _getSpanName(info, defaultName) {\n    const { spanNameHook } = this.getConfig();\n\n    if (!(spanNameHook instanceof Function)) {\n      return defaultName;\n    }\n\n    try {\n      return spanNameHook(info, defaultName) ?? defaultName;\n    } catch (err) {\n      api.diag.error('express instrumentation: error calling span name rewrite hook', err);\n      return defaultName;\n    }\n  }\n}\n\nexports.ExpressInstrumentationV5 = ExpressInstrumentationV5;\nexports.PACKAGE_NAME = PACKAGE_NAME;\nexports.PACKAGE_VERSION = PACKAGE_VERSION;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express-v5/instrumentation.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express-v5/internal-types.js":(__unused_webpack_module,exports)=>{eval('Object.defineProperty(exports, Symbol.toStringTag, { value: \'Module\' });\n\n/**\n * This symbol is used to mark express layer as being already instrumented\n * since its possible to use a given layer multiple times (ex: middlewares)\n */\nconst kLayerPatched = Symbol(\'express-layer-patched\');\n\n/**\n * This const define where on the `request` object the Instrumentation will mount the\n * current stack of express layer.\n *\n * It is necessary because express doesn\'t store the different layers\n * (ie: middleware, router etc) that it called to get to the current layer.\n * Given that, the only way to know the route of a given layer is to\n * store the path of where each previous layer has been mounted.\n *\n * ex: bodyParser > auth middleware > /users router > get /:id\n *  in this case the stack would be: ["/users", "/:id"]\n *\n * ex2: bodyParser > /api router > /v1 router > /users router > get /:id\n *  stack: ["/api", "/v1", "/users", ":id"]\n *\n */\nconst _LAYERS_STORE_PROPERTY = \'__ot_middlewares\';\n\nexports._LAYERS_STORE_PROPERTY = _LAYERS_STORE_PROPERTY;\nexports.kLayerPatched = kLayerPatched;\n//# sourceMappingURL=internal-types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9leHByZXNzLXY1L2ludGVybmFsLXR5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEI7QUFDOUIscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAc2VudHJ5XFxub2RlXFxidWlsZFxcY2pzXFxpbnRlZ3JhdGlvbnNcXHRyYWNpbmdcXGV4cHJlc3MtdjVcXGludGVybmFsLXR5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG4vKipcbiAqIFRoaXMgc3ltYm9sIGlzIHVzZWQgdG8gbWFyayBleHByZXNzIGxheWVyIGFzIGJlaW5nIGFscmVhZHkgaW5zdHJ1bWVudGVkXG4gKiBzaW5jZSBpdHMgcG9zc2libGUgdG8gdXNlIGEgZ2l2ZW4gbGF5ZXIgbXVsdGlwbGUgdGltZXMgKGV4OiBtaWRkbGV3YXJlcylcbiAqL1xuY29uc3Qga0xheWVyUGF0Y2hlZCA9IFN5bWJvbCgnZXhwcmVzcy1sYXllci1wYXRjaGVkJyk7XG5cbi8qKlxuICogVGhpcyBjb25zdCBkZWZpbmUgd2hlcmUgb24gdGhlIGByZXF1ZXN0YCBvYmplY3QgdGhlIEluc3RydW1lbnRhdGlvbiB3aWxsIG1vdW50IHRoZVxuICogY3VycmVudCBzdGFjayBvZiBleHByZXNzIGxheWVyLlxuICpcbiAqIEl0IGlzIG5lY2Vzc2FyeSBiZWNhdXNlIGV4cHJlc3MgZG9lc24ndCBzdG9yZSB0aGUgZGlmZmVyZW50IGxheWVyc1xuICogKGllOiBtaWRkbGV3YXJlLCByb3V0ZXIgZXRjKSB0aGF0IGl0IGNhbGxlZCB0byBnZXQgdG8gdGhlIGN1cnJlbnQgbGF5ZXIuXG4gKiBHaXZlbiB0aGF0LCB0aGUgb25seSB3YXkgdG8ga25vdyB0aGUgcm91dGUgb2YgYSBnaXZlbiBsYXllciBpcyB0b1xuICogc3RvcmUgdGhlIHBhdGggb2Ygd2hlcmUgZWFjaCBwcmV2aW91cyBsYXllciBoYXMgYmVlbiBtb3VudGVkLlxuICpcbiAqIGV4OiBib2R5UGFyc2VyID4gYXV0aCBtaWRkbGV3YXJlID4gL3VzZXJzIHJvdXRlciA+IGdldCAvOmlkXG4gKiAgaW4gdGhpcyBjYXNlIHRoZSBzdGFjayB3b3VsZCBiZTogW1wiL3VzZXJzXCIsIFwiLzppZFwiXVxuICpcbiAqIGV4MjogYm9keVBhcnNlciA+IC9hcGkgcm91dGVyID4gL3YxIHJvdXRlciA+IC91c2VycyByb3V0ZXIgPiBnZXQgLzppZFxuICogIHN0YWNrOiBbXCIvYXBpXCIsIFwiL3YxXCIsIFwiL3VzZXJzXCIsIFwiOmlkXCJdXG4gKlxuICovXG5jb25zdCBfTEFZRVJTX1NUT1JFX1BST1BFUlRZID0gJ19fb3RfbWlkZGxld2FyZXMnO1xuXG5leHBvcnRzLl9MQVlFUlNfU1RPUkVfUFJPUEVSVFkgPSBfTEFZRVJTX1NUT1JFX1BST1BFUlRZO1xuZXhwb3J0cy5rTGF5ZXJQYXRjaGVkID0ga0xheWVyUGF0Y2hlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVybmFsLXR5cGVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express-v5/internal-types.js\n')},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express-v5/utils.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst AttributeNames = __webpack_require__(/*! ./enums/AttributeNames.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express-v5/enums/AttributeNames.js\");\nconst ExpressLayerType = __webpack_require__(/*! ./enums/ExpressLayerType.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express-v5/enums/ExpressLayerType.js\");\nconst internalTypes = __webpack_require__(/*! ./internal-types.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express-v5/internal-types.js\");\n\n/**\n * Store layers path in the request to be able to construct route later\n * @param request The request where\n * @param [value] the value to push into the array\n */\nconst storeLayerPath = (request, value) => {\n  if (Array.isArray(request[internalTypes._LAYERS_STORE_PROPERTY]) === false) {\n    Object.defineProperty(request, internalTypes._LAYERS_STORE_PROPERTY, {\n      enumerable: false,\n      value: [],\n    });\n  }\n  if (value === undefined) return;\n  (request[internalTypes._LAYERS_STORE_PROPERTY] ).push(value);\n};\n\n/**\n * Recursively search the router path from layer stack\n * @param path The path to reconstruct\n * @param layer The layer to reconstruct from\n * @returns The reconstructed path\n */\nconst getRouterPath = (path, layer) => {\n  const stackLayer = layer.handle?.stack?.[0];\n\n  if (stackLayer?.route?.path) {\n    return `${path}${stackLayer.route.path}`;\n  }\n\n  if (stackLayer?.handle?.stack) {\n    return getRouterPath(path, stackLayer);\n  }\n\n  return path;\n};\n\n/**\n * Parse express layer context to retrieve a name and attributes.\n * @param route The route of the layer\n * @param layer Express layer\n * @param [layerPath] if present, the path on which the layer has been mounted\n */\nconst getLayerMetadata = (\n  route,\n  layer,\n  layerPath,\n\n) => {\n  if (layer.name === 'router') {\n    const maybeRouterPath = getRouterPath('', layer);\n    const extractedRouterPath = maybeRouterPath ? maybeRouterPath : layerPath || route || '/';\n\n    return {\n      attributes: {\n        [AttributeNames.AttributeNames.EXPRESS_NAME]: extractedRouterPath,\n        [AttributeNames.AttributeNames.EXPRESS_TYPE]: ExpressLayerType.ExpressLayerType.ROUTER,\n      },\n      name: `router - ${extractedRouterPath}`,\n    };\n  } else if (layer.name === 'bound dispatch' || layer.name === 'handle') {\n    return {\n      attributes: {\n        [AttributeNames.AttributeNames.EXPRESS_NAME]: (route || layerPath) ?? 'request handler',\n        [AttributeNames.AttributeNames.EXPRESS_TYPE]: ExpressLayerType.ExpressLayerType.REQUEST_HANDLER,\n      },\n      name: `request handler${layer.path ? ` - ${route || layerPath}` : ''}`,\n    };\n  } else {\n    return {\n      attributes: {\n        [AttributeNames.AttributeNames.EXPRESS_NAME]: layer.name,\n        [AttributeNames.AttributeNames.EXPRESS_TYPE]: ExpressLayerType.ExpressLayerType.MIDDLEWARE,\n      },\n      name: `middleware - ${layer.name}`,\n    };\n  }\n};\n\n/**\n * Check whether the given obj match pattern\n * @param constant e.g URL of request\n * @param obj obj to inspect\n * @param pattern Match pattern\n */\nconst satisfiesPattern = (constant, pattern) => {\n  if (typeof pattern === 'string') {\n    return pattern === constant;\n  } else if (pattern instanceof RegExp) {\n    return pattern.test(constant);\n  } else if (typeof pattern === 'function') {\n    return pattern(constant);\n  } else {\n    throw new TypeError('Pattern is in unsupported datatype');\n  }\n};\n\n/**\n * Check whether the given request is ignored by configuration\n * It will not re-throw exceptions from `list` provided by the client\n * @param constant e.g URL of request\n * @param [list] List of ignore patterns\n * @param [onException] callback for doing something when an exception has\n *     occurred\n */\nconst isLayerIgnored = (\n  name,\n  type,\n  config,\n) => {\n  if (Array.isArray(config?.ignoreLayersType) && config?.ignoreLayersType?.includes(type)) {\n    return true;\n  }\n  if (Array.isArray(config?.ignoreLayers) === false) return false;\n  try {\n    for (const pattern of config.ignoreLayers) {\n      if (satisfiesPattern(name, pattern)) {\n        return true;\n      }\n    }\n  } catch (e) {\n    /* catch block */\n  }\n\n  return false;\n};\n\n/**\n * Converts a user-provided error value into an error and error message pair\n *\n * @param error - User-provided error value\n * @returns Both an Error or string representation of the value and an error message\n */\nconst asErrorAndMessage = (error) =>\n  error instanceof Error ? [error, error.message] : [String(error), String(error)];\n\n/**\n * Extracts the layer path from the route arguments\n *\n * @param args - Arguments of the route\n * @returns The layer path\n */\nconst getLayerPath = (args) => {\n  const firstArg = args[0];\n\n  if (Array.isArray(firstArg)) {\n    return firstArg.map(arg => extractLayerPathSegment(arg) || '').join(',');\n  }\n\n  return extractLayerPathSegment(firstArg);\n};\n\nconst extractLayerPathSegment = (arg) => {\n  if (typeof arg === 'string') {\n    return arg;\n  }\n\n  if (arg instanceof RegExp || typeof arg === 'number') {\n    return arg.toString();\n  }\n\n  return;\n};\n\nexports.asErrorAndMessage = asErrorAndMessage;\nexports.getLayerMetadata = getLayerMetadata;\nexports.getLayerPath = getLayerPath;\nexports.getRouterPath = getRouterPath;\nexports.isLayerIgnored = isLayerIgnored;\nexports.storeLayerPath = storeLayerPath;\n//# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express-v5/utils.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationExpress = __webpack_require__(/*! @opentelemetry/instrumentation-express */ \"(ssr)/./node_modules/@opentelemetry/instrumentation-express/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\nconst instrumentation = __webpack_require__(/*! ./express-v5/instrumentation.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express-v5/instrumentation.js\");\n\nconst INTEGRATION_NAME = 'Express';\nconst INTEGRATION_NAME_V5 = 'Express-V5';\n\nfunction requestHook(span) {\n  addOriginToSpan.addOriginToSpan(span, 'auto.http.otel.express');\n\n  const attributes = core.spanToJSON(span).data;\n  // this is one of: middleware, request_handler, router\n  const type = attributes['express.type'];\n\n  if (type) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.express`);\n  }\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['express.name'];\n  if (typeof name === 'string') {\n    span.updateName(name);\n  }\n}\n\nfunction spanNameHook(info, defaultName) {\n  if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n    debugBuild.DEBUG_BUILD && core.logger.warn('Isolation scope is still default isolation scope - skipping setting transactionName');\n    return defaultName;\n  }\n  if (info.layerType === 'request_handler') {\n    // type cast b/c Otel unfortunately types info.request as any :(\n    const req = info.request ;\n    const method = req.method ? req.method.toUpperCase() : 'GET';\n    core.getIsolationScope().setTransactionName(`${method} ${info.route}`);\n  }\n  return defaultName;\n}\n\nconst instrumentExpress = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationExpress.ExpressInstrumentation({\n      requestHook: span => requestHook(span),\n      spanNameHook: (info, defaultName) => spanNameHook(info, defaultName),\n    }),\n);\n\nconst instrumentExpressV5 = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME_V5,\n  () =>\n    new instrumentation.ExpressInstrumentationV5({\n      requestHook: span => requestHook(span),\n      spanNameHook: (info, defaultName) => spanNameHook(info, defaultName),\n    }),\n);\n\nconst _expressIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentExpress();\n      instrumentExpressV5();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Express](https://expressjs.com/).\n *\n * If you also want to capture errors, you need to call `setupExpressErrorHandler(app)` after you set up your Express server.\n *\n * For more information, see the [express documentation](https://docs.sentry.io/platforms/javascript/guides/express/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.expressIntegration()],\n * })\n * ```\n */\nconst expressIntegration = core.defineIntegration(_expressIntegration);\n\n/**\n * An Express-compatible error handler.\n */\nfunction expressErrorHandler(options) {\n  return function sentryErrorMiddleware(\n    error,\n    request,\n    res,\n    next,\n  ) {\n    const normalizedRequest = core.httpRequestToRequestData(request);\n    // Ensure we use the express-enhanced request here, instead of the plain HTTP one\n    // When an error happens, the `expressRequestHandler` middleware does not run, so we set it here too\n    core.getIsolationScope().setSDKProcessingMetadata({ normalizedRequest });\n\n    const shouldHandleError = options?.shouldHandleError || defaultShouldHandleError;\n\n    if (shouldHandleError(error)) {\n      const eventId = core.captureException(error, { mechanism: { type: 'middleware', handled: false } });\n      (res ).sentry = eventId;\n    }\n\n    next(error);\n  };\n}\n\nfunction expressRequestHandler() {\n  return function sentryRequestMiddleware(\n    request,\n    _res,\n    next,\n  ) {\n    const normalizedRequest = core.httpRequestToRequestData(request);\n    // Ensure we use the express-enhanced request here, instead of the plain HTTP one\n    core.getIsolationScope().setSDKProcessingMetadata({ normalizedRequest });\n\n    next();\n  };\n}\n\n/**\n * Add an Express error handler to capture errors to Sentry.\n *\n * The error handler must be before any other middleware and after all controllers.\n *\n * @param app The Express instances\n * @param options {ExpressHandlerOptions} Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const express = require(\"express\");\n *\n * const app = express();\n *\n * // Add your routes, etc.\n *\n * // Add this after all routes,\n * // but before any and other error-handling middlewares are defined\n * Sentry.setupExpressErrorHandler(app);\n *\n * app.listen(3000);\n * ```\n */\nfunction setupExpressErrorHandler(\n  app,\n  options,\n) {\n  app.use(expressRequestHandler());\n  app.use(expressErrorHandler(options));\n  ensureIsWrapped.ensureIsWrapped(app.use, 'express');\n}\n\nfunction getStatusCodeFromResponse(error) {\n  const statusCode = error.status || error.statusCode || error.status_code || error.output?.statusCode;\n  return statusCode ? parseInt(statusCode , 10) : 500;\n}\n\n/** Returns true if response code is internal server error */\nfunction defaultShouldHandleError(error) {\n  const status = getStatusCodeFromResponse(error);\n  return status >= 500;\n}\n\nexports.expressErrorHandler = expressErrorHandler;\nexports.expressIntegration = expressIntegration;\nexports.instrumentExpress = instrumentExpress;\nexports.instrumentExpressV5 = instrumentExpressV5;\nexports.setupExpressErrorHandler = setupExpressErrorHandler;\n//# sourceMappingURL=express.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/fastify-otel/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst diagnosticsChannel = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core = __webpack_require__(/*! @opentelemetry/core */ \"(ssr)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(ssr)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\n\n/*\nVendored in and modified from @fastify/otel version 0.8.0\nhttps://github.com/fastify/otel/releases/tag/v0.8.0\n\nTried not to modify the original code too much keeping it as a JavaScript CJS module to make it easier to update when required\n\nModifications include:\n- Removed reading of package.json to get the version and package name\n\nMIT License\n\nCopyright (c) 2024 Fastify\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\n// SENTRY VENDOR NOTE\n// Instead of using the package.json file, we hard code the package name and version here.\nconst PACKAGE_NAME = '@fastify/otel';\nconst PACKAGE_VERSION = '0.8.0';\n\n// Constants\nconst SUPPORTED_VERSIONS = '>=4.0.0 <6';\nconst FASTIFY_HOOKS = [\n  'onRequest',\n  'preParsing',\n  'preValidation',\n  'preHandler',\n  'preSerialization',\n  'onSend',\n  'onResponse',\n  'onError',\n];\nconst ATTRIBUTE_NAMES = {\n  HOOK_NAME: 'hook.name',\n  FASTIFY_TYPE: 'fastify.type',\n  HOOK_CALLBACK_NAME: 'hook.callback.name',\n  ROOT: 'fastify.root',\n};\nconst HOOK_TYPES = {\n  ROUTE: 'route-hook',\n  INSTANCE: 'hook',\n  HANDLER: 'request-handler',\n};\nconst ANONYMOUS_FUNCTION_NAME = 'anonymous';\n\n// Symbols\nconst kInstrumentation = Symbol('fastify otel instance');\nconst kRequestSpan = Symbol('fastify otel request spans');\nconst kRequestContext = Symbol('fastify otel request context');\nconst kAddHookOriginal = Symbol('fastify otel addhook original');\nconst kSetNotFoundOriginal = Symbol('fastify otel setnotfound original');\nconst kIgnorePaths = Symbol('fastify otel ignore path');\n\nclass FastifyOtelInstrumentation extends instrumentation.InstrumentationBase {\n  constructor(config) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n    this.servername = config?.servername ?? process.env.OTEL_SERVICE_NAME ?? 'fastify';\n    this[kIgnorePaths] = null;\n    this._logger = api.diag.createComponentLogger({ namespace: PACKAGE_NAME });\n\n    if (config?.ignorePaths != null || process.env.OTEL_FASTIFY_IGNORE_PATHS != null) {\n      const ignorePaths = config?.ignorePaths ?? process.env.OTEL_FASTIFY_IGNORE_PATHS;\n\n      if ((typeof ignorePaths !== 'string' || ignorePaths.length === 0) && typeof ignorePaths !== 'function') {\n        throw new TypeError('ignorePaths must be a string or a function');\n      }\n\n      let globMatcher = null;\n\n      this[kIgnorePaths] = routeOptions => {\n        if (typeof ignorePaths === 'function') {\n          return ignorePaths(routeOptions);\n        } else {\n          // Using minimatch to match the path until path.matchesGlob is out of experimental\n          // path.matchesGlob uses minimatch internally\n          if (globMatcher == null) {\n            globMatcher = (__webpack_require__(/*! minimatch */ \"(ssr)/./node_modules/minimatch/dist/commonjs/index.js\").minimatch);\n          }\n\n          return globMatcher(routeOptions.url, ignorePaths);\n        }\n      };\n    }\n  }\n\n  enable() {\n    if (this._handleInitialization === undefined && this.getConfig().registerOnInitialization) {\n      const FastifyInstrumentationPlugin = this.plugin();\n      this._handleInitialization = message => {\n        message.fastify.register(FastifyInstrumentationPlugin);\n      };\n      diagnosticsChannel.default.subscribe('fastify.initialization', this._handleInitialization);\n    }\n    return super.enable();\n  }\n\n  disable() {\n    if (this._handleInitialization) {\n      diagnosticsChannel.default.unsubscribe('fastify.initialization', this._handleInitialization);\n      this._handleInitialization = undefined;\n    }\n    return super.disable();\n  }\n\n  // We do not do patching in this instrumentation\n  init() {\n    return [];\n  }\n\n  plugin() {\n    const instrumentation = this;\n\n    FastifyInstrumentationPlugin[Symbol.for('skip-override')] = true;\n    FastifyInstrumentationPlugin[Symbol.for('fastify.display-name')] = '@fastify/otel';\n    FastifyInstrumentationPlugin[Symbol.for('plugin-meta')] = {\n      fastify: SUPPORTED_VERSIONS,\n      name: '@fastify/otel',\n    };\n\n    return FastifyInstrumentationPlugin;\n\n    function FastifyInstrumentationPlugin(instance, opts, done) {\n      instance.decorate(kInstrumentation, instrumentation);\n      // addHook and notfoundHandler are essentially inherited from the prototype\n      // what is important is to bound it to the right instance\n      instance.decorate(kAddHookOriginal, instance.addHook);\n      instance.decorate(kSetNotFoundOriginal, instance.setNotFoundHandler);\n      instance.decorateRequest('opentelemetry', function openetelemetry() {\n        const ctx = this[kRequestContext];\n        const span = this[kRequestSpan];\n        return {\n          span,\n          tracer: instrumentation.tracer,\n          context: ctx,\n          inject: (carrier, setter) => {\n            return api.propagation.inject(ctx, carrier, setter);\n          },\n          extract: (carrier, getter) => {\n            return api.propagation.extract(ctx, carrier, getter);\n          },\n        };\n      });\n      instance.decorateRequest(kRequestSpan, null);\n      instance.decorateRequest(kRequestContext, null);\n\n      instance.addHook('onRoute', function (routeOptions) {\n        if (instrumentation[kIgnorePaths]?.(routeOptions) === true) {\n          instrumentation._logger.debug(\n            `Ignoring route instrumentation ${routeOptions.method} ${routeOptions.url} because it matches the ignore path`,\n          );\n          return;\n        }\n\n        for (const hook of FASTIFY_HOOKS) {\n          if (routeOptions[hook] != null) {\n            const handlerLike = routeOptions[hook];\n\n            if (typeof handlerLike === 'function') {\n              routeOptions[hook] = handlerWrapper(handlerLike, {\n                [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n                [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - route -> ${hook}`,\n                [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.ROUTE,\n                [semanticConventions.ATTR_HTTP_ROUTE]: routeOptions.url,\n                [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                  handlerLike.name?.length > 0 ? handlerLike.name : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n              });\n            } else if (Array.isArray(handlerLike)) {\n              const wrappedHandlers = [];\n\n              for (const handler of handlerLike) {\n                wrappedHandlers.push(\n                  handlerWrapper(handler, {\n                    [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n                    [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - route -> ${hook}`,\n                    [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.ROUTE,\n                    [semanticConventions.ATTR_HTTP_ROUTE]: routeOptions.url,\n                    [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                      handler.name?.length > 0 ? handler.name : ANONYMOUS_FUNCTION_NAME,\n                  }),\n                );\n              }\n\n              routeOptions[hook] = wrappedHandlers;\n            }\n          }\n        }\n\n        // We always want to add the onSend hook to the route to be executed last\n        if (routeOptions.onSend != null) {\n          routeOptions.onSend = Array.isArray(routeOptions.onSend)\n            ? [...routeOptions.onSend, onSendHook]\n            : [routeOptions.onSend, onSendHook];\n        } else {\n          routeOptions.onSend = onSendHook;\n        }\n\n        // We always want to add the onError hook to the route to be executed last\n        if (routeOptions.onError != null) {\n          routeOptions.onError = Array.isArray(routeOptions.onError)\n            ? [...routeOptions.onError, onErrorHook]\n            : [routeOptions.onError, onErrorHook];\n        } else {\n          routeOptions.onError = onErrorHook;\n        }\n\n        routeOptions.handler = handlerWrapper(routeOptions.handler, {\n          [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n          [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - route-handler`,\n          [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.HANDLER,\n          [semanticConventions.ATTR_HTTP_ROUTE]: routeOptions.url,\n          [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n            routeOptions.handler.name.length > 0 ? routeOptions.handler.name : ANONYMOUS_FUNCTION_NAME,\n        });\n      });\n\n      instance.addHook('onRequest', function (request, _reply, hookDone) {\n        if (this[kInstrumentation].isEnabled() === false) {\n          return hookDone();\n        } else if (\n          this[kInstrumentation][kIgnorePaths]?.({\n            url: request.url,\n            method: request.method,\n          }) === true\n        ) {\n          this[kInstrumentation]._logger.debug(\n            `Ignoring request ${request.method} ${request.url} because it matches the ignore path`,\n          );\n          return hookDone();\n        }\n\n        let ctx = api.context.active();\n\n        if (api.trace.getSpan(ctx) == null) {\n          ctx = api.propagation.extract(ctx, request.headers);\n        }\n\n        const rpcMetadata = core.getRPCMetadata(ctx);\n\n        if (request.routeOptions.url != null && rpcMetadata?.type === core.RPCType.HTTP) {\n          rpcMetadata.route = request.routeOptions.url;\n        }\n\n        /** @type {import('@opentelemetry/api').Span} */\n        const span = this[kInstrumentation].tracer.startSpan(\n          'request',\n          {\n            attributes: {\n              [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n              [ATTRIBUTE_NAMES.ROOT]: '@fastify/otel',\n              [semanticConventions.ATTR_HTTP_ROUTE]: request.url,\n              [semanticConventions.ATTR_HTTP_REQUEST_METHOD]: request.method,\n            },\n          },\n          ctx,\n        );\n\n        request[kRequestContext] = api.trace.setSpan(ctx, span);\n        request[kRequestSpan] = span;\n\n        api.context.with(request[kRequestContext], () => {\n          hookDone();\n        });\n      });\n\n      // onResponse is the last hook to be executed, only added for 404 handlers\n      instance.addHook('onResponse', function (request, reply, hookDone) {\n        const span = request[kRequestSpan];\n\n        if (span != null) {\n          span.setStatus({\n            code: api.SpanStatusCode.OK,\n            message: 'OK',\n          });\n          span.setAttributes({\n            [semanticConventions.ATTR_HTTP_RESPONSE_STATUS_CODE]: 404,\n          });\n          span.end();\n        }\n\n        request[kRequestSpan] = null;\n\n        hookDone();\n      });\n\n      instance.addHook = addHookPatched;\n      instance.setNotFoundHandler = setNotFoundHandlerPatched;\n\n      done();\n\n      function onSendHook(request, reply, payload, hookDone) {\n        /** @type {import('@opentelemetry/api').Span} */\n        const span = request[kRequestSpan];\n\n        if (span != null) {\n          if (reply.statusCode < 500) {\n            span.setStatus({\n              code: api.SpanStatusCode.OK,\n              message: 'OK',\n            });\n          }\n\n          span.setAttributes({\n            [semanticConventions.ATTR_HTTP_RESPONSE_STATUS_CODE]: reply.statusCode,\n          });\n          span.end();\n        }\n\n        request[kRequestSpan] = null;\n\n        hookDone(null, payload);\n      }\n\n      function onErrorHook(request, reply, error, hookDone) {\n        /** @type {Span} */\n        const span = request[kRequestSpan];\n\n        if (span != null) {\n          span.setStatus({\n            code: api.SpanStatusCode.ERROR,\n            message: error.message,\n          });\n          span.recordException(error);\n        }\n\n        hookDone();\n      }\n\n      function addHookPatched(name, hook) {\n        const addHookOriginal = this[kAddHookOriginal];\n\n        if (FASTIFY_HOOKS.includes(name)) {\n          return addHookOriginal.call(\n            this,\n            name,\n            handlerWrapper(hook, {\n              [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n              [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - ${name}`,\n              [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n              [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                hook.name?.length > 0 ? hook.name : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n            }),\n          );\n        } else {\n          return addHookOriginal.call(this, name, hook);\n        }\n      }\n\n      function setNotFoundHandlerPatched(hooks, handler) {\n        const setNotFoundHandlerOriginal = this[kSetNotFoundOriginal];\n        if (typeof hooks === 'function') {\n          handler = handlerWrapper(hooks, {\n            [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n            [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler`,\n            [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n            [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n              hooks.name?.length > 0 ? hooks.name : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n          });\n          setNotFoundHandlerOriginal.call(this, handler);\n        } else {\n          if (hooks.preValidation != null) {\n            hooks.preValidation = handlerWrapper(hooks.preValidation, {\n              [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n              [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler - preValidation`,\n              [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n              [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                hooks.preValidation.name?.length > 0\n                  ? hooks.preValidation.name\n                  : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n            });\n          }\n\n          if (hooks.preHandler != null) {\n            hooks.preHandler = handlerWrapper(hooks.preHandler, {\n              [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n              [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler - preHandler`,\n              [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n              [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n                hooks.preHandler.name?.length > 0\n                  ? hooks.preHandler.name\n                  : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n            });\n          }\n\n          handler = handlerWrapper(handler, {\n            [semanticConventions.ATTR_SERVICE_NAME]: instance[kInstrumentation].servername,\n            [ATTRIBUTE_NAMES.HOOK_NAME]: `${this.pluginName} - not-found-handler`,\n            [ATTRIBUTE_NAMES.FASTIFY_TYPE]: HOOK_TYPES.INSTANCE,\n            [ATTRIBUTE_NAMES.HOOK_CALLBACK_NAME]:\n              handler.name?.length > 0 ? handler.name : ANONYMOUS_FUNCTION_NAME /* c8 ignore next */,\n          });\n          setNotFoundHandlerOriginal.call(this, hooks, handler);\n        }\n      }\n\n      function handlerWrapper(handler, spanAttributes = {}) {\n        return function handlerWrapped(...args) {\n          /** @type {FastifyOtelInstrumentation} */\n          const instrumentation = this[kInstrumentation];\n          const [request] = args;\n\n          if (instrumentation.isEnabled() === false) {\n            return handler.call(this, ...args);\n          }\n\n          const ctx = request[kRequestContext] ?? api.context.active();\n          const span = instrumentation.tracer.startSpan(\n            `handler - ${\n              handler.name?.length > 0\n                ? handler.name\n                : this.pluginName /* c8 ignore next */ ?? ANONYMOUS_FUNCTION_NAME /* c8 ignore next */\n            }`,\n            {\n              attributes: spanAttributes,\n            },\n            ctx,\n          );\n\n          return api.context.with(\n            api.trace.setSpan(ctx, span),\n            function () {\n              try {\n                const res = handler.call(this, ...args);\n\n                if (typeof res?.then === 'function') {\n                  return res.then(\n                    result => {\n                      span.end();\n                      return result;\n                    },\n                    error => {\n                      span.setStatus({\n                        code: api.SpanStatusCode.ERROR,\n                        message: error.message,\n                      });\n                      span.recordException(error);\n                      span.end();\n                      return Promise.reject(error);\n                    },\n                  );\n                }\n\n                span.end();\n                return res;\n              } catch (error) {\n                span.setStatus({\n                  code: api.SpanStatusCode.ERROR,\n                  message: error.message,\n                });\n                span.recordException(error);\n                span.end();\n                throw error;\n              }\n            },\n            this,\n          );\n        };\n      }\n    }\n  }\n}\n\nexports.FastifyOtelInstrumentation = FastifyOtelInstrumentation;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/fastify-otel/index.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst diagnosticsChannel = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../../debug-build.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst instrument = __webpack_require__(/*! ../../../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst index = __webpack_require__(/*! ./fastify-otel/index.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/fastify-otel/index.js\");\nconst instrumentation = __webpack_require__(/*! ./v3/instrumentation.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/instrumentation.js\");\n\nconst INTEGRATION_NAME = 'Fastify';\nconst INTEGRATION_NAME_V3 = 'Fastify-V3';\n\nconst instrumentFastifyV3 = instrument.generateInstrumentOnce(INTEGRATION_NAME_V3, () => new instrumentation.FastifyInstrumentationV3());\n\nconst instrumentFastify = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => {\n  const fastifyOtelInstrumentationInstance = new index.FastifyOtelInstrumentation();\n  const plugin = fastifyOtelInstrumentationInstance.plugin();\n\n  // This message handler works for Fastify versions 3, 4 and 5\n  diagnosticsChannel.subscribe('fastify.initialization', message => {\n    const fastifyInstance = (message ).fastify;\n\n    fastifyInstance?.register(plugin).after(err => {\n      if (err) {\n        debugBuild.DEBUG_BUILD && core.logger.error('Failed to setup Fastify instrumentation', err);\n      } else {\n        instrumentClient();\n\n        if (fastifyInstance) {\n          instrumentOnRequest(fastifyInstance);\n        }\n      }\n    });\n  });\n\n  // Returning this as unknown not to deal with the internal types of the FastifyOtelInstrumentation\n  return fastifyOtelInstrumentationInstance ;\n});\n\nconst _fastifyIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentFastifyV3();\n      instrumentFastify();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Fastify](https://fastify.dev/).\n *\n * If you also want to capture errors, you need to call `setupFastifyErrorHandler(app)` after you set up your Fastify server.\n *\n * For more information, see the [fastify documentation](https://docs.sentry.io/platforms/javascript/guides/fastify/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.fastifyIntegration()],\n * })\n * ```\n */\nconst fastifyIntegration = core.defineIntegration(_fastifyIntegration);\n\n/**\n * Default function to determine if an error should be sent to Sentry\n *\n * 3xx and 4xx errors are not sent by default.\n */\nfunction defaultShouldHandleError(_error, _request, reply) {\n  const statusCode = reply.statusCode;\n  // 3xx and 4xx errors are not sent by default.\n  return statusCode >= 500 || statusCode <= 299;\n}\n\n/**\n * Add an Fastify error handler to capture errors to Sentry.\n *\n * @param fastify The Fastify instance to which to add the error handler\n * @param options Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Fastify = require(\"fastify\");\n *\n * const app = Fastify();\n *\n * Sentry.setupFastifyErrorHandler(app);\n *\n * // Add your routes, etc.\n *\n * app.listen({ port: 3000 });\n * ```\n */\nfunction setupFastifyErrorHandler(fastify, options) {\n  const shouldHandleError = options?.shouldHandleError || defaultShouldHandleError;\n\n  const plugin = Object.assign(\n    function (fastify, _options, done) {\n      fastify.addHook('onError', async (request, reply, error) => {\n        if (shouldHandleError(error, request, reply)) {\n          core.captureException(error);\n        }\n      });\n\n      done();\n    },\n    {\n      [Symbol.for('skip-override')]: true,\n      [Symbol.for('fastify.display-name')]: 'sentry-fastify-error-handler',\n    },\n  );\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  fastify.register(plugin);\n}\n\nfunction addFastifySpanAttributes(span) {\n  const spanJSON = core.spanToJSON(span);\n  const spanName = spanJSON.description;\n  const attributes = spanJSON.data;\n\n  const type = attributes['fastify.type'];\n\n  const isHook = type === 'hook';\n  const isHandler = type === spanName?.startsWith('handler -');\n  // In @fastify/otel `request-handler` is separated by dash, not underscore\n  const isRequestHandler = spanName === 'request' || type === 'request-handler';\n\n  // If this is already set, or we have no fastify span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || (!isHandler && !isRequestHandler && !isHook)) {\n    return;\n  }\n\n  const opPrefix = isHook ? 'hook' : isHandler ? 'middleware' : isRequestHandler ? 'request-handler' : '<unknown>';\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.fastify',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${opPrefix}.fastify`,\n  });\n\n  const attrName = attributes['fastify.name'] || attributes['plugin.name'] || attributes['hook.name'];\n  if (typeof attrName === 'string') {\n    // Try removing `fastify -> ` and `@fastify/otel -> ` prefixes\n    // This is a bit of a hack, and not always working for all spans\n    // But it's the best we can do without a proper API\n    const updatedName = attrName.replace(/^fastify -> /, '').replace(/^@fastify\\/otel -> /, '');\n\n    span.updateName(updatedName);\n  }\n}\n\nfunction instrumentClient() {\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', (span) => {\n      addFastifySpanAttributes(span);\n    });\n  }\n}\n\nfunction instrumentOnRequest(fastify) {\n  fastify.addHook('onRequest', async (request, _reply) => {\n    if (request.opentelemetry) {\n      const { span } = request.opentelemetry();\n\n      if (span) {\n        addFastifySpanAttributes(span);\n      }\n    }\n\n    const routeName = request.routeOptions?.url;\n    const method = request.method || 'GET';\n\n    core.getIsolationScope().setTransactionName(`${method} ${routeName}`);\n  });\n}\n\nexports.fastifyIntegration = fastifyIntegration;\nexports.instrumentFastify = instrumentFastify;\nexports.instrumentFastifyV3 = instrumentFastifyV3;\nexports.setupFastifyErrorHandler = setupFastifyErrorHandler;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/constants.js":(__unused_webpack_module,exports)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n// Vendored from https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/constants.ts\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst spanRequestSymbol = Symbol('opentelemetry.instrumentation.fastify.request_active_span');\n\nexports.spanRequestSymbol = spanRequestSymbol;\n//# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9mYXN0aWZ5L3YzL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXGludGVncmF0aW9uc1xcdHJhY2luZ1xcZmFzdGlmeVxcdjNcXGNvbnN0YW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLy8gVmVuZG9yZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1qcy1jb250cmliL2Jsb2IvNDA3ZjYxNTkxYmE2OWEzOWE2OTA4MjY0Mzc5ZDRkOThhNDhkYmVjNC9wbHVnaW5zL25vZGUvb3BlbnRlbGVtZXRyeS1pbnN0cnVtZW50YXRpb24tZmFzdGlmeS9zcmMvY29uc3RhbnRzLnRzXG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5jb25zdCBzcGFuUmVxdWVzdFN5bWJvbCA9IFN5bWJvbCgnb3BlbnRlbGVtZXRyeS5pbnN0cnVtZW50YXRpb24uZmFzdGlmeS5yZXF1ZXN0X2FjdGl2ZV9zcGFuJyk7XG5cbmV4cG9ydHMuc3BhblJlcXVlc3RTeW1ib2wgPSBzcGFuUmVxdWVzdFN5bWJvbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/constants.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/enums/AttributeNames.js":(__unused_webpack_module,exports)=>{eval('Object.defineProperty(exports, Symbol.toStringTag, { value: \'Module\' });\n\n// Vendored from https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/enums/AttributeNames.ts\n//\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexports.AttributeNames = void 0; (function (AttributeNames) {\n  const FASTIFY_NAME = \'fastify.name\'; AttributeNames["FASTIFY_NAME"] = FASTIFY_NAME;\n  const FASTIFY_TYPE = \'fastify.type\'; AttributeNames["FASTIFY_TYPE"] = FASTIFY_TYPE;\n  const HOOK_NAME = \'hook.name\'; AttributeNames["HOOK_NAME"] = HOOK_NAME;\n  const PLUGIN_NAME = \'plugin.name\'; AttributeNames["PLUGIN_NAME"] = PLUGIN_NAME;\n})(exports.AttributeNames || (exports.AttributeNames = {}));\n\nexports.FastifyTypes = void 0; (function (FastifyTypes) {\n  const MIDDLEWARE = \'middleware\'; FastifyTypes["MIDDLEWARE"] = MIDDLEWARE;\n  const REQUEST_HANDLER = \'request_handler\'; FastifyTypes["REQUEST_HANDLER"] = REQUEST_HANDLER;\n})(exports.FastifyTypes || (exports.FastifyTypes = {}));\n\nexports.FastifyNames = void 0; (function (FastifyNames) {\n  const MIDDLEWARE = \'middleware\'; FastifyNames["MIDDLEWARE"] = MIDDLEWARE;\n  const REQUEST_HANDLER = \'request handler\'; FastifyNames["REQUEST_HANDLER"] = REQUEST_HANDLER;\n})(exports.FastifyNames || (exports.FastifyNames = {}));\n//# sourceMappingURL=AttributeNames.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9mYXN0aWZ5L3YzL2VudW1zL0F0dHJpYnV0ZU5hbWVzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCLFdBQVc7QUFDakMsdUNBQXVDO0FBQ3ZDLHVDQUF1QztBQUN2QyxpQ0FBaUM7QUFDakMscUNBQXFDO0FBQ3JDLENBQUMsNkJBQTZCLHNCQUFzQixLQUFLOztBQUV6RCxvQkFBb0IsV0FBVztBQUMvQixtQ0FBbUM7QUFDbkMsNkNBQTZDO0FBQzdDLENBQUMsMkJBQTJCLG9CQUFvQixLQUFLOztBQUVyRCxvQkFBb0IsV0FBVztBQUMvQixtQ0FBbUM7QUFDbkMsNkNBQTZDO0FBQzdDLENBQUMsMkJBQTJCLG9CQUFvQixLQUFLO0FBQ3JEIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAc2VudHJ5XFxub2RlXFxidWlsZFxcY2pzXFxpbnRlZ3JhdGlvbnNcXHRyYWNpbmdcXGZhc3RpZnlcXHYzXFxlbnVtc1xcQXR0cmlidXRlTmFtZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbi8vIFZlbmRvcmVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktanMtY29udHJpYi9ibG9iLzQwN2Y2MTU5MWJhNjlhMzlhNjkwODI2NDM3OWQ0ZDk4YTQ4ZGJlYzQvcGx1Z2lucy9ub2RlL29wZW50ZWxlbWV0cnktaW5zdHJ1bWVudGF0aW9uLWZhc3RpZnkvc3JjL2VudW1zL0F0dHJpYnV0ZU5hbWVzLnRzXG4vL1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyA9IHZvaWQgMDsgKGZ1bmN0aW9uIChBdHRyaWJ1dGVOYW1lcykge1xuICBjb25zdCBGQVNUSUZZX05BTUUgPSAnZmFzdGlmeS5uYW1lJzsgQXR0cmlidXRlTmFtZXNbXCJGQVNUSUZZX05BTUVcIl0gPSBGQVNUSUZZX05BTUU7XG4gIGNvbnN0IEZBU1RJRllfVFlQRSA9ICdmYXN0aWZ5LnR5cGUnOyBBdHRyaWJ1dGVOYW1lc1tcIkZBU1RJRllfVFlQRVwiXSA9IEZBU1RJRllfVFlQRTtcbiAgY29uc3QgSE9PS19OQU1FID0gJ2hvb2submFtZSc7IEF0dHJpYnV0ZU5hbWVzW1wiSE9PS19OQU1FXCJdID0gSE9PS19OQU1FO1xuICBjb25zdCBQTFVHSU5fTkFNRSA9ICdwbHVnaW4ubmFtZSc7IEF0dHJpYnV0ZU5hbWVzW1wiUExVR0lOX05BTUVcIl0gPSBQTFVHSU5fTkFNRTtcbn0pKGV4cG9ydHMuQXR0cmlidXRlTmFtZXMgfHwgKGV4cG9ydHMuQXR0cmlidXRlTmFtZXMgPSB7fSkpO1xuXG5leHBvcnRzLkZhc3RpZnlUeXBlcyA9IHZvaWQgMDsgKGZ1bmN0aW9uIChGYXN0aWZ5VHlwZXMpIHtcbiAgY29uc3QgTUlERExFV0FSRSA9ICdtaWRkbGV3YXJlJzsgRmFzdGlmeVR5cGVzW1wiTUlERExFV0FSRVwiXSA9IE1JRERMRVdBUkU7XG4gIGNvbnN0IFJFUVVFU1RfSEFORExFUiA9ICdyZXF1ZXN0X2hhbmRsZXInOyBGYXN0aWZ5VHlwZXNbXCJSRVFVRVNUX0hBTkRMRVJcIl0gPSBSRVFVRVNUX0hBTkRMRVI7XG59KShleHBvcnRzLkZhc3RpZnlUeXBlcyB8fCAoZXhwb3J0cy5GYXN0aWZ5VHlwZXMgPSB7fSkpO1xuXG5leHBvcnRzLkZhc3RpZnlOYW1lcyA9IHZvaWQgMDsgKGZ1bmN0aW9uIChGYXN0aWZ5TmFtZXMpIHtcbiAgY29uc3QgTUlERExFV0FSRSA9ICdtaWRkbGV3YXJlJzsgRmFzdGlmeU5hbWVzW1wiTUlERExFV0FSRVwiXSA9IE1JRERMRVdBUkU7XG4gIGNvbnN0IFJFUVVFU1RfSEFORExFUiA9ICdyZXF1ZXN0IGhhbmRsZXInOyBGYXN0aWZ5TmFtZXNbXCJSRVFVRVNUX0hBTkRMRVJcIl0gPSBSRVFVRVNUX0hBTkRMRVI7XG59KShleHBvcnRzLkZhc3RpZnlOYW1lcyB8fCAoZXhwb3J0cy5GYXN0aWZ5TmFtZXMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXR0cmlidXRlTmFtZXMuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/enums/AttributeNames.js\n')},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/instrumentation.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core = __webpack_require__(/*! @opentelemetry/core */ \"(ssr)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(ssr)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core$1 = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst AttributeNames = __webpack_require__(/*! ./enums/AttributeNames.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/enums/AttributeNames.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/utils.js\");\n\n// Vendored from: https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/instrumentation.ts\n/* eslint-disable @typescript-eslint/no-this-alias */\n/* eslint-disable jsdoc/require-jsdoc */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/** @knipignore */\n\nconst PACKAGE_VERSION = '0.1.0';\n\nconst PACKAGE_NAME = '@sentry/instrumentation-fastify-v3';\nconst ANONYMOUS_NAME = 'anonymous';\n\n// The instrumentation creates a span for invocations of lifecycle hook handlers\n// that take `(request, reply, ...[, done])` arguments. Currently this is all\n// lifecycle hooks except `onRequestAbort`.\n// https://fastify.dev/docs/latest/Reference/Hooks\nconst hooksNamesToWrap = new Set([\n  'onTimeout',\n  'onRequest',\n  'preParsing',\n  'preValidation',\n  'preSerialization',\n  'preHandler',\n  'onSend',\n  'onResponse',\n  'onError',\n]);\n\n/**\n * Fastify instrumentation for OpenTelemetry\n */\nclass FastifyInstrumentationV3 extends instrumentation.InstrumentationBase {\n   constructor(config = {}) {\n    super(PACKAGE_NAME, PACKAGE_VERSION, config);\n  }\n\n   init() {\n    return [\n      new instrumentation.InstrumentationNodeModuleDefinition('fastify', ['>=3.0.0 <4'], moduleExports => {\n        return this._patchConstructor(moduleExports);\n      }),\n    ];\n  }\n\n   _hookOnRequest() {\n    const instrumentation = this;\n\n    return function onRequest(request, reply, done) {\n      if (!instrumentation.isEnabled()) {\n        return done();\n      }\n      instrumentation._wrap(reply, 'send', instrumentation._patchSend());\n\n      const anyRequest = request ;\n\n      const rpcMetadata = core.getRPCMetadata(api.context.active());\n      const routeName = anyRequest.routeOptions\n        ? anyRequest.routeOptions.url // since fastify@4.10.0\n        : request.routerPath;\n      if (routeName && rpcMetadata?.type === core.RPCType.HTTP) {\n        rpcMetadata.route = routeName;\n      }\n\n      const method = request.method || 'GET';\n\n      core$1.getIsolationScope().setTransactionName(`${method} ${routeName}`);\n      done();\n    };\n  }\n\n   _wrapHandler(\n    pluginName,\n    hookName,\n    original,\n    syncFunctionWithDone,\n  ) {\n    const instrumentation = this;\n    this._diag.debug('Patching fastify route.handler function');\n\n    return function ( ...args) {\n      if (!instrumentation.isEnabled()) {\n        return original.apply(this, args);\n      }\n\n      const name = original.name || pluginName || ANONYMOUS_NAME;\n      const spanName = `${AttributeNames.FastifyNames.MIDDLEWARE} - ${name}`;\n\n      const reply = args[1] ;\n\n      const span = utils.startSpan(reply, instrumentation.tracer, spanName, {\n        [AttributeNames.AttributeNames.FASTIFY_TYPE]: AttributeNames.FastifyTypes.MIDDLEWARE,\n        [AttributeNames.AttributeNames.PLUGIN_NAME]: pluginName,\n        [AttributeNames.AttributeNames.HOOK_NAME]: hookName,\n      });\n\n      const origDone = syncFunctionWithDone && (args[args.length - 1] );\n      if (origDone) {\n        args[args.length - 1] = function (...doneArgs) {\n          utils.endSpan(reply);\n          origDone.apply(this, doneArgs);\n        };\n      }\n\n      return api.context.with(api.trace.setSpan(api.context.active(), span), () => {\n        return utils.safeExecuteInTheMiddleMaybePromise(\n          () => {\n            return original.apply(this, args);\n          },\n          err => {\n            if (err instanceof Error) {\n              span.setStatus({\n                code: api.SpanStatusCode.ERROR,\n                message: err.message,\n              });\n              span.recordException(err);\n            }\n            // async hooks should end the span as soon as the promise is resolved\n            if (!syncFunctionWithDone) {\n              utils.endSpan(reply);\n            }\n          },\n        );\n      });\n    };\n  }\n\n   _wrapAddHook() {\n    const instrumentation = this;\n    this._diag.debug('Patching fastify server.addHook function');\n\n    // biome-ignore lint/complexity/useArrowFunction: <explanation>\n    return function (original) {\n      return function wrappedAddHook( ...args) {\n        const name = args[0] ;\n        const handler = args[1] ;\n        const pluginName = this.pluginName;\n        if (!hooksNamesToWrap.has(name)) {\n          return original.apply(this, args);\n        }\n\n        const syncFunctionWithDone =\n          typeof args[args.length - 1] === 'function' && handler.constructor.name !== 'AsyncFunction';\n\n        return original.apply(this, [\n          name,\n          instrumentation._wrapHandler(pluginName, name, handler, syncFunctionWithDone),\n        ] );\n      };\n    };\n  }\n\n   _patchConstructor(moduleExports\n\n) {\n    const instrumentation = this;\n\n    function fastify( ...args) {\n      const app = moduleExports.fastify.apply(this, args);\n      app.addHook('onRequest', instrumentation._hookOnRequest());\n      app.addHook('preHandler', instrumentation._hookPreHandler());\n\n      instrumentClient();\n\n      instrumentation._wrap(app, 'addHook', instrumentation._wrapAddHook());\n\n      return app;\n    }\n\n    if (moduleExports.errorCodes !== undefined) {\n      fastify.errorCodes = moduleExports.errorCodes;\n    }\n    fastify.fastify = fastify;\n    fastify.default = fastify;\n    return fastify;\n  }\n\n   _patchSend() {\n    const instrumentation$1 = this;\n    this._diag.debug('Patching fastify reply.send function');\n\n    return function patchSend(original) {\n      return function send( ...args) {\n        const maybeError = args[0];\n\n        if (!instrumentation$1.isEnabled()) {\n          return original.apply(this, args);\n        }\n\n        return instrumentation.safeExecuteInTheMiddle(\n          () => {\n            return original.apply(this, args);\n          },\n          err => {\n            if (!err && maybeError instanceof Error) {\n              // eslint-disable-next-line no-param-reassign\n              err = maybeError;\n            }\n            utils.endSpan(this, err);\n          },\n        );\n      };\n    };\n  }\n\n   _hookPreHandler() {\n    const instrumentation$1 = this;\n    this._diag.debug('Patching fastify preHandler function');\n\n    return function preHandler( request, reply, done) {\n      if (!instrumentation$1.isEnabled()) {\n        return done();\n      }\n      const anyRequest = request ;\n\n      const handler = anyRequest.routeOptions?.handler || anyRequest.context?.handler;\n      const handlerName = handler?.name.startsWith('bound ') ? handler.name.substring(6) : handler?.name;\n      const spanName = `${AttributeNames.FastifyNames.REQUEST_HANDLER} - ${handlerName || this.pluginName || ANONYMOUS_NAME}`;\n\n      const spanAttributes = {\n        [AttributeNames.AttributeNames.PLUGIN_NAME]: this.pluginName,\n        [AttributeNames.AttributeNames.FASTIFY_TYPE]: AttributeNames.FastifyTypes.REQUEST_HANDLER,\n        // eslint-disable-next-line deprecation/deprecation\n        [semanticConventions.SEMATTRS_HTTP_ROUTE]: anyRequest.routeOptions\n          ? anyRequest.routeOptions.url // since fastify@4.10.0\n          : request.routerPath,\n      };\n      if (handlerName) {\n        spanAttributes[AttributeNames.AttributeNames.FASTIFY_NAME] = handlerName;\n      }\n      const span = utils.startSpan(reply, instrumentation$1.tracer, spanName, spanAttributes);\n\n      addFastifyV3SpanAttributes(span);\n\n      const { requestHook } = instrumentation$1.getConfig();\n      if (requestHook) {\n        instrumentation.safeExecuteInTheMiddle(\n          () => requestHook(span, { request }),\n          e => {\n            if (e) {\n              instrumentation$1._diag.error('request hook failed', e);\n            }\n          },\n          true,\n        );\n      }\n\n      return api.context.with(api.trace.setSpan(api.context.active(), span), () => {\n        done();\n      });\n    };\n  }\n}\n\nfunction instrumentClient() {\n  const client = core$1.getClient();\n  if (client) {\n    client.on('spanStart', (span) => {\n      addFastifyV3SpanAttributes(span);\n    });\n  }\n}\n\nfunction addFastifyV3SpanAttributes(span) {\n  const attributes = core$1.spanToJSON(span).data;\n\n  // this is one of: middleware, request_handler\n  const type = attributes['fastify.type'];\n\n  // If this is already set, or we have no fastify span, no need to process again...\n  if (attributes[core$1.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core$1.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.fastify',\n    [core$1.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.fastify`,\n  });\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['fastify.name'] || attributes['plugin.name'] || attributes['hook.name'];\n  if (typeof name === 'string') {\n    // Try removing `fastify -> ` and `@fastify/otel -> ` prefixes\n    // This is a bit of a hack, and not always working for all spans\n    // But it's the best we can do without a proper API\n    const updatedName = name.replace(/^fastify -> /, '').replace(/^@fastify\\/otel -> /, '');\n\n    span.updateName(updatedName);\n  }\n}\n\nexports.FastifyInstrumentationV3 = FastifyInstrumentationV3;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9mYXN0aWZ5L3YzL2luc3RydW1lbnRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxZQUFZLG1CQUFPLENBQUMsc0ZBQW9CO0FBQ3hDLGFBQWEsbUJBQU8sQ0FBQyx3RkFBcUI7QUFDMUMsd0JBQXdCLG1CQUFPLENBQUMsOEdBQWdDO0FBQ2hFLDRCQUE0QixtQkFBTyxDQUFDLHdIQUFxQztBQUN6RSxlQUFlLG1CQUFPLENBQUMsb0dBQWM7QUFDckMsdUJBQXVCLG1CQUFPLENBQUMsc0lBQTJCO0FBQzFELGNBQWMsbUJBQU8sQ0FBQyx3R0FBWTs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLHVEQUF1RCxRQUFRLEVBQUUsVUFBVTtBQUMzRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBCQUEwQix3Q0FBd0MsSUFBSSxLQUFLOztBQUUzRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDBCQUEwQiw2Q0FBNkMsSUFBSSxpREFBaUQ7O0FBRTVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxjQUFjLGNBQWM7QUFDNUI7QUFDQTtBQUNBLG9DQUFvQyxTQUFTO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw4Q0FBOEMsS0FBSztBQUNuRCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXGludGVncmF0aW9uc1xcdHJhY2luZ1xcZmFzdGlmeVxcdjNcXGluc3RydW1lbnRhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgYXBpID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvYXBpJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uJyk7XG5jb25zdCBzZW1hbnRpY0NvbnZlbnRpb25zID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvc2VtYW50aWMtY29udmVudGlvbnMnKTtcbmNvbnN0IGNvcmUkMSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgQXR0cmlidXRlTmFtZXMgPSByZXF1aXJlKCcuL2VudW1zL0F0dHJpYnV0ZU5hbWVzLmpzJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMuanMnKTtcblxuLy8gVmVuZG9yZWQgZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktanMtY29udHJpYi9ibG9iLzQwN2Y2MTU5MWJhNjlhMzlhNjkwODI2NDM3OWQ0ZDk4YTQ4ZGJlYzQvcGx1Z2lucy9ub2RlL29wZW50ZWxlbWV0cnktaW5zdHJ1bWVudGF0aW9uLWZhc3RpZnkvc3JjL2luc3RydW1lbnRhdGlvbi50c1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXMgKi9cbi8qIGVzbGludC1kaXNhYmxlIGpzZG9jL3JlcXVpcmUtanNkb2MgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1mdW5jdGlvbi1yZXR1cm4tdHlwZSAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzICovXG5cbi8qKiBAa25pcGlnbm9yZSAqL1xuXG5jb25zdCBQQUNLQUdFX1ZFUlNJT04gPSAnMC4xLjAnO1xuXG5jb25zdCBQQUNLQUdFX05BTUUgPSAnQHNlbnRyeS9pbnN0cnVtZW50YXRpb24tZmFzdGlmeS12Myc7XG5jb25zdCBBTk9OWU1PVVNfTkFNRSA9ICdhbm9ueW1vdXMnO1xuXG4vLyBUaGUgaW5zdHJ1bWVudGF0aW9uIGNyZWF0ZXMgYSBzcGFuIGZvciBpbnZvY2F0aW9ucyBvZiBsaWZlY3ljbGUgaG9vayBoYW5kbGVyc1xuLy8gdGhhdCB0YWtlIGAocmVxdWVzdCwgcmVwbHksIC4uLlssIGRvbmVdKWAgYXJndW1lbnRzLiBDdXJyZW50bHkgdGhpcyBpcyBhbGxcbi8vIGxpZmVjeWNsZSBob29rcyBleGNlcHQgYG9uUmVxdWVzdEFib3J0YC5cbi8vIGh0dHBzOi8vZmFzdGlmeS5kZXYvZG9jcy9sYXRlc3QvUmVmZXJlbmNlL0hvb2tzXG5jb25zdCBob29rc05hbWVzVG9XcmFwID0gbmV3IFNldChbXG4gICdvblRpbWVvdXQnLFxuICAnb25SZXF1ZXN0JyxcbiAgJ3ByZVBhcnNpbmcnLFxuICAncHJlVmFsaWRhdGlvbicsXG4gICdwcmVTZXJpYWxpemF0aW9uJyxcbiAgJ3ByZUhhbmRsZXInLFxuICAnb25TZW5kJyxcbiAgJ29uUmVzcG9uc2UnLFxuICAnb25FcnJvcicsXG5dKTtcblxuLyoqXG4gKiBGYXN0aWZ5IGluc3RydW1lbnRhdGlvbiBmb3IgT3BlblRlbGVtZXRyeVxuICovXG5jbGFzcyBGYXN0aWZ5SW5zdHJ1bWVudGF0aW9uVjMgZXh0ZW5kcyBpbnN0cnVtZW50YXRpb24uSW5zdHJ1bWVudGF0aW9uQmFzZSB7XG4gICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xuICAgIHN1cGVyKFBBQ0tBR0VfTkFNRSwgUEFDS0FHRV9WRVJTSU9OLCBjb25maWcpO1xuICB9XG5cbiAgIGluaXQoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIG5ldyBpbnN0cnVtZW50YXRpb24uSW5zdHJ1bWVudGF0aW9uTm9kZU1vZHVsZURlZmluaXRpb24oJ2Zhc3RpZnknLCBbJz49My4wLjAgPDQnXSwgbW9kdWxlRXhwb3J0cyA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXRjaENvbnN0cnVjdG9yKG1vZHVsZUV4cG9ydHMpO1xuICAgICAgfSksXG4gICAgXTtcbiAgfVxuXG4gICBfaG9va09uUmVxdWVzdCgpIHtcbiAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSB0aGlzO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG9uUmVxdWVzdChyZXF1ZXN0LCByZXBseSwgZG9uZSkge1xuICAgICAgaWYgKCFpbnN0cnVtZW50YXRpb24uaXNFbmFibGVkKCkpIHtcbiAgICAgICAgcmV0dXJuIGRvbmUoKTtcbiAgICAgIH1cbiAgICAgIGluc3RydW1lbnRhdGlvbi5fd3JhcChyZXBseSwgJ3NlbmQnLCBpbnN0cnVtZW50YXRpb24uX3BhdGNoU2VuZCgpKTtcblxuICAgICAgY29uc3QgYW55UmVxdWVzdCA9IHJlcXVlc3QgO1xuXG4gICAgICBjb25zdCBycGNNZXRhZGF0YSA9IGNvcmUuZ2V0UlBDTWV0YWRhdGEoYXBpLmNvbnRleHQuYWN0aXZlKCkpO1xuICAgICAgY29uc3Qgcm91dGVOYW1lID0gYW55UmVxdWVzdC5yb3V0ZU9wdGlvbnNcbiAgICAgICAgPyBhbnlSZXF1ZXN0LnJvdXRlT3B0aW9ucy51cmwgLy8gc2luY2UgZmFzdGlmeUA0LjEwLjBcbiAgICAgICAgOiByZXF1ZXN0LnJvdXRlclBhdGg7XG4gICAgICBpZiAocm91dGVOYW1lICYmIHJwY01ldGFkYXRhPy50eXBlID09PSBjb3JlLlJQQ1R5cGUuSFRUUCkge1xuICAgICAgICBycGNNZXRhZGF0YS5yb3V0ZSA9IHJvdXRlTmFtZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbWV0aG9kID0gcmVxdWVzdC5tZXRob2QgfHwgJ0dFVCc7XG5cbiAgICAgIGNvcmUkMS5nZXRJc29sYXRpb25TY29wZSgpLnNldFRyYW5zYWN0aW9uTmFtZShgJHttZXRob2R9ICR7cm91dGVOYW1lfWApO1xuICAgICAgZG9uZSgpO1xuICAgIH07XG4gIH1cblxuICAgX3dyYXBIYW5kbGVyKFxuICAgIHBsdWdpbk5hbWUsXG4gICAgaG9va05hbWUsXG4gICAgb3JpZ2luYWwsXG4gICAgc3luY0Z1bmN0aW9uV2l0aERvbmUsXG4gICkge1xuICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHRoaXM7XG4gICAgdGhpcy5fZGlhZy5kZWJ1ZygnUGF0Y2hpbmcgZmFzdGlmeSByb3V0ZS5oYW5kbGVyIGZ1bmN0aW9uJyk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCAuLi5hcmdzKSB7XG4gICAgICBpZiAoIWluc3RydW1lbnRhdGlvbi5pc0VuYWJsZWQoKSkge1xuICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5hbWUgPSBvcmlnaW5hbC5uYW1lIHx8IHBsdWdpbk5hbWUgfHwgQU5PTllNT1VTX05BTUU7XG4gICAgICBjb25zdCBzcGFuTmFtZSA9IGAke0F0dHJpYnV0ZU5hbWVzLkZhc3RpZnlOYW1lcy5NSURETEVXQVJFfSAtICR7bmFtZX1gO1xuXG4gICAgICBjb25zdCByZXBseSA9IGFyZ3NbMV0gO1xuXG4gICAgICBjb25zdCBzcGFuID0gdXRpbHMuc3RhcnRTcGFuKHJlcGx5LCBpbnN0cnVtZW50YXRpb24udHJhY2VyLCBzcGFuTmFtZSwge1xuICAgICAgICBbQXR0cmlidXRlTmFtZXMuQXR0cmlidXRlTmFtZXMuRkFTVElGWV9UWVBFXTogQXR0cmlidXRlTmFtZXMuRmFzdGlmeVR5cGVzLk1JRERMRVdBUkUsXG4gICAgICAgIFtBdHRyaWJ1dGVOYW1lcy5BdHRyaWJ1dGVOYW1lcy5QTFVHSU5fTkFNRV06IHBsdWdpbk5hbWUsXG4gICAgICAgIFtBdHRyaWJ1dGVOYW1lcy5BdHRyaWJ1dGVOYW1lcy5IT09LX05BTUVdOiBob29rTmFtZSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBvcmlnRG9uZSA9IHN5bmNGdW5jdGlvbldpdGhEb25lICYmIChhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gKTtcbiAgICAgIGlmIChvcmlnRG9uZSkge1xuICAgICAgICBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gPSBmdW5jdGlvbiAoLi4uZG9uZUFyZ3MpIHtcbiAgICAgICAgICB1dGlscy5lbmRTcGFuKHJlcGx5KTtcbiAgICAgICAgICBvcmlnRG9uZS5hcHBseSh0aGlzLCBkb25lQXJncyk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhcGkuY29udGV4dC53aXRoKGFwaS50cmFjZS5zZXRTcGFuKGFwaS5jb250ZXh0LmFjdGl2ZSgpLCBzcGFuKSwgKCkgPT4ge1xuICAgICAgICByZXR1cm4gdXRpbHMuc2FmZUV4ZWN1dGVJblRoZU1pZGRsZU1heWJlUHJvbWlzZShcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlcnIgPT4ge1xuICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgIHNwYW4uc2V0U3RhdHVzKHtcbiAgICAgICAgICAgICAgICBjb2RlOiBhcGkuU3BhblN0YXR1c0NvZGUuRVJST1IsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBzcGFuLnJlY29yZEV4Y2VwdGlvbihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYXN5bmMgaG9va3Mgc2hvdWxkIGVuZCB0aGUgc3BhbiBhcyBzb29uIGFzIHRoZSBwcm9taXNlIGlzIHJlc29sdmVkXG4gICAgICAgICAgICBpZiAoIXN5bmNGdW5jdGlvbldpdGhEb25lKSB7XG4gICAgICAgICAgICAgIHV0aWxzLmVuZFNwYW4ocmVwbHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgIF93cmFwQWRkSG9vaygpIHtcbiAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSB0aGlzO1xuICAgIHRoaXMuX2RpYWcuZGVidWcoJ1BhdGNoaW5nIGZhc3RpZnkgc2VydmVyLmFkZEhvb2sgZnVuY3Rpb24nKTtcblxuICAgIC8vIGJpb21lLWlnbm9yZSBsaW50L2NvbXBsZXhpdHkvdXNlQXJyb3dGdW5jdGlvbjogPGV4cGxhbmF0aW9uPlxuICAgIHJldHVybiBmdW5jdGlvbiAob3JpZ2luYWwpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiB3cmFwcGVkQWRkSG9vayggLi4uYXJncykge1xuICAgICAgICBjb25zdCBuYW1lID0gYXJnc1swXSA7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBhcmdzWzFdIDtcbiAgICAgICAgY29uc3QgcGx1Z2luTmFtZSA9IHRoaXMucGx1Z2luTmFtZTtcbiAgICAgICAgaWYgKCFob29rc05hbWVzVG9XcmFwLmhhcyhuYW1lKSkge1xuICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN5bmNGdW5jdGlvbldpdGhEb25lID1cbiAgICAgICAgICB0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdID09PSAnZnVuY3Rpb24nICYmIGhhbmRsZXIuY29uc3RydWN0b3IubmFtZSAhPT0gJ0FzeW5jRnVuY3Rpb24nO1xuXG4gICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBbXG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICBpbnN0cnVtZW50YXRpb24uX3dyYXBIYW5kbGVyKHBsdWdpbk5hbWUsIG5hbWUsIGhhbmRsZXIsIHN5bmNGdW5jdGlvbldpdGhEb25lKSxcbiAgICAgICAgXSApO1xuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgIF9wYXRjaENvbnN0cnVjdG9yKG1vZHVsZUV4cG9ydHNcblxuKSB7XG4gICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gdGhpcztcblxuICAgIGZ1bmN0aW9uIGZhc3RpZnkoIC4uLmFyZ3MpIHtcbiAgICAgIGNvbnN0IGFwcCA9IG1vZHVsZUV4cG9ydHMuZmFzdGlmeS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIGFwcC5hZGRIb29rKCdvblJlcXVlc3QnLCBpbnN0cnVtZW50YXRpb24uX2hvb2tPblJlcXVlc3QoKSk7XG4gICAgICBhcHAuYWRkSG9vaygncHJlSGFuZGxlcicsIGluc3RydW1lbnRhdGlvbi5faG9va1ByZUhhbmRsZXIoKSk7XG5cbiAgICAgIGluc3RydW1lbnRDbGllbnQoKTtcblxuICAgICAgaW5zdHJ1bWVudGF0aW9uLl93cmFwKGFwcCwgJ2FkZEhvb2snLCBpbnN0cnVtZW50YXRpb24uX3dyYXBBZGRIb29rKCkpO1xuXG4gICAgICByZXR1cm4gYXBwO1xuICAgIH1cblxuICAgIGlmIChtb2R1bGVFeHBvcnRzLmVycm9yQ29kZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZmFzdGlmeS5lcnJvckNvZGVzID0gbW9kdWxlRXhwb3J0cy5lcnJvckNvZGVzO1xuICAgIH1cbiAgICBmYXN0aWZ5LmZhc3RpZnkgPSBmYXN0aWZ5O1xuICAgIGZhc3RpZnkuZGVmYXVsdCA9IGZhc3RpZnk7XG4gICAgcmV0dXJuIGZhc3RpZnk7XG4gIH1cblxuICAgX3BhdGNoU2VuZCgpIHtcbiAgICBjb25zdCBpbnN0cnVtZW50YXRpb24kMSA9IHRoaXM7XG4gICAgdGhpcy5fZGlhZy5kZWJ1ZygnUGF0Y2hpbmcgZmFzdGlmeSByZXBseS5zZW5kIGZ1bmN0aW9uJyk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gcGF0Y2hTZW5kKG9yaWdpbmFsKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2VuZCggLi4uYXJncykge1xuICAgICAgICBjb25zdCBtYXliZUVycm9yID0gYXJnc1swXTtcblxuICAgICAgICBpZiAoIWluc3RydW1lbnRhdGlvbiQxLmlzRW5hYmxlZCgpKSB7XG4gICAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc3RydW1lbnRhdGlvbi5zYWZlRXhlY3V0ZUluVGhlTWlkZGxlKFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVyciA9PiB7XG4gICAgICAgICAgICBpZiAoIWVyciAmJiBtYXliZUVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICAgIGVyciA9IG1heWJlRXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1dGlscy5lbmRTcGFuKHRoaXMsIGVycik7XG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gICBfaG9va1ByZUhhbmRsZXIoKSB7XG4gICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uJDEgPSB0aGlzO1xuICAgIHRoaXMuX2RpYWcuZGVidWcoJ1BhdGNoaW5nIGZhc3RpZnkgcHJlSGFuZGxlciBmdW5jdGlvbicpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHByZUhhbmRsZXIoIHJlcXVlc3QsIHJlcGx5LCBkb25lKSB7XG4gICAgICBpZiAoIWluc3RydW1lbnRhdGlvbiQxLmlzRW5hYmxlZCgpKSB7XG4gICAgICAgIHJldHVybiBkb25lKCk7XG4gICAgICB9XG4gICAgICBjb25zdCBhbnlSZXF1ZXN0ID0gcmVxdWVzdCA7XG5cbiAgICAgIGNvbnN0IGhhbmRsZXIgPSBhbnlSZXF1ZXN0LnJvdXRlT3B0aW9ucz8uaGFuZGxlciB8fCBhbnlSZXF1ZXN0LmNvbnRleHQ/LmhhbmRsZXI7XG4gICAgICBjb25zdCBoYW5kbGVyTmFtZSA9IGhhbmRsZXI/Lm5hbWUuc3RhcnRzV2l0aCgnYm91bmQgJykgPyBoYW5kbGVyLm5hbWUuc3Vic3RyaW5nKDYpIDogaGFuZGxlcj8ubmFtZTtcbiAgICAgIGNvbnN0IHNwYW5OYW1lID0gYCR7QXR0cmlidXRlTmFtZXMuRmFzdGlmeU5hbWVzLlJFUVVFU1RfSEFORExFUn0gLSAke2hhbmRsZXJOYW1lIHx8IHRoaXMucGx1Z2luTmFtZSB8fCBBTk9OWU1PVVNfTkFNRX1gO1xuXG4gICAgICBjb25zdCBzcGFuQXR0cmlidXRlcyA9IHtcbiAgICAgICAgW0F0dHJpYnV0ZU5hbWVzLkF0dHJpYnV0ZU5hbWVzLlBMVUdJTl9OQU1FXTogdGhpcy5wbHVnaW5OYW1lLFxuICAgICAgICBbQXR0cmlidXRlTmFtZXMuQXR0cmlidXRlTmFtZXMuRkFTVElGWV9UWVBFXTogQXR0cmlidXRlTmFtZXMuRmFzdGlmeVR5cGVzLlJFUVVFU1RfSEFORExFUixcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgIFtzZW1hbnRpY0NvbnZlbnRpb25zLlNFTUFUVFJTX0hUVFBfUk9VVEVdOiBhbnlSZXF1ZXN0LnJvdXRlT3B0aW9uc1xuICAgICAgICAgID8gYW55UmVxdWVzdC5yb3V0ZU9wdGlvbnMudXJsIC8vIHNpbmNlIGZhc3RpZnlANC4xMC4wXG4gICAgICAgICAgOiByZXF1ZXN0LnJvdXRlclBhdGgsXG4gICAgICB9O1xuICAgICAgaWYgKGhhbmRsZXJOYW1lKSB7XG4gICAgICAgIHNwYW5BdHRyaWJ1dGVzW0F0dHJpYnV0ZU5hbWVzLkF0dHJpYnV0ZU5hbWVzLkZBU1RJRllfTkFNRV0gPSBoYW5kbGVyTmFtZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNwYW4gPSB1dGlscy5zdGFydFNwYW4ocmVwbHksIGluc3RydW1lbnRhdGlvbiQxLnRyYWNlciwgc3Bhbk5hbWUsIHNwYW5BdHRyaWJ1dGVzKTtcblxuICAgICAgYWRkRmFzdGlmeVYzU3BhbkF0dHJpYnV0ZXMoc3Bhbik7XG5cbiAgICAgIGNvbnN0IHsgcmVxdWVzdEhvb2sgfSA9IGluc3RydW1lbnRhdGlvbiQxLmdldENvbmZpZygpO1xuICAgICAgaWYgKHJlcXVlc3RIb29rKSB7XG4gICAgICAgIGluc3RydW1lbnRhdGlvbi5zYWZlRXhlY3V0ZUluVGhlTWlkZGxlKFxuICAgICAgICAgICgpID0+IHJlcXVlc3RIb29rKHNwYW4sIHsgcmVxdWVzdCB9KSxcbiAgICAgICAgICBlID0+IHtcbiAgICAgICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICAgIGluc3RydW1lbnRhdGlvbiQxLl9kaWFnLmVycm9yKCdyZXF1ZXN0IGhvb2sgZmFpbGVkJywgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB0cnVlLFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXBpLmNvbnRleHQud2l0aChhcGkudHJhY2Uuc2V0U3BhbihhcGkuY29udGV4dC5hY3RpdmUoKSwgc3BhbiksICgpID0+IHtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnN0cnVtZW50Q2xpZW50KCkge1xuICBjb25zdCBjbGllbnQgPSBjb3JlJDEuZ2V0Q2xpZW50KCk7XG4gIGlmIChjbGllbnQpIHtcbiAgICBjbGllbnQub24oJ3NwYW5TdGFydCcsIChzcGFuKSA9PiB7XG4gICAgICBhZGRGYXN0aWZ5VjNTcGFuQXR0cmlidXRlcyhzcGFuKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRGYXN0aWZ5VjNTcGFuQXR0cmlidXRlcyhzcGFuKSB7XG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb3JlJDEuc3BhblRvSlNPTihzcGFuKS5kYXRhO1xuXG4gIC8vIHRoaXMgaXMgb25lIG9mOiBtaWRkbGV3YXJlLCByZXF1ZXN0X2hhbmRsZXJcbiAgY29uc3QgdHlwZSA9IGF0dHJpYnV0ZXNbJ2Zhc3RpZnkudHlwZSddO1xuXG4gIC8vIElmIHRoaXMgaXMgYWxyZWFkeSBzZXQsIG9yIHdlIGhhdmUgbm8gZmFzdGlmeSBzcGFuLCBubyBuZWVkIHRvIHByb2Nlc3MgYWdhaW4uLi5cbiAgaWYgKGF0dHJpYnV0ZXNbY29yZSQxLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdIHx8ICF0eXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHtcbiAgICBbY29yZSQxLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8uaHR0cC5vdGVsLmZhc3RpZnknLFxuICAgIFtjb3JlJDEuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF06IGAke3R5cGV9LmZhc3RpZnlgLFxuICB9KTtcblxuICAvLyBBbHNvIHVwZGF0ZSB0aGUgbmFtZSwgd2UgZG9uJ3QgbmVlZCB0byBcIm1pZGRsZXdhcmUgLSBcIiBwcmVmaXhcbiAgY29uc3QgbmFtZSA9IGF0dHJpYnV0ZXNbJ2Zhc3RpZnkubmFtZSddIHx8IGF0dHJpYnV0ZXNbJ3BsdWdpbi5uYW1lJ10gfHwgYXR0cmlidXRlc1snaG9vay5uYW1lJ107XG4gIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUcnkgcmVtb3ZpbmcgYGZhc3RpZnkgLT4gYCBhbmQgYEBmYXN0aWZ5L290ZWwgLT4gYCBwcmVmaXhlc1xuICAgIC8vIFRoaXMgaXMgYSBiaXQgb2YgYSBoYWNrLCBhbmQgbm90IGFsd2F5cyB3b3JraW5nIGZvciBhbGwgc3BhbnNcbiAgICAvLyBCdXQgaXQncyB0aGUgYmVzdCB3ZSBjYW4gZG8gd2l0aG91dCBhIHByb3BlciBBUElcbiAgICBjb25zdCB1cGRhdGVkTmFtZSA9IG5hbWUucmVwbGFjZSgvXmZhc3RpZnkgLT4gLywgJycpLnJlcGxhY2UoL15AZmFzdGlmeVxcL290ZWwgLT4gLywgJycpO1xuXG4gICAgc3Bhbi51cGRhdGVOYW1lKHVwZGF0ZWROYW1lKTtcbiAgfVxufVxuXG5leHBvcnRzLkZhc3RpZnlJbnN0cnVtZW50YXRpb25WMyA9IEZhc3RpZnlJbnN0cnVtZW50YXRpb25WMztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc3RydW1lbnRhdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/instrumentation.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/utils.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(ssr)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/constants.js\");\n\n// Vendored from: https://github.com/open-telemetry/opentelemetry-js-contrib/blob/407f61591ba69a39a6908264379d4d98a48dbec4/plugins/node/opentelemetry-instrumentation-fastify/src/utils.ts\n/* eslint-disable jsdoc/require-jsdoc */\n/* eslint-disable @typescript-eslint/no-dynamic-delete */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Starts Span\n * @param reply - reply function\n * @param tracer - tracer\n * @param spanName - span name\n * @param spanAttributes - span attributes\n */\nfunction startSpan(\n  reply,\n  tracer,\n  spanName,\n  spanAttributes = {},\n) {\n  const span = tracer.startSpan(spanName, { attributes: spanAttributes });\n\n  const spans = reply[constants.spanRequestSymbol] || [];\n  spans.push(span);\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  Object.defineProperty(reply, constants.spanRequestSymbol, {\n    enumerable: false,\n    configurable: true,\n    value: spans,\n  });\n\n  return span;\n}\n\n/**\n * Ends span\n * @param reply - reply function\n * @param err - error\n */\nfunction endSpan(reply, err) {\n  const spans = reply[constants.spanRequestSymbol] || [];\n  // there is no active span, or it has already ended\n  if (!spans.length) {\n    return;\n  }\n  // biome-ignore lint/complexity/noForEach: <explanation>\n  spans.forEach((span) => {\n    if (err) {\n      span.setStatus({\n        code: api.SpanStatusCode.ERROR,\n        message: err.message,\n      });\n      span.recordException(err);\n    }\n    span.end();\n  });\n  delete reply[constants.spanRequestSymbol];\n}\n\n// @TODO after approve add this to instrumentation package and replace usage\n// when it will be released\n\n/**\n * This function handles the missing case from instrumentation package when\n * execute can either return a promise or void. And using async is not an\n * option as it is producing unwanted side effects.\n * @param execute - function to be executed\n * @param onFinish - function called when function executed\n * @param preventThrowingError - prevent to throw error when execute\n * function fails\n */\n\nfunction safeExecuteInTheMiddleMaybePromise(\n  execute,\n  onFinish,\n  preventThrowingError,\n) {\n  let error;\n  let result = undefined;\n  try {\n    result = execute();\n\n    if (isPromise(result)) {\n      result.then(\n        res => onFinish(undefined, res),\n        err => onFinish(err),\n      );\n    }\n  } catch (e) {\n    error = e;\n  } finally {\n    if (!isPromise(result)) {\n      onFinish(error, result);\n      if (error && true) {\n        // eslint-disable-next-line no-unsafe-finally\n        throw error;\n      }\n    }\n    // eslint-disable-next-line no-unsafe-finally\n    return result;\n  }\n}\n\nfunction isPromise(val) {\n  return (\n    (typeof val === 'object' && val && typeof Object.getOwnPropertyDescriptor(val, 'then')?.value === 'function') ||\n    false\n  );\n}\n\nexports.endSpan = endSpan;\nexports.safeExecuteInTheMiddleMaybePromise = safeExecuteInTheMiddleMaybePromise;\nexports.startSpan = startSpan;\n//# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9mYXN0aWZ5L3YzL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLFlBQVksbUJBQU8sQ0FBQyxzRkFBb0I7QUFDeEMsa0JBQWtCLG1CQUFPLENBQUMsZ0hBQWdCOztBQUUxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0EsNENBQTRDLDRCQUE0Qjs7QUFFeEU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxlQUFlO0FBQ2YsMENBQTBDO0FBQzFDLGlCQUFpQjtBQUNqQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFwxXFxEb3dubG9hZHNcXHRhYm9yQWNhZGVteVVwZGF0ZWRcXHRhYm9yLWFjYWRlbXlcXG5vZGVfbW9kdWxlc1xcQHNlbnRyeVxcbm9kZVxcYnVpbGRcXGNqc1xcaW50ZWdyYXRpb25zXFx0cmFjaW5nXFxmYXN0aWZ5XFx2M1xcdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGFwaSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2FwaScpO1xuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi9jb25zdGFudHMuanMnKTtcblxuLy8gVmVuZG9yZWQgZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktanMtY29udHJpYi9ibG9iLzQwN2Y2MTU5MWJhNjlhMzlhNjkwODI2NDM3OWQ0ZDk4YTQ4ZGJlYzQvcGx1Z2lucy9ub2RlL29wZW50ZWxlbWV0cnktaW5zdHJ1bWVudGF0aW9uLWZhc3RpZnkvc3JjL3V0aWxzLnRzXG4vKiBlc2xpbnQtZGlzYWJsZSBqc2RvYy9yZXF1aXJlLWpzZG9jICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LWZ1bmN0aW9uLXJldHVybi10eXBlICovXG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cbi8qKlxuICogU3RhcnRzIFNwYW5cbiAqIEBwYXJhbSByZXBseSAtIHJlcGx5IGZ1bmN0aW9uXG4gKiBAcGFyYW0gdHJhY2VyIC0gdHJhY2VyXG4gKiBAcGFyYW0gc3Bhbk5hbWUgLSBzcGFuIG5hbWVcbiAqIEBwYXJhbSBzcGFuQXR0cmlidXRlcyAtIHNwYW4gYXR0cmlidXRlc1xuICovXG5mdW5jdGlvbiBzdGFydFNwYW4oXG4gIHJlcGx5LFxuICB0cmFjZXIsXG4gIHNwYW5OYW1lLFxuICBzcGFuQXR0cmlidXRlcyA9IHt9LFxuKSB7XG4gIGNvbnN0IHNwYW4gPSB0cmFjZXIuc3RhcnRTcGFuKHNwYW5OYW1lLCB7IGF0dHJpYnV0ZXM6IHNwYW5BdHRyaWJ1dGVzIH0pO1xuXG4gIGNvbnN0IHNwYW5zID0gcmVwbHlbY29uc3RhbnRzLnNwYW5SZXF1ZXN0U3ltYm9sXSB8fCBbXTtcbiAgc3BhbnMucHVzaChzcGFuKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXBseSwgY29uc3RhbnRzLnNwYW5SZXF1ZXN0U3ltYm9sLCB7XG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBzcGFucyxcbiAgfSk7XG5cbiAgcmV0dXJuIHNwYW47XG59XG5cbi8qKlxuICogRW5kcyBzcGFuXG4gKiBAcGFyYW0gcmVwbHkgLSByZXBseSBmdW5jdGlvblxuICogQHBhcmFtIGVyciAtIGVycm9yXG4gKi9cbmZ1bmN0aW9uIGVuZFNwYW4ocmVwbHksIGVycikge1xuICBjb25zdCBzcGFucyA9IHJlcGx5W2NvbnN0YW50cy5zcGFuUmVxdWVzdFN5bWJvbF0gfHwgW107XG4gIC8vIHRoZXJlIGlzIG5vIGFjdGl2ZSBzcGFuLCBvciBpdCBoYXMgYWxyZWFkeSBlbmRlZFxuICBpZiAoIXNwYW5zLmxlbmd0aCkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBiaW9tZS1pZ25vcmUgbGludC9jb21wbGV4aXR5L25vRm9yRWFjaDogPGV4cGxhbmF0aW9uPlxuICBzcGFucy5mb3JFYWNoKChzcGFuKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgc3Bhbi5zZXRTdGF0dXMoe1xuICAgICAgICBjb2RlOiBhcGkuU3BhblN0YXR1c0NvZGUuRVJST1IsXG4gICAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlLFxuICAgICAgfSk7XG4gICAgICBzcGFuLnJlY29yZEV4Y2VwdGlvbihlcnIpO1xuICAgIH1cbiAgICBzcGFuLmVuZCgpO1xuICB9KTtcbiAgZGVsZXRlIHJlcGx5W2NvbnN0YW50cy5zcGFuUmVxdWVzdFN5bWJvbF07XG59XG5cbi8vIEBUT0RPIGFmdGVyIGFwcHJvdmUgYWRkIHRoaXMgdG8gaW5zdHJ1bWVudGF0aW9uIHBhY2thZ2UgYW5kIHJlcGxhY2UgdXNhZ2Vcbi8vIHdoZW4gaXQgd2lsbCBiZSByZWxlYXNlZFxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaGFuZGxlcyB0aGUgbWlzc2luZyBjYXNlIGZyb20gaW5zdHJ1bWVudGF0aW9uIHBhY2thZ2Ugd2hlblxuICogZXhlY3V0ZSBjYW4gZWl0aGVyIHJldHVybiBhIHByb21pc2Ugb3Igdm9pZC4gQW5kIHVzaW5nIGFzeW5jIGlzIG5vdCBhblxuICogb3B0aW9uIGFzIGl0IGlzIHByb2R1Y2luZyB1bndhbnRlZCBzaWRlIGVmZmVjdHMuXG4gKiBAcGFyYW0gZXhlY3V0ZSAtIGZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkXG4gKiBAcGFyYW0gb25GaW5pc2ggLSBmdW5jdGlvbiBjYWxsZWQgd2hlbiBmdW5jdGlvbiBleGVjdXRlZFxuICogQHBhcmFtIHByZXZlbnRUaHJvd2luZ0Vycm9yIC0gcHJldmVudCB0byB0aHJvdyBlcnJvciB3aGVuIGV4ZWN1dGVcbiAqIGZ1bmN0aW9uIGZhaWxzXG4gKi9cblxuZnVuY3Rpb24gc2FmZUV4ZWN1dGVJblRoZU1pZGRsZU1heWJlUHJvbWlzZShcbiAgZXhlY3V0ZSxcbiAgb25GaW5pc2gsXG4gIHByZXZlbnRUaHJvd2luZ0Vycm9yLFxuKSB7XG4gIGxldCBlcnJvcjtcbiAgbGV0IHJlc3VsdCA9IHVuZGVmaW5lZDtcbiAgdHJ5IHtcbiAgICByZXN1bHQgPSBleGVjdXRlKCk7XG5cbiAgICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgIHJlc3VsdC50aGVuKFxuICAgICAgICByZXMgPT4gb25GaW5pc2godW5kZWZpbmVkLCByZXMpLFxuICAgICAgICBlcnIgPT4gb25GaW5pc2goZXJyKSxcbiAgICAgICk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyb3IgPSBlO1xuICB9IGZpbmFsbHkge1xuICAgIGlmICghaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgIG9uRmluaXNoKGVycm9yLCByZXN1bHQpO1xuICAgICAgaWYgKGVycm9yICYmIHRydWUpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuc2FmZS1maW5hbGx5XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5zYWZlLWZpbmFsbHlcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZSh2YWwpIHtcbiAgcmV0dXJuIChcbiAgICAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgdmFsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbCwgJ3RoZW4nKT8udmFsdWUgPT09ICdmdW5jdGlvbicpIHx8XG4gICAgZmFsc2VcbiAgKTtcbn1cblxuZXhwb3J0cy5lbmRTcGFuID0gZW5kU3BhbjtcbmV4cG9ydHMuc2FmZUV4ZWN1dGVJblRoZU1pZGRsZU1heWJlUHJvbWlzZSA9IHNhZmVFeGVjdXRlSW5UaGVNaWRkbGVNYXliZVByb21pc2U7XG5leHBvcnRzLnN0YXJ0U3BhbiA9IHN0YXJ0U3Bhbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/v3/utils.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationGenericPool = __webpack_require__(/*! @opentelemetry/instrumentation-generic-pool */ \"(ssr)/./node_modules/@opentelemetry/instrumentation-generic-pool/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'GenericPool';\n\nconst instrumentGenericPool = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationGenericPool.GenericPoolInstrumentation({}));\n\nconst _genericPoolIntegration = (() => {\n  let instrumentationWrappedCallback;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentation = instrumentGenericPool();\n      instrumentationWrappedCallback = instrument.instrumentWhenWrapped(instrumentation);\n    },\n\n    setup(client) {\n      instrumentationWrappedCallback?.(() =>\n        client.on('spanStart', span => {\n          const spanJSON = core.spanToJSON(span);\n\n          const spanDescription = spanJSON.description;\n\n          // typo in emitted span for version <= 0.38.0 of @opentelemetry/instrumentation-generic-pool\n          const isGenericPoolSpan =\n            spanDescription === 'generic-pool.aquire' || spanDescription === 'generic-pool.acquire';\n\n          if (isGenericPoolSpan) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.generic_pool');\n          }\n        }),\n      );\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [generic-pool](https://www.npmjs.com/package/generic-pool) library.\n *\n * For more information, see the [`genericPoolIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/genericpool/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.genericPoolIntegration()],\n * });\n * ```\n */\nconst genericPoolIntegration = core.defineIntegration(_genericPoolIntegration);\n\nexports.genericPoolIntegration = genericPoolIntegration;\nexports.instrumentGenericPool = instrumentGenericPool;\n//# sourceMappingURL=genericPool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9nZW5lcmljUG9vbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxtQ0FBbUMsbUJBQU8sQ0FBQyx3SUFBNkM7QUFDeEYsYUFBYSxtQkFBTyxDQUFDLG9HQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLGdHQUEwQjs7QUFFckQ7O0FBRUEsb0pBQW9KOztBQUVwSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLDhCQUE4QjtBQUM5Qiw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXGludGVncmF0aW9uc1xcdHJhY2luZ1xcZ2VuZXJpY1Bvb2wuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkdlbmVyaWNQb29sID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWdlbmVyaWMtcG9vbCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0dlbmVyaWNQb29sJztcblxuY29uc3QgaW5zdHJ1bWVudEdlbmVyaWNQb29sID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25HZW5lcmljUG9vbC5HZW5lcmljUG9vbEluc3RydW1lbnRhdGlvbih7fSkpO1xuXG5jb25zdCBfZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIGxldCBpbnN0cnVtZW50YXRpb25XcmFwcGVkQ2FsbGJhY2s7XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbiA9IGluc3RydW1lbnRHZW5lcmljUG9vbCgpO1xuICAgICAgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrID0gaW5zdHJ1bWVudC5pbnN0cnVtZW50V2hlbldyYXBwZWQoaW5zdHJ1bWVudGF0aW9uKTtcbiAgICB9LFxuXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBpbnN0cnVtZW50YXRpb25XcmFwcGVkQ2FsbGJhY2s/LigoKSA9PlxuICAgICAgICBjbGllbnQub24oJ3NwYW5TdGFydCcsIHNwYW4gPT4ge1xuICAgICAgICAgIGNvbnN0IHNwYW5KU09OID0gY29yZS5zcGFuVG9KU09OKHNwYW4pO1xuXG4gICAgICAgICAgY29uc3Qgc3BhbkRlc2NyaXB0aW9uID0gc3BhbkpTT04uZGVzY3JpcHRpb247XG5cbiAgICAgICAgICAvLyB0eXBvIGluIGVtaXR0ZWQgc3BhbiBmb3IgdmVyc2lvbiA8PSAwLjM4LjAgb2YgQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWdlbmVyaWMtcG9vbFxuICAgICAgICAgIGNvbnN0IGlzR2VuZXJpY1Bvb2xTcGFuID1cbiAgICAgICAgICAgIHNwYW5EZXNjcmlwdGlvbiA9PT0gJ2dlbmVyaWMtcG9vbC5hcXVpcmUnIHx8IHNwYW5EZXNjcmlwdGlvbiA9PT0gJ2dlbmVyaWMtcG9vbC5hY3F1aXJlJztcblxuICAgICAgICAgIGlmIChpc0dlbmVyaWNQb29sU3Bhbikge1xuICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiwgJ2F1dG8uZGIub3RlbC5nZW5lcmljX3Bvb2wnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2dlbmVyaWMtcG9vbF0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZ2VuZXJpYy1wb29sKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9nZW5lcmljcG9vbC8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmdlbmVyaWNQb29sSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBnZW5lcmljUG9vbEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbiA9IGdlbmVyaWNQb29sSW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRHZW5lcmljUG9vbCA9IGluc3RydW1lbnRHZW5lcmljUG9vbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVyaWNQb29sLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationGraphql = __webpack_require__(/*! @opentelemetry/instrumentation-graphql */ \"(ssr)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(ssr)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Graphql';\n\nconst instrumentGraphql = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  instrumentationGraphql.GraphQLInstrumentation,\n  (_options) => {\n    const options = getOptionsWithDefaults(_options);\n\n    return {\n      ...options,\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.graphql.otel.graphql');\n\n        const attributes = core.spanToJSON(span).data;\n\n        // If operation.name is not set, we fall back to use operation.type only\n        const operationType = attributes['graphql.operation.type'];\n        const operationName = attributes['graphql.operation.name'];\n\n        if (options.useOperationNameForRootSpan && operationType) {\n          const rootSpan = core.getRootSpan(span);\n          const rootSpanAttributes = core.spanToJSON(rootSpan).data;\n\n          const existingOperations = rootSpanAttributes[opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION] || [];\n\n          const newOperation = operationName ? `${operationType} ${operationName}` : `${operationType}`;\n\n          // We keep track of each operation on the root span\n          // This can either be a string, or an array of strings (if there are multiple operations)\n          if (Array.isArray(existingOperations)) {\n            (existingOperations ).push(newOperation);\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, existingOperations);\n          } else if (typeof existingOperations === 'string') {\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, [existingOperations, newOperation]);\n          } else {\n            rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, newOperation);\n          }\n\n          if (!core.spanToJSON(rootSpan).data['original-description']) {\n            rootSpan.setAttribute('original-description', core.spanToJSON(rootSpan).description);\n          }\n          // Important for e.g. @sentry/aws-serverless because this would otherwise overwrite the name again\n          rootSpan.updateName(\n            `${core.spanToJSON(rootSpan).data['original-description']} (${getGraphqlOperationNamesFromAttribute(\n              existingOperations,\n            )})`,\n          );\n        }\n      },\n    };\n  },\n);\n\nconst _graphqlIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // We set defaults here, too, because otherwise we'd update the instrumentation config\n      // to the config without defaults, as `generateInstrumentOnce` automatically calls `setConfig(options)`\n      // when being called the second time\n      instrumentGraphql(getOptionsWithDefaults(options));\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [graphql](https://www.npmjs.com/package/graphql) library.\n *\n * For more information, see the [`graphqlIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/graphql/).\n *\n * @param {GraphqlOptions} options Configuration options for the GraphQL integration.\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.graphqlIntegration()],\n * });\n */\nconst graphqlIntegration = core.defineIntegration(_graphqlIntegration);\n\nfunction getOptionsWithDefaults(options) {\n  return {\n    ignoreResolveSpans: true,\n    ignoreTrivialResolveSpans: true,\n    useOperationNameForRootSpan: true,\n    ...options,\n  };\n}\n\n// copy from packages/opentelemetry/utils\nfunction getGraphqlOperationNamesFromAttribute(attr) {\n  if (Array.isArray(attr)) {\n    const sorted = attr.slice().sort();\n\n    // Up to 5 items, we just add all of them\n    if (sorted.length <= 5) {\n      return sorted.join(', ');\n    } else {\n      // Else, we add the first 5 and the diff of other operations\n      return `${sorted.slice(0, 5).join(', ')}, +${sorted.length - 5}`;\n    }\n  }\n\n  return `${attr}`;\n}\n\nexports.graphqlIntegration = graphqlIntegration;\nexports.instrumentGraphql = instrumentGraphql;\n//# sourceMappingURL=graphql.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9ncmFwaHFsLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLCtCQUErQixtQkFBTyxDQUFDLDhIQUF3QztBQUMvRSxhQUFhLG1CQUFPLENBQUMsb0dBQWM7QUFDbkMsc0JBQXNCLG1CQUFPLENBQUMsNEZBQXVCO0FBQ3JELG1CQUFtQixtQkFBTyxDQUFDLGdHQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyw0R0FBZ0M7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxrREFBa0QsZUFBZSxFQUFFLGNBQWMsT0FBTyxjQUFjOztBQUV0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsd0RBQXdELEdBQUc7QUFDMUU7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDs7QUFFQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsZ0JBQWdCLDhCQUE4QixLQUFLLGtCQUFrQjtBQUNyRTtBQUNBOztBQUVBLFlBQVksS0FBSztBQUNqQjs7QUFFQSwwQkFBMEI7QUFDMUIseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAc2VudHJ5XFxub2RlXFxidWlsZFxcY2pzXFxpbnRlZ3JhdGlvbnNcXHRyYWNpbmdcXGdyYXBocWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkdyYXBocWwgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tZ3JhcGhxbCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgb3BlbnRlbGVtZXRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvb3BlbnRlbGVtZXRyeScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgYWRkT3JpZ2luVG9TcGFuID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnR3JhcGhxbCc7XG5cbmNvbnN0IGluc3RydW1lbnRHcmFwaHFsID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICBpbnN0cnVtZW50YXRpb25HcmFwaHFsLkdyYXBoUUxJbnN0cnVtZW50YXRpb24sXG4gIChfb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBnZXRPcHRpb25zV2l0aERlZmF1bHRzKF9vcHRpb25zKTtcblxuICAgIHJldHVybiB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgcmVzcG9uc2VIb29rKHNwYW4pIHtcbiAgICAgICAgYWRkT3JpZ2luVG9TcGFuLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5ncmFwaHFsLm90ZWwuZ3JhcGhxbCcpO1xuXG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04oc3BhbikuZGF0YTtcblxuICAgICAgICAvLyBJZiBvcGVyYXRpb24ubmFtZSBpcyBub3Qgc2V0LCB3ZSBmYWxsIGJhY2sgdG8gdXNlIG9wZXJhdGlvbi50eXBlIG9ubHlcbiAgICAgICAgY29uc3Qgb3BlcmF0aW9uVHlwZSA9IGF0dHJpYnV0ZXNbJ2dyYXBocWwub3BlcmF0aW9uLnR5cGUnXTtcbiAgICAgICAgY29uc3Qgb3BlcmF0aW9uTmFtZSA9IGF0dHJpYnV0ZXNbJ2dyYXBocWwub3BlcmF0aW9uLm5hbWUnXTtcblxuICAgICAgICBpZiAob3B0aW9ucy51c2VPcGVyYXRpb25OYW1lRm9yUm9vdFNwYW4gJiYgb3BlcmF0aW9uVHlwZSkge1xuICAgICAgICAgIGNvbnN0IHJvb3RTcGFuID0gY29yZS5nZXRSb290U3BhbihzcGFuKTtcbiAgICAgICAgICBjb25zdCByb290U3BhbkF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04ocm9vdFNwYW4pLmRhdGE7XG5cbiAgICAgICAgICBjb25zdCBleGlzdGluZ09wZXJhdGlvbnMgPSByb290U3BhbkF0dHJpYnV0ZXNbb3BlbnRlbGVtZXRyeS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0dSQVBIUUxfT1BFUkFUSU9OXSB8fCBbXTtcblxuICAgICAgICAgIGNvbnN0IG5ld09wZXJhdGlvbiA9IG9wZXJhdGlvbk5hbWUgPyBgJHtvcGVyYXRpb25UeXBlfSAke29wZXJhdGlvbk5hbWV9YCA6IGAke29wZXJhdGlvblR5cGV9YDtcblxuICAgICAgICAgIC8vIFdlIGtlZXAgdHJhY2sgb2YgZWFjaCBvcGVyYXRpb24gb24gdGhlIHJvb3Qgc3BhblxuICAgICAgICAgIC8vIFRoaXMgY2FuIGVpdGhlciBiZSBhIHN0cmluZywgb3IgYW4gYXJyYXkgb2Ygc3RyaW5ncyAoaWYgdGhlcmUgYXJlIG11bHRpcGxlIG9wZXJhdGlvbnMpXG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZXhpc3RpbmdPcGVyYXRpb25zKSkge1xuICAgICAgICAgICAgKGV4aXN0aW5nT3BlcmF0aW9ucyApLnB1c2gobmV3T3BlcmF0aW9uKTtcbiAgICAgICAgICAgIHJvb3RTcGFuLnNldEF0dHJpYnV0ZShvcGVudGVsZW1ldHJ5LlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfR1JBUEhRTF9PUEVSQVRJT04sIGV4aXN0aW5nT3BlcmF0aW9ucyk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZXhpc3RpbmdPcGVyYXRpb25zID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcm9vdFNwYW4uc2V0QXR0cmlidXRlKG9wZW50ZWxlbWV0cnkuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9HUkFQSFFMX09QRVJBVElPTiwgW2V4aXN0aW5nT3BlcmF0aW9ucywgbmV3T3BlcmF0aW9uXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJvb3RTcGFuLnNldEF0dHJpYnV0ZShvcGVudGVsZW1ldHJ5LlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfR1JBUEhRTF9PUEVSQVRJT04sIG5ld09wZXJhdGlvbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFjb3JlLnNwYW5Ub0pTT04ocm9vdFNwYW4pLmRhdGFbJ29yaWdpbmFsLWRlc2NyaXB0aW9uJ10pIHtcbiAgICAgICAgICAgIHJvb3RTcGFuLnNldEF0dHJpYnV0ZSgnb3JpZ2luYWwtZGVzY3JpcHRpb24nLCBjb3JlLnNwYW5Ub0pTT04ocm9vdFNwYW4pLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gSW1wb3J0YW50IGZvciBlLmcuIEBzZW50cnkvYXdzLXNlcnZlcmxlc3MgYmVjYXVzZSB0aGlzIHdvdWxkIG90aGVyd2lzZSBvdmVyd3JpdGUgdGhlIG5hbWUgYWdhaW5cbiAgICAgICAgICByb290U3Bhbi51cGRhdGVOYW1lKFxuICAgICAgICAgICAgYCR7Y29yZS5zcGFuVG9KU09OKHJvb3RTcGFuKS5kYXRhWydvcmlnaW5hbC1kZXNjcmlwdGlvbiddfSAoJHtnZXRHcmFwaHFsT3BlcmF0aW9uTmFtZXNGcm9tQXR0cmlidXRlKFxuICAgICAgICAgICAgICBleGlzdGluZ09wZXJhdGlvbnMsXG4gICAgICAgICAgICApfSlgLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfTtcbiAgfSxcbik7XG5cbmNvbnN0IF9ncmFwaHFsSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgLy8gV2Ugc2V0IGRlZmF1bHRzIGhlcmUsIHRvbywgYmVjYXVzZSBvdGhlcndpc2Ugd2UnZCB1cGRhdGUgdGhlIGluc3RydW1lbnRhdGlvbiBjb25maWdcbiAgICAgIC8vIHRvIHRoZSBjb25maWcgd2l0aG91dCBkZWZhdWx0cywgYXMgYGdlbmVyYXRlSW5zdHJ1bWVudE9uY2VgIGF1dG9tYXRpY2FsbHkgY2FsbHMgYHNldENvbmZpZyhvcHRpb25zKWBcbiAgICAgIC8vIHdoZW4gYmVpbmcgY2FsbGVkIHRoZSBzZWNvbmQgdGltZVxuICAgICAgaW5zdHJ1bWVudEdyYXBocWwoZ2V0T3B0aW9uc1dpdGhEZWZhdWx0cyhvcHRpb25zKSk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtncmFwaHFsXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9ncmFwaHFsKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgZ3JhcGhxbEludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL2dyYXBocWwvKS5cbiAqXG4gKiBAcGFyYW0ge0dyYXBocWxPcHRpb25zfSBvcHRpb25zIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIEdyYXBoUUwgaW50ZWdyYXRpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkuZ3JhcGhxbEludGVncmF0aW9uKCldLFxuICogfSk7XG4gKi9cbmNvbnN0IGdyYXBocWxJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2dyYXBocWxJbnRlZ3JhdGlvbik7XG5cbmZ1bmN0aW9uIGdldE9wdGlvbnNXaXRoRGVmYXVsdHMob3B0aW9ucykge1xuICByZXR1cm4ge1xuICAgIGlnbm9yZVJlc29sdmVTcGFuczogdHJ1ZSxcbiAgICBpZ25vcmVUcml2aWFsUmVzb2x2ZVNwYW5zOiB0cnVlLFxuICAgIHVzZU9wZXJhdGlvbk5hbWVGb3JSb290U3BhbjogdHJ1ZSxcbiAgICAuLi5vcHRpb25zLFxuICB9O1xufVxuXG4vLyBjb3B5IGZyb20gcGFja2FnZXMvb3BlbnRlbGVtZXRyeS91dGlsc1xuZnVuY3Rpb24gZ2V0R3JhcGhxbE9wZXJhdGlvbk5hbWVzRnJvbUF0dHJpYnV0ZShhdHRyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGF0dHIpKSB7XG4gICAgY29uc3Qgc29ydGVkID0gYXR0ci5zbGljZSgpLnNvcnQoKTtcblxuICAgIC8vIFVwIHRvIDUgaXRlbXMsIHdlIGp1c3QgYWRkIGFsbCBvZiB0aGVtXG4gICAgaWYgKHNvcnRlZC5sZW5ndGggPD0gNSkge1xuICAgICAgcmV0dXJuIHNvcnRlZC5qb2luKCcsICcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBFbHNlLCB3ZSBhZGQgdGhlIGZpcnN0IDUgYW5kIHRoZSBkaWZmIG9mIG90aGVyIG9wZXJhdGlvbnNcbiAgICAgIHJldHVybiBgJHtzb3J0ZWQuc2xpY2UoMCwgNSkuam9pbignLCAnKX0sICske3NvcnRlZC5sZW5ndGggLSA1fWA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGAke2F0dHJ9YDtcbn1cblxuZXhwb3J0cy5ncmFwaHFsSW50ZWdyYXRpb24gPSBncmFwaHFsSW50ZWdyYXRpb247XG5leHBvcnRzLmluc3RydW1lbnRHcmFwaHFsID0gaW5zdHJ1bWVudEdyYXBocWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ncmFwaHFsLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationHapi = __webpack_require__(/*! @opentelemetry/instrumentation-hapi */ \"(ssr)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../../debug-build.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst instrument = __webpack_require__(/*! ../../../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../../utils/ensureIsWrapped.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\nconst INTEGRATION_NAME = 'Hapi';\n\nconst instrumentHapi = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationHapi.HapiInstrumentation());\n\nconst _hapiIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentHapi();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Hapi](https://hapi.dev/).\n *\n * If you also want to capture errors, you need to call `setupHapiErrorHandler(server)` after you set up your server.\n *\n * For more information, see the [hapi documentation](https://docs.sentry.io/platforms/javascript/guides/hapi/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.hapiIntegration()],\n * })\n * ```\n */\nconst hapiIntegration = core.defineIntegration(_hapiIntegration);\n\nfunction isErrorEvent(event) {\n  return !!(event && typeof event === 'object' && 'error' in event && event.error);\n}\n\nfunction sendErrorToSentry(errorData) {\n  core.captureException(errorData, {\n    mechanism: {\n      type: 'hapi',\n      handled: false,\n      data: {\n        function: 'hapiErrorPlugin',\n      },\n    },\n  });\n}\n\nconst hapiErrorPlugin = {\n  name: 'SentryHapiErrorPlugin',\n  version: core.SDK_VERSION,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register: async function (serverArg) {\n    const server = serverArg ;\n\n    server.events.on({ name: 'request', channels: ['error'] }, (request, event) => {\n      if (core.getIsolationScope() !== core.getDefaultIsolationScope()) {\n        const route = request.route;\n        if (route.path) {\n          core.getIsolationScope().setTransactionName(`${route.method.toUpperCase()} ${route.path}`);\n        }\n      } else {\n        debugBuild.DEBUG_BUILD &&\n          core.logger.warn('Isolation scope is still the default isolation scope - skipping setting transactionName');\n      }\n\n      if (isErrorEvent(event)) {\n        sendErrorToSentry(event.error);\n      }\n    });\n  },\n};\n\n/**\n * Add a Hapi plugin to capture errors to Sentry.\n *\n * @param server The Hapi server to attach the error handler to\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Hapi = require('@hapi/hapi');\n *\n * const init = async () => {\n *   const server = Hapi.server();\n *\n *   // all your routes here\n *\n *   await Sentry.setupHapiErrorHandler(server);\n *\n *   await server.start();\n * };\n * ```\n */\nasync function setupHapiErrorHandler(server) {\n  await server.register(hapiErrorPlugin);\n\n  // Sadly, middleware spans do not go through `requestHook`, so we handle those here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using hapi\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addHapiSpanAttributes(span);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  ensureIsWrapped.ensureIsWrapped(server.register, 'hapi');\n}\n\nfunction addHapiSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data;\n\n  // this is one of: router, plugin, server.ext\n  const type = attributes['hapi.type'];\n\n  // If this is already set, or we have no Hapi span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.hapi',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.hapi`,\n  });\n}\n\nexports.hapiErrorPlugin = hapiErrorPlugin;\nexports.hapiIntegration = hapiIntegration;\nexports.instrumentHapi = instrumentHapi;\nexports.setupHapiErrorHandler = setupHapiErrorHandler;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9oYXBpL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLDRCQUE0QixtQkFBTyxDQUFDLHdIQUFxQztBQUN6RSxhQUFhLG1CQUFPLENBQUMsb0dBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsMkZBQXlCO0FBQ3BELG1CQUFtQixtQkFBTyxDQUFDLG1HQUE2QjtBQUN4RCx3QkFBd0IsbUJBQU8sQ0FBQywrR0FBbUM7O0FBRW5FOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCLHNDQUFzQztBQUM3RDtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsNEJBQTRCLEVBQUUsV0FBVztBQUNsRztBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0QyxLQUFLO0FBQ2pELEdBQUc7QUFDSDs7QUFFQSx1QkFBdUI7QUFDdkIsdUJBQXVCO0FBQ3ZCLHNCQUFzQjtBQUN0Qiw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXGludGVncmF0aW9uc1xcdHJhY2luZ1xcaGFwaVxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkhhcGkgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taGFwaScpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uLy4uLy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBlbnN1cmVJc1dyYXBwZWQgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlscy9lbnN1cmVJc1dyYXBwZWQuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdIYXBpJztcblxuY29uc3QgaW5zdHJ1bWVudEhhcGkgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbkhhcGkuSGFwaUluc3RydW1lbnRhdGlvbigpKTtcblxuY29uc3QgX2hhcGlJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50SGFwaSgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIFtIYXBpXShodHRwczovL2hhcGkuZGV2LykuXG4gKlxuICogSWYgeW91IGFsc28gd2FudCB0byBjYXB0dXJlIGVycm9ycywgeW91IG5lZWQgdG8gY2FsbCBgc2V0dXBIYXBpRXJyb3JIYW5kbGVyKHNlcnZlcilgIGFmdGVyIHlvdSBzZXQgdXAgeW91ciBzZXJ2ZXIuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2hhcGkgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvaGFwaS8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGludGVncmF0aW9uczogW1NlbnRyeS5oYXBpSW50ZWdyYXRpb24oKV0sXG4gKiB9KVxuICogYGBgXG4gKi9cbmNvbnN0IGhhcGlJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2hhcGlJbnRlZ3JhdGlvbik7XG5cbmZ1bmN0aW9uIGlzRXJyb3JFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQgJiYgdHlwZW9mIGV2ZW50ID09PSAnb2JqZWN0JyAmJiAnZXJyb3InIGluIGV2ZW50ICYmIGV2ZW50LmVycm9yKTtcbn1cblxuZnVuY3Rpb24gc2VuZEVycm9yVG9TZW50cnkoZXJyb3JEYXRhKSB7XG4gIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlcnJvckRhdGEsIHtcbiAgICBtZWNoYW5pc206IHtcbiAgICAgIHR5cGU6ICdoYXBpJyxcbiAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgZGF0YToge1xuICAgICAgICBmdW5jdGlvbjogJ2hhcGlFcnJvclBsdWdpbicsXG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xufVxuXG5jb25zdCBoYXBpRXJyb3JQbHVnaW4gPSB7XG4gIG5hbWU6ICdTZW50cnlIYXBpRXJyb3JQbHVnaW4nLFxuICB2ZXJzaW9uOiBjb3JlLlNES19WRVJTSU9OLFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICByZWdpc3RlcjogYXN5bmMgZnVuY3Rpb24gKHNlcnZlckFyZykge1xuICAgIGNvbnN0IHNlcnZlciA9IHNlcnZlckFyZyA7XG5cbiAgICBzZXJ2ZXIuZXZlbnRzLm9uKHsgbmFtZTogJ3JlcXVlc3QnLCBjaGFubmVsczogWydlcnJvciddIH0sIChyZXF1ZXN0LCBldmVudCkgPT4ge1xuICAgICAgaWYgKGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKSAhPT0gY29yZS5nZXREZWZhdWx0SXNvbGF0aW9uU2NvcGUoKSkge1xuICAgICAgICBjb25zdCByb3V0ZSA9IHJlcXVlc3Qucm91dGU7XG4gICAgICAgIGlmIChyb3V0ZS5wYXRoKSB7XG4gICAgICAgICAgY29yZS5nZXRJc29sYXRpb25TY29wZSgpLnNldFRyYW5zYWN0aW9uTmFtZShgJHtyb3V0ZS5tZXRob2QudG9VcHBlckNhc2UoKX0gJHtyb3V0ZS5wYXRofWApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmXG4gICAgICAgICAgY29yZS5sb2dnZXIud2FybignSXNvbGF0aW9uIHNjb3BlIGlzIHN0aWxsIHRoZSBkZWZhdWx0IGlzb2xhdGlvbiBzY29wZSAtIHNraXBwaW5nIHNldHRpbmcgdHJhbnNhY3Rpb25OYW1lJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Vycm9yRXZlbnQoZXZlbnQpKSB7XG4gICAgICAgIHNlbmRFcnJvclRvU2VudHJ5KGV2ZW50LmVycm9yKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbn07XG5cbi8qKlxuICogQWRkIGEgSGFwaSBwbHVnaW4gdG8gY2FwdHVyZSBlcnJvcnMgdG8gU2VudHJ5LlxuICpcbiAqIEBwYXJhbSBzZXJ2ZXIgVGhlIEhhcGkgc2VydmVyIHRvIGF0dGFjaCB0aGUgZXJyb3IgaGFuZGxlciB0b1xuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqIGNvbnN0IEhhcGkgPSByZXF1aXJlKCdAaGFwaS9oYXBpJyk7XG4gKlxuICogY29uc3QgaW5pdCA9IGFzeW5jICgpID0+IHtcbiAqICAgY29uc3Qgc2VydmVyID0gSGFwaS5zZXJ2ZXIoKTtcbiAqXG4gKiAgIC8vIGFsbCB5b3VyIHJvdXRlcyBoZXJlXG4gKlxuICogICBhd2FpdCBTZW50cnkuc2V0dXBIYXBpRXJyb3JIYW5kbGVyKHNlcnZlcik7XG4gKlxuICogICBhd2FpdCBzZXJ2ZXIuc3RhcnQoKTtcbiAqIH07XG4gKiBgYGBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gc2V0dXBIYXBpRXJyb3JIYW5kbGVyKHNlcnZlcikge1xuICBhd2FpdCBzZXJ2ZXIucmVnaXN0ZXIoaGFwaUVycm9yUGx1Z2luKTtcblxuICAvLyBTYWRseSwgbWlkZGxld2FyZSBzcGFucyBkbyBub3QgZ28gdGhyb3VnaCBgcmVxdWVzdEhvb2tgLCBzbyB3ZSBoYW5kbGUgdGhvc2UgaGVyZVxuICAvLyBXZSByZWdpc3RlciB0aGlzIGhvb2sgaW4gdGhpcyBtZXRob2QsIGJlY2F1c2UgaWYgd2UgcmVnaXN0ZXIgaXQgaW4gdGhlIGludGVncmF0aW9uIGBzZXR1cGAsXG4gIC8vIGl0IHdvdWxkIGFsd2F5cyBydW4gZXZlbiBmb3IgdXNlcnMgdGhhdCBhcmUgbm90IGV2ZW4gdXNpbmcgaGFwaVxuICBjb25zdCBjbGllbnQgPSBjb3JlLmdldENsaWVudCgpO1xuICBpZiAoY2xpZW50KSB7XG4gICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgIGFkZEhhcGlTcGFuQXR0cmlidXRlcyhzcGFuKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgZW5zdXJlSXNXcmFwcGVkLmVuc3VyZUlzV3JhcHBlZChzZXJ2ZXIucmVnaXN0ZXIsICdoYXBpJyk7XG59XG5cbmZ1bmN0aW9uIGFkZEhhcGlTcGFuQXR0cmlidXRlcyhzcGFuKSB7XG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04oc3BhbikuZGF0YTtcblxuICAvLyB0aGlzIGlzIG9uZSBvZjogcm91dGVyLCBwbHVnaW4sIHNlcnZlci5leHRcbiAgY29uc3QgdHlwZSA9IGF0dHJpYnV0ZXNbJ2hhcGkudHlwZSddO1xuXG4gIC8vIElmIHRoaXMgaXMgYWxyZWFkeSBzZXQsIG9yIHdlIGhhdmUgbm8gSGFwaSBzcGFuLCBubyBuZWVkIHRvIHByb2Nlc3MgYWdhaW4uLi5cbiAgaWYgKGF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXSB8fCAhdHlwZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHNwYW4uc2V0QXR0cmlidXRlcyh7XG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiAnYXV0by5odHRwLm90ZWwuaGFwaScsXG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF06IGAke3R5cGV9LmhhcGlgLFxuICB9KTtcbn1cblxuZXhwb3J0cy5oYXBpRXJyb3JQbHVnaW4gPSBoYXBpRXJyb3JQbHVnaW47XG5leHBvcnRzLmhhcGlJbnRlZ3JhdGlvbiA9IGhhcGlJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudEhhcGkgPSBpbnN0cnVtZW50SGFwaTtcbmV4cG9ydHMuc2V0dXBIYXBpRXJyb3JIYW5kbGVyID0gc2V0dXBIYXBpRXJyb3JIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('Object.defineProperty(exports, Symbol.toStringTag, { value: \'Module\' });\n\nconst index = __webpack_require__(/*! ../http/index.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/http/index.js");\nconst amqplib = __webpack_require__(/*! ./amqplib.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js");\nconst connect = __webpack_require__(/*! ./connect.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js");\nconst express = __webpack_require__(/*! ./express.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express.js");\nconst index$1 = __webpack_require__(/*! ./fastify/index.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify/index.js");\nconst genericPool = __webpack_require__(/*! ./genericPool.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js");\nconst graphql = __webpack_require__(/*! ./graphql.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js");\nconst index$2 = __webpack_require__(/*! ./hapi/index.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js");\nconst kafka = __webpack_require__(/*! ./kafka.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js");\nconst koa = __webpack_require__(/*! ./koa.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js");\nconst lrumemoizer = __webpack_require__(/*! ./lrumemoizer.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js");\nconst mongo = __webpack_require__(/*! ./mongo.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js");\nconst mongoose = __webpack_require__(/*! ./mongoose.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js");\nconst mysql = __webpack_require__(/*! ./mysql.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js");\nconst mysql2 = __webpack_require__(/*! ./mysql2.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js");\nconst postgres = __webpack_require__(/*! ./postgres.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js");\nconst prisma = __webpack_require__(/*! ./prisma.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js");\nconst redis = __webpack_require__(/*! ./redis.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js");\nconst tedious = __webpack_require__(/*! ./tedious.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js");\nconst index$3 = __webpack_require__(/*! ./vercelai/index.js */ "(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js");\n\n/**\n * With OTEL, all performance integrations will be added, as OTEL only initializes them when the patched package is actually required.\n */\nfunction getAutoPerformanceIntegrations() {\n  return [\n    express.expressIntegration(),\n    index$1.fastifyIntegration(),\n    graphql.graphqlIntegration(),\n    mongo.mongoIntegration(),\n    mongoose.mongooseIntegration(),\n    mysql.mysqlIntegration(),\n    mysql2.mysql2Integration(),\n    redis.redisIntegration(),\n    postgres.postgresIntegration(),\n    prisma.prismaIntegration(),\n    index$2.hapiIntegration(),\n    koa.koaIntegration(),\n    connect.connectIntegration(),\n    tedious.tediousIntegration(),\n    genericPool.genericPoolIntegration(),\n    kafka.kafkaIntegration(),\n    amqplib.amqplibIntegration(),\n    lrumemoizer.lruMemoizerIntegration(),\n    index$3.vercelAIIntegration(),\n  ];\n}\n\n/**\n * Get a list of methods to instrument OTEL, when preload instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getOpenTelemetryInstrumentationToPreload() {\n  return [\n    index.instrumentOtelHttp,\n    express.instrumentExpress,\n    express.instrumentExpressV5,\n    connect.instrumentConnect,\n    index$1.instrumentFastify,\n    index$1.instrumentFastifyV3,\n    index$2.instrumentHapi,\n    kafka.instrumentKafka,\n    koa.instrumentKoa,\n    lrumemoizer.instrumentLruMemoizer,\n    mongo.instrumentMongo,\n    mongoose.instrumentMongoose,\n    mysql.instrumentMysql,\n    mysql2.instrumentMysql2,\n    postgres.instrumentPostgres,\n    index$2.instrumentHapi,\n    graphql.instrumentGraphql,\n    redis.instrumentRedis,\n    tedious.instrumentTedious,\n    genericPool.instrumentGenericPool,\n    amqplib.instrumentAmqplib,\n    index$3.instrumentVercelAi,\n  ];\n}\n\nexports.getAutoPerformanceIntegrations = getAutoPerformanceIntegrations;\nexports.getOpenTelemetryInstrumentationToPreload = getOpenTelemetryInstrumentationToPreload;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxjQUFjLG1CQUFPLENBQUMsZ0dBQWtCO0FBQ3hDLGdCQUFnQixtQkFBTyxDQUFDLGlHQUFjO0FBQ3RDLGdCQUFnQixtQkFBTyxDQUFDLGlHQUFjO0FBQ3RDLGdCQUFnQixtQkFBTyxDQUFDLGlHQUFjO0FBQ3RDLGdCQUFnQixtQkFBTyxDQUFDLDZHQUFvQjtBQUM1QyxvQkFBb0IsbUJBQU8sQ0FBQyx5R0FBa0I7QUFDOUMsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQWM7QUFDdEMsZ0JBQWdCLG1CQUFPLENBQUMsdUdBQWlCO0FBQ3pDLGNBQWMsbUJBQU8sQ0FBQyw2RkFBWTtBQUNsQyxZQUFZLG1CQUFPLENBQUMseUZBQVU7QUFDOUIsb0JBQW9CLG1CQUFPLENBQUMseUdBQWtCO0FBQzlDLGNBQWMsbUJBQU8sQ0FBQyw2RkFBWTtBQUNsQyxpQkFBaUIsbUJBQU8sQ0FBQyxtR0FBZTtBQUN4QyxjQUFjLG1CQUFPLENBQUMsNkZBQVk7QUFDbEMsZUFBZSxtQkFBTyxDQUFDLCtGQUFhO0FBQ3BDLGlCQUFpQixtQkFBTyxDQUFDLG1HQUFlO0FBQ3hDLGVBQWUsbUJBQU8sQ0FBQywrRkFBYTtBQUNwQyxjQUFjLG1CQUFPLENBQUMsNkZBQVk7QUFDbEMsZ0JBQWdCLG1CQUFPLENBQUMsaUdBQWM7QUFDdEMsZ0JBQWdCLG1CQUFPLENBQUMsK0dBQXFCOztBQUU3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQ0FBc0M7QUFDdEMsZ0RBQWdEO0FBQ2hEIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAc2VudHJ5XFxub2RlXFxidWlsZFxcY2pzXFxpbnRlZ3JhdGlvbnNcXHRyYWNpbmdcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbmRleCA9IHJlcXVpcmUoJy4uL2h0dHAvaW5kZXguanMnKTtcbmNvbnN0IGFtcXBsaWIgPSByZXF1aXJlKCcuL2FtcXBsaWIuanMnKTtcbmNvbnN0IGNvbm5lY3QgPSByZXF1aXJlKCcuL2Nvbm5lY3QuanMnKTtcbmNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCcuL2V4cHJlc3MuanMnKTtcbmNvbnN0IGluZGV4JDEgPSByZXF1aXJlKCcuL2Zhc3RpZnkvaW5kZXguanMnKTtcbmNvbnN0IGdlbmVyaWNQb29sID0gcmVxdWlyZSgnLi9nZW5lcmljUG9vbC5qcycpO1xuY29uc3QgZ3JhcGhxbCA9IHJlcXVpcmUoJy4vZ3JhcGhxbC5qcycpO1xuY29uc3QgaW5kZXgkMiA9IHJlcXVpcmUoJy4vaGFwaS9pbmRleC5qcycpO1xuY29uc3Qga2Fma2EgPSByZXF1aXJlKCcuL2thZmthLmpzJyk7XG5jb25zdCBrb2EgPSByZXF1aXJlKCcuL2tvYS5qcycpO1xuY29uc3QgbHJ1bWVtb2l6ZXIgPSByZXF1aXJlKCcuL2xydW1lbW9pemVyLmpzJyk7XG5jb25zdCBtb25nbyA9IHJlcXVpcmUoJy4vbW9uZ28uanMnKTtcbmNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZSgnLi9tb25nb29zZS5qcycpO1xuY29uc3QgbXlzcWwgPSByZXF1aXJlKCcuL215c3FsLmpzJyk7XG5jb25zdCBteXNxbDIgPSByZXF1aXJlKCcuL215c3FsMi5qcycpO1xuY29uc3QgcG9zdGdyZXMgPSByZXF1aXJlKCcuL3Bvc3RncmVzLmpzJyk7XG5jb25zdCBwcmlzbWEgPSByZXF1aXJlKCcuL3ByaXNtYS5qcycpO1xuY29uc3QgcmVkaXMgPSByZXF1aXJlKCcuL3JlZGlzLmpzJyk7XG5jb25zdCB0ZWRpb3VzID0gcmVxdWlyZSgnLi90ZWRpb3VzLmpzJyk7XG5jb25zdCBpbmRleCQzID0gcmVxdWlyZSgnLi92ZXJjZWxhaS9pbmRleC5qcycpO1xuXG4vKipcbiAqIFdpdGggT1RFTCwgYWxsIHBlcmZvcm1hbmNlIGludGVncmF0aW9ucyB3aWxsIGJlIGFkZGVkLCBhcyBPVEVMIG9ubHkgaW5pdGlhbGl6ZXMgdGhlbSB3aGVuIHRoZSBwYXRjaGVkIHBhY2thZ2UgaXMgYWN0dWFsbHkgcmVxdWlyZWQuXG4gKi9cbmZ1bmN0aW9uIGdldEF1dG9QZXJmb3JtYW5jZUludGVncmF0aW9ucygpIHtcbiAgcmV0dXJuIFtcbiAgICBleHByZXNzLmV4cHJlc3NJbnRlZ3JhdGlvbigpLFxuICAgIGluZGV4JDEuZmFzdGlmeUludGVncmF0aW9uKCksXG4gICAgZ3JhcGhxbC5ncmFwaHFsSW50ZWdyYXRpb24oKSxcbiAgICBtb25nby5tb25nb0ludGVncmF0aW9uKCksXG4gICAgbW9uZ29vc2UubW9uZ29vc2VJbnRlZ3JhdGlvbigpLFxuICAgIG15c3FsLm15c3FsSW50ZWdyYXRpb24oKSxcbiAgICBteXNxbDIubXlzcWwySW50ZWdyYXRpb24oKSxcbiAgICByZWRpcy5yZWRpc0ludGVncmF0aW9uKCksXG4gICAgcG9zdGdyZXMucG9zdGdyZXNJbnRlZ3JhdGlvbigpLFxuICAgIHByaXNtYS5wcmlzbWFJbnRlZ3JhdGlvbigpLFxuICAgIGluZGV4JDIuaGFwaUludGVncmF0aW9uKCksXG4gICAga29hLmtvYUludGVncmF0aW9uKCksXG4gICAgY29ubmVjdC5jb25uZWN0SW50ZWdyYXRpb24oKSxcbiAgICB0ZWRpb3VzLnRlZGlvdXNJbnRlZ3JhdGlvbigpLFxuICAgIGdlbmVyaWNQb29sLmdlbmVyaWNQb29sSW50ZWdyYXRpb24oKSxcbiAgICBrYWZrYS5rYWZrYUludGVncmF0aW9uKCksXG4gICAgYW1xcGxpYi5hbXFwbGliSW50ZWdyYXRpb24oKSxcbiAgICBscnVtZW1vaXplci5scnVNZW1vaXplckludGVncmF0aW9uKCksXG4gICAgaW5kZXgkMy52ZXJjZWxBSUludGVncmF0aW9uKCksXG4gIF07XG59XG5cbi8qKlxuICogR2V0IGEgbGlzdCBvZiBtZXRob2RzIHRvIGluc3RydW1lbnQgT1RFTCwgd2hlbiBwcmVsb2FkIGluc3RydW1lbnRhdGlvbi5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIGdldE9wZW5UZWxlbWV0cnlJbnN0cnVtZW50YXRpb25Ub1ByZWxvYWQoKSB7XG4gIHJldHVybiBbXG4gICAgaW5kZXguaW5zdHJ1bWVudE90ZWxIdHRwLFxuICAgIGV4cHJlc3MuaW5zdHJ1bWVudEV4cHJlc3MsXG4gICAgZXhwcmVzcy5pbnN0cnVtZW50RXhwcmVzc1Y1LFxuICAgIGNvbm5lY3QuaW5zdHJ1bWVudENvbm5lY3QsXG4gICAgaW5kZXgkMS5pbnN0cnVtZW50RmFzdGlmeSxcbiAgICBpbmRleCQxLmluc3RydW1lbnRGYXN0aWZ5VjMsXG4gICAgaW5kZXgkMi5pbnN0cnVtZW50SGFwaSxcbiAgICBrYWZrYS5pbnN0cnVtZW50S2Fma2EsXG4gICAga29hLmluc3RydW1lbnRLb2EsXG4gICAgbHJ1bWVtb2l6ZXIuaW5zdHJ1bWVudExydU1lbW9pemVyLFxuICAgIG1vbmdvLmluc3RydW1lbnRNb25nbyxcbiAgICBtb25nb29zZS5pbnN0cnVtZW50TW9uZ29vc2UsXG4gICAgbXlzcWwuaW5zdHJ1bWVudE15c3FsLFxuICAgIG15c3FsMi5pbnN0cnVtZW50TXlzcWwyLFxuICAgIHBvc3RncmVzLmluc3RydW1lbnRQb3N0Z3JlcyxcbiAgICBpbmRleCQyLmluc3RydW1lbnRIYXBpLFxuICAgIGdyYXBocWwuaW5zdHJ1bWVudEdyYXBocWwsXG4gICAgcmVkaXMuaW5zdHJ1bWVudFJlZGlzLFxuICAgIHRlZGlvdXMuaW5zdHJ1bWVudFRlZGlvdXMsXG4gICAgZ2VuZXJpY1Bvb2wuaW5zdHJ1bWVudEdlbmVyaWNQb29sLFxuICAgIGFtcXBsaWIuaW5zdHJ1bWVudEFtcXBsaWIsXG4gICAgaW5kZXgkMy5pbnN0cnVtZW50VmVyY2VsQWksXG4gIF07XG59XG5cbmV4cG9ydHMuZ2V0QXV0b1BlcmZvcm1hbmNlSW50ZWdyYXRpb25zID0gZ2V0QXV0b1BlcmZvcm1hbmNlSW50ZWdyYXRpb25zO1xuZXhwb3J0cy5nZXRPcGVuVGVsZW1ldHJ5SW5zdHJ1bWVudGF0aW9uVG9QcmVsb2FkID0gZ2V0T3BlblRlbGVtZXRyeUluc3RydW1lbnRhdGlvblRvUHJlbG9hZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\n')},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationKafkajs = __webpack_require__(/*! @opentelemetry/instrumentation-kafkajs */ \"(ssr)/./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Kafka';\n\nconst instrumentKafka = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationKafkajs.KafkaJsInstrumentation({\n      consumerHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.kafkajs.otel.consumer');\n      },\n      producerHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.kafkajs.otel.producer');\n      },\n    }),\n);\n\nconst _kafkaIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKafka();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [kafkajs](https://www.npmjs.com/package/kafkajs) library.\n *\n * For more information, see the [`kafkaIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/kafka/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.kafkaIntegration()],\n * });\n */\nconst kafkaIntegration = core.defineIntegration(_kafkaIntegration);\n\nexports.instrumentKafka = instrumentKafka;\nexports.kafkaIntegration = kafkaIntegration;\n//# sourceMappingURL=kafka.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9rYWZrYS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSwrQkFBK0IsbUJBQU8sQ0FBQyw4SEFBd0M7QUFDL0UsYUFBYSxtQkFBTyxDQUFDLG9HQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLGdHQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyw0R0FBZ0M7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFwxXFxEb3dubG9hZHNcXHRhYm9yQWNhZGVteVVwZGF0ZWRcXHRhYm9yLWFjYWRlbXlcXG5vZGVfbW9kdWxlc1xcQHNlbnRyeVxcbm9kZVxcYnVpbGRcXGNqc1xcaW50ZWdyYXRpb25zXFx0cmFjaW5nXFxrYWZrYS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uS2Fma2FqcyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rYWZrYWpzJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBhZGRPcmlnaW5Ub1NwYW4gPSByZXF1aXJlKCcuLi8uLi91dGlscy9hZGRPcmlnaW5Ub1NwYW4uanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdLYWZrYSc7XG5cbmNvbnN0IGluc3RydW1lbnRLYWZrYSA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uS2Fma2Fqcy5LYWZrYUpzSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIGNvbnN1bWVySG9vayhzcGFuKSB7XG4gICAgICAgIGFkZE9yaWdpblRvU3Bhbi5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8ua2Fma2Fqcy5vdGVsLmNvbnN1bWVyJyk7XG4gICAgICB9LFxuICAgICAgcHJvZHVjZXJIb29rKHNwYW4pIHtcbiAgICAgICAgYWRkT3JpZ2luVG9TcGFuLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5rYWZrYWpzLm90ZWwucHJvZHVjZXInKTtcbiAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBfa2Fma2FJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50S2Fma2EoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2thZmthanNdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2thZmthanMpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BrYWZrYUludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL2thZmthLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkua2Fma2FJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICovXG5jb25zdCBrYWZrYUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfa2Fma2FJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudEthZmthID0gaW5zdHJ1bWVudEthZmthO1xuZXhwb3J0cy5rYWZrYUludGVncmF0aW9uID0ga2Fma2FJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWthZmthLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationKnex = __webpack_require__(/*! @opentelemetry/instrumentation-knex */ \"(ssr)/./node_modules/@opentelemetry/instrumentation-knex/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'Knex';\n\nconst instrumentKnex = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () => new instrumentationKnex.KnexInstrumentation({ requireParentSpan: true }),\n);\n\nconst _knexIntegration = (() => {\n  let instrumentationWrappedCallback;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentation = instrumentKnex();\n      instrumentationWrappedCallback = instrument.instrumentWhenWrapped(instrumentation);\n    },\n\n    setup(client) {\n      instrumentationWrappedCallback?.(() =>\n        client.on('spanStart', span => {\n          const { data } = core.spanToJSON(span);\n          // knex.version is always set in the span data\n          // https://github.com/open-telemetry/opentelemetry-js-contrib/blob/0309caeafc44ac9cb13a3345b790b01b76d0497d/plugins/node/opentelemetry-instrumentation-knex/src/instrumentation.ts#L138\n          if ('knex.version' in data) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.knex');\n          }\n        }),\n      );\n    },\n  };\n}) ;\n\n/**\n * Knex integration\n *\n * Capture tracing data for [Knex](https://knexjs.org/).\n *\n * @example\n * ```javascript\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *  integrations: [Sentry.knexIntegration()],\n * });\n * ```\n */\nconst knexIntegration = core.defineIntegration(_knexIntegration);\n\nexports.instrumentKnex = instrumentKnex;\nexports.knexIntegration = knexIntegration;\n//# sourceMappingURL=knex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9rbmV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLDRCQUE0QixtQkFBTyxDQUFDLHdIQUFxQztBQUN6RSxhQUFhLG1CQUFPLENBQUMsb0dBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsZ0dBQTBCOztBQUVyRDs7QUFFQTtBQUNBO0FBQ0Esc0RBQXNELHlCQUF5QjtBQUMvRTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixPQUFPO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLHNCQUFzQjtBQUN0Qix1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXGludGVncmF0aW9uc1xcdHJhY2luZ1xca25leC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uS25leCA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rbmV4Jyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnS25leCc7XG5cbmNvbnN0IGluc3RydW1lbnRLbmV4ID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uS25leC5LbmV4SW5zdHJ1bWVudGF0aW9uKHsgcmVxdWlyZVBhcmVudFNwYW46IHRydWUgfSksXG4pO1xuXG5jb25zdCBfa25leEludGVncmF0aW9uID0gKCgpID0+IHtcbiAgbGV0IGluc3RydW1lbnRhdGlvbldyYXBwZWRDYWxsYmFjaztcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gaW5zdHJ1bWVudEtuZXgoKTtcbiAgICAgIGluc3RydW1lbnRhdGlvbldyYXBwZWRDYWxsYmFjayA9IGluc3RydW1lbnQuaW5zdHJ1bWVudFdoZW5XcmFwcGVkKGluc3RydW1lbnRhdGlvbik7XG4gICAgfSxcblxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrPy4oKCkgPT5cbiAgICAgICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGNvcmUuc3BhblRvSlNPTihzcGFuKTtcbiAgICAgICAgICAvLyBrbmV4LnZlcnNpb24gaXMgYWx3YXlzIHNldCBpbiB0aGUgc3BhbiBkYXRhXG4gICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktanMtY29udHJpYi9ibG9iLzAzMDljYWVhZmM0NGFjOWNiMTNhMzM0NWI3OTBiMDFiNzZkMDQ5N2QvcGx1Z2lucy9ub2RlL29wZW50ZWxlbWV0cnktaW5zdHJ1bWVudGF0aW9uLWtuZXgvc3JjL2luc3RydW1lbnRhdGlvbi50cyNMMTM4XG4gICAgICAgICAgaWYgKCdrbmV4LnZlcnNpb24nIGluIGRhdGEpIHtcbiAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwua25leCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogS25leCBpbnRlZ3JhdGlvblxuICpcbiAqIENhcHR1cmUgdHJhY2luZyBkYXRhIGZvciBbS25leF0oaHR0cHM6Ly9rbmV4anMub3JnLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGltcG9ydCAqIGFzIFNlbnRyeSBmcm9tICdAc2VudHJ5L25vZGUnO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkua25leEludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3Qga25leEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfa25leEludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50S25leCA9IGluc3RydW1lbnRLbmV4O1xuZXhwb3J0cy5rbmV4SW50ZWdyYXRpb24gPSBrbmV4SW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rbmV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationKoa = __webpack_require__(/*! @opentelemetry/instrumentation-koa */ \"(ssr)/./node_modules/@opentelemetry/instrumentation-koa/build/src/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(ssr)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\nconst INTEGRATION_NAME = 'Koa';\n\nconst instrumentKoa = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  instrumentationKoa.KoaInstrumentation,\n  (options = {}) => {\n    return {\n      ignoreLayersType: options.ignoreLayersType ,\n      requestHook(span, info) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.http.otel.koa');\n\n        const attributes = core.spanToJSON(span).data;\n\n        // this is one of: middleware, router\n        const type = attributes['koa.type'];\n        if (type) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.koa`);\n        }\n\n        // Also update the name\n        const name = attributes['koa.name'];\n        if (typeof name === 'string') {\n          // Somehow, name is sometimes `''` for middleware spans\n          // See: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/2220\n          span.updateName(name || '< unknown >');\n        }\n\n        if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n          debugBuild.DEBUG_BUILD && core.logger.warn('Isolation scope is default isolation scope - skipping setting transactionName');\n          return;\n        }\n        const route = attributes[semanticConventions.ATTR_HTTP_ROUTE];\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const method = info.context?.request?.method?.toUpperCase() || 'GET';\n        if (route) {\n          core.getIsolationScope().setTransactionName(`${method} ${route}`);\n        }\n      },\n    } ;\n  },\n);\n\nconst _koaIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKoa(options);\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for [Koa](https://koajs.com/).\n *\n * If you also want to capture errors, you need to call `setupKoaErrorHandler(app)` after you set up your Koa server.\n *\n * For more information, see the [koa documentation](https://docs.sentry.io/platforms/javascript/guides/koa/).\n *\n * @param {KoaOptions} options Configuration options for the Koa integration.\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.koaIntegration()],\n * })\n * ```\n *\n * @example\n * ```javascript\n * // To ignore middleware spans\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [\n *     Sentry.koaIntegration({\n *       ignoreLayersType: ['middleware']\n *     })\n *   ],\n * })\n * ```\n */\nconst koaIntegration = core.defineIntegration(_koaIntegration);\n\n/**\n * Add an Koa error handler to capture errors to Sentry.\n *\n * The error handler must be before any other middleware and after all controllers.\n *\n * @param app The Express instances\n * @param options {ExpressHandlerOptions} Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Koa = require(\"koa\");\n *\n * const app = new Koa();\n *\n * Sentry.setupKoaErrorHandler(app);\n *\n * // Add your routes, etc.\n *\n * app.listen(3000);\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst setupKoaErrorHandler = (app) => {\n  app.use(async (ctx, next) => {\n    try {\n      await next();\n    } catch (error) {\n      core.captureException(error);\n      throw error;\n    }\n  });\n\n  ensureIsWrapped.ensureIsWrapped(app.use, 'koa');\n};\n\nexports.instrumentKoa = instrumentKoa;\nexports.koaIntegration = koaIntegration;\nexports.setupKoaErrorHandler = setupKoaErrorHandler;\n//# sourceMappingURL=koa.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9rb2EuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsMkJBQTJCLG1CQUFPLENBQUMsc0hBQW9DO0FBQ3ZFLDRCQUE0QixtQkFBTyxDQUFDLHdIQUFxQztBQUN6RSxhQUFhLG1CQUFPLENBQUMsb0dBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsd0ZBQXNCO0FBQ2pELG1CQUFtQixtQkFBTyxDQUFDLGdHQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyw0R0FBZ0M7QUFDaEUsd0JBQXdCLG1CQUFPLENBQUMsNEdBQWdDOztBQUVoRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLEtBQUs7QUFDdkU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxRQUFRLEVBQUUsTUFBTTtBQUN6RTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDs7QUFFQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxZQUFZO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQix1QkFBdUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUEscUJBQXFCO0FBQ3JCLHNCQUFzQjtBQUN0Qiw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXGludGVncmF0aW9uc1xcdHJhY2luZ1xca29hLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25Lb2EgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24ta29hJyk7XG5jb25zdCBzZW1hbnRpY0NvbnZlbnRpb25zID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvc2VtYW50aWMtY29udmVudGlvbnMnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuLi8uLi9kZWJ1Zy1idWlsZC5qcycpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgYWRkT3JpZ2luVG9TcGFuID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzJyk7XG5jb25zdCBlbnN1cmVJc1dyYXBwZWQgPSByZXF1aXJlKCcuLi8uLi91dGlscy9lbnN1cmVJc1dyYXBwZWQuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdLb2EnO1xuXG5jb25zdCBpbnN0cnVtZW50S29hID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICBpbnN0cnVtZW50YXRpb25Lb2EuS29hSW5zdHJ1bWVudGF0aW9uLFxuICAob3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlnbm9yZUxheWVyc1R5cGU6IG9wdGlvbnMuaWdub3JlTGF5ZXJzVHlwZSAsXG4gICAgICByZXF1ZXN0SG9vayhzcGFuLCBpbmZvKSB7XG4gICAgICAgIGFkZE9yaWdpblRvU3Bhbi5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uaHR0cC5vdGVsLmtvYScpO1xuXG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb3JlLnNwYW5Ub0pTT04oc3BhbikuZGF0YTtcblxuICAgICAgICAvLyB0aGlzIGlzIG9uZSBvZjogbWlkZGxld2FyZSwgcm91dGVyXG4gICAgICAgIGNvbnN0IHR5cGUgPSBhdHRyaWJ1dGVzWydrb2EudHlwZSddO1xuICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCwgYCR7dHlwZX0ua29hYCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBbHNvIHVwZGF0ZSB0aGUgbmFtZVxuICAgICAgICBjb25zdCBuYW1lID0gYXR0cmlidXRlc1sna29hLm5hbWUnXTtcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIC8vIFNvbWVob3csIG5hbWUgaXMgc29tZXRpbWVzIGAnJ2AgZm9yIG1pZGRsZXdhcmUgc3BhbnNcbiAgICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LWpzLWNvbnRyaWIvaXNzdWVzLzIyMjBcbiAgICAgICAgICBzcGFuLnVwZGF0ZU5hbWUobmFtZSB8fCAnPCB1bmtub3duID4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb3JlLmdldElzb2xhdGlvblNjb3BlKCkgPT09IGNvcmUuZ2V0RGVmYXVsdElzb2xhdGlvblNjb3BlKCkpIHtcbiAgICAgICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGNvcmUubG9nZ2VyLndhcm4oJ0lzb2xhdGlvbiBzY29wZSBpcyBkZWZhdWx0IGlzb2xhdGlvbiBzY29wZSAtIHNraXBwaW5nIHNldHRpbmcgdHJhbnNhY3Rpb25OYW1lJyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJvdXRlID0gYXR0cmlidXRlc1tzZW1hbnRpY0NvbnZlbnRpb25zLkFUVFJfSFRUUF9ST1VURV07XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgY29uc3QgbWV0aG9kID0gaW5mby5jb250ZXh0Py5yZXF1ZXN0Py5tZXRob2Q/LnRvVXBwZXJDYXNlKCkgfHwgJ0dFVCc7XG4gICAgICAgIGlmIChyb3V0ZSkge1xuICAgICAgICAgIGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKS5zZXRUcmFuc2FjdGlvbk5hbWUoYCR7bWV0aG9kfSAke3JvdXRlfWApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0gO1xuICB9LFxuKTtcblxuY29uc3QgX2tvYUludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRLb2Eob3B0aW9ucyk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgW0tvYV0oaHR0cHM6Ly9rb2Fqcy5jb20vKS5cbiAqXG4gKiBJZiB5b3UgYWxzbyB3YW50IHRvIGNhcHR1cmUgZXJyb3JzLCB5b3UgbmVlZCB0byBjYWxsIGBzZXR1cEtvYUVycm9ySGFuZGxlcihhcHApYCBhZnRlciB5b3Ugc2V0IHVwIHlvdXIgS29hIHNlcnZlci5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBba29hIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL2tvYS8pLlxuICpcbiAqIEBwYXJhbSB7S29hT3B0aW9uc30gb3B0aW9ucyBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBLb2EgaW50ZWdyYXRpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmtvYUludGVncmF0aW9uKCldLFxuICogfSlcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBUbyBpZ25vcmUgbWlkZGxld2FyZSBzcGFuc1xuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogICBpbnRlZ3JhdGlvbnM6IFtcbiAqICAgICBTZW50cnkua29hSW50ZWdyYXRpb24oe1xuICogICAgICAgaWdub3JlTGF5ZXJzVHlwZTogWydtaWRkbGV3YXJlJ11cbiAqICAgICB9KVxuICogICBdLFxuICogfSlcbiAqIGBgYFxuICovXG5jb25zdCBrb2FJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2tvYUludGVncmF0aW9uKTtcblxuLyoqXG4gKiBBZGQgYW4gS29hIGVycm9yIGhhbmRsZXIgdG8gY2FwdHVyZSBlcnJvcnMgdG8gU2VudHJ5LlxuICpcbiAqIFRoZSBlcnJvciBoYW5kbGVyIG11c3QgYmUgYmVmb3JlIGFueSBvdGhlciBtaWRkbGV3YXJlIGFuZCBhZnRlciBhbGwgY29udHJvbGxlcnMuXG4gKlxuICogQHBhcmFtIGFwcCBUaGUgRXhwcmVzcyBpbnN0YW5jZXNcbiAqIEBwYXJhbSBvcHRpb25zIHtFeHByZXNzSGFuZGxlck9wdGlvbnN9IENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGhhbmRsZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKiBjb25zdCBLb2EgPSByZXF1aXJlKFwia29hXCIpO1xuICpcbiAqIGNvbnN0IGFwcCA9IG5ldyBLb2EoKTtcbiAqXG4gKiBTZW50cnkuc2V0dXBLb2FFcnJvckhhbmRsZXIoYXBwKTtcbiAqXG4gKiAvLyBBZGQgeW91ciByb3V0ZXMsIGV0Yy5cbiAqXG4gKiBhcHAubGlzdGVuKDMwMDApO1xuICogYGBgXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5jb25zdCBzZXR1cEtvYUVycm9ySGFuZGxlciA9IChhcHApID0+IHtcbiAgYXBwLnVzZShhc3luYyAoY3R4LCBuZXh0KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IG5leHQoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSk7XG5cbiAgZW5zdXJlSXNXcmFwcGVkLmVuc3VyZUlzV3JhcHBlZChhcHAudXNlLCAna29hJyk7XG59O1xuXG5leHBvcnRzLmluc3RydW1lbnRLb2EgPSBpbnN0cnVtZW50S29hO1xuZXhwb3J0cy5rb2FJbnRlZ3JhdGlvbiA9IGtvYUludGVncmF0aW9uO1xuZXhwb3J0cy5zZXR1cEtvYUVycm9ySGFuZGxlciA9IHNldHVwS29hRXJyb3JIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a29hLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationLruMemoizer = __webpack_require__(/*! @opentelemetry/instrumentation-lru-memoizer */ \"(ssr)/./node_modules/@opentelemetry/instrumentation-lru-memoizer/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'LruMemoizer';\n\nconst instrumentLruMemoizer = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationLruMemoizer.LruMemoizerInstrumentation());\n\nconst _lruMemoizerIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentLruMemoizer();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [lru-memoizer](https://www.npmjs.com/package/lru-memoizer) library.\n *\n * For more information, see the [`lruMemoizerIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/lrumemoizer/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.lruMemoizerIntegration()],\n * });\n */\nconst lruMemoizerIntegration = core.defineIntegration(_lruMemoizerIntegration);\n\nexports.instrumentLruMemoizer = instrumentLruMemoizer;\nexports.lruMemoizerIntegration = lruMemoizerIntegration;\n//# sourceMappingURL=lrumemoizer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9scnVtZW1vaXplci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxtQ0FBbUMsbUJBQU8sQ0FBQyx3SUFBNkM7QUFDeEYsYUFBYSxtQkFBTyxDQUFDLG9HQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLGdHQUEwQjs7QUFFckQ7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBLDZCQUE2QjtBQUM3Qiw4QkFBOEI7QUFDOUIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXGludGVncmF0aW9uc1xcdHJhY2luZ1xcbHJ1bWVtb2l6ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkxydU1lbW9pemVyID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWxydS1tZW1vaXplcicpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0xydU1lbW9pemVyJztcblxuY29uc3QgaW5zdHJ1bWVudExydU1lbW9pemVyID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25McnVNZW1vaXplci5McnVNZW1vaXplckluc3RydW1lbnRhdGlvbigpKTtcblxuY29uc3QgX2xydU1lbW9pemVySW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudExydU1lbW9pemVyKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtscnUtbWVtb2l6ZXJdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2xydS1tZW1vaXplcikgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYGxydU1lbW9pemVySW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvbHJ1bWVtb2l6ZXIvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5scnVNZW1vaXplckludGVncmF0aW9uKCldLFxuICogfSk7XG4gKi9cbmNvbnN0IGxydU1lbW9pemVySW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9scnVNZW1vaXplckludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50THJ1TWVtb2l6ZXIgPSBpbnN0cnVtZW50THJ1TWVtb2l6ZXI7XG5leHBvcnRzLmxydU1lbW9pemVySW50ZWdyYXRpb24gPSBscnVNZW1vaXplckludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bHJ1bWVtb2l6ZXIuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"buffer\")[\"Buffer\"];\nObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationMongodb = __webpack_require__(/*! @opentelemetry/instrumentation-mongodb */ \"(ssr)/./node_modules/@opentelemetry/instrumentation-mongodb/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Mongo';\n\nconst instrumentMongo = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMongodb.MongoDBInstrumentation({\n      dbStatementSerializer: _defaultDbStatementSerializer,\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.mongo');\n      },\n    }),\n);\n\n/**\n * Replaces values in document with '?', hiding PII and helping grouping.\n */\nfunction _defaultDbStatementSerializer(commandObj) {\n  const resultObj = _scrubStatement(commandObj);\n  return JSON.stringify(resultObj);\n}\n\nfunction _scrubStatement(value) {\n  if (Array.isArray(value)) {\n    return value.map(element => _scrubStatement(element));\n  }\n\n  if (isCommandObj(value)) {\n    const initial = {};\n    return Object.entries(value)\n      .map(([key, element]) => [key, _scrubStatement(element)])\n      .reduce((prev, current) => {\n        if (isCommandEntry(current)) {\n          prev[current[0]] = current[1];\n        }\n        return prev;\n      }, initial);\n  }\n\n  // A value like string or number, possible contains PII, scrub it\n  return '?';\n}\n\nfunction isCommandObj(value) {\n  return typeof value === 'object' && value !== null && !isBuffer(value);\n}\n\nfunction isBuffer(value) {\n  let isBuffer = false;\n  if (typeof Buffer !== 'undefined') {\n    isBuffer = Buffer.isBuffer(value);\n  }\n  return isBuffer;\n}\n\nfunction isCommandEntry(value) {\n  return Array.isArray(value);\n}\n\nconst _mongoIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongo();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mongodb](https://www.npmjs.com/package/mongodb) library.\n *\n * For more information, see the [`mongoIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mongo/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mongoIntegration()],\n * });\n * ```\n */\nconst mongoIntegration = core.defineIntegration(_mongoIntegration);\n\nexports._defaultDbStatementSerializer = _defaultDbStatementSerializer;\nexports.instrumentMongo = instrumentMongo;\nexports.mongoIntegration = mongoIntegration;\n//# sourceMappingURL=mongo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9tb25nby5qcyIsIm1hcHBpbmdzIjoiO0FBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsK0JBQStCLG1CQUFPLENBQUMsOEhBQXdDO0FBQy9FLGFBQWEsbUJBQU8sQ0FBQyxvR0FBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxnR0FBMEI7QUFDckQsd0JBQXdCLG1CQUFPLENBQUMsNEdBQWdDOztBQUVoRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsTUFBTTtBQUNuQixlQUFlLE1BQU07QUFDckI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSxxQ0FBcUM7QUFDckMsdUJBQXVCO0FBQ3ZCLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFwxXFxEb3dubG9hZHNcXHRhYm9yQWNhZGVteVVwZGF0ZWRcXHRhYm9yLWFjYWRlbXlcXG5vZGVfbW9kdWxlc1xcQHNlbnRyeVxcbm9kZVxcYnVpbGRcXGNqc1xcaW50ZWdyYXRpb25zXFx0cmFjaW5nXFxtb25nby5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uTW9uZ29kYiA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1tb25nb2RiJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBhZGRPcmlnaW5Ub1NwYW4gPSByZXF1aXJlKCcuLi8uLi91dGlscy9hZGRPcmlnaW5Ub1NwYW4uanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdNb25nbyc7XG5cbmNvbnN0IGluc3RydW1lbnRNb25nbyA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uTW9uZ29kYi5Nb25nb0RCSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIGRiU3RhdGVtZW50U2VyaWFsaXplcjogX2RlZmF1bHREYlN0YXRlbWVudFNlcmlhbGl6ZXIsXG4gICAgICByZXNwb25zZUhvb2soc3Bhbikge1xuICAgICAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmRiLm90ZWwubW9uZ28nKTtcbiAgICAgIH0sXG4gICAgfSksXG4pO1xuXG4vKipcbiAqIFJlcGxhY2VzIHZhbHVlcyBpbiBkb2N1bWVudCB3aXRoICc/JywgaGlkaW5nIFBJSSBhbmQgaGVscGluZyBncm91cGluZy5cbiAqL1xuZnVuY3Rpb24gX2RlZmF1bHREYlN0YXRlbWVudFNlcmlhbGl6ZXIoY29tbWFuZE9iaikge1xuICBjb25zdCByZXN1bHRPYmogPSBfc2NydWJTdGF0ZW1lbnQoY29tbWFuZE9iaik7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShyZXN1bHRPYmopO1xufVxuXG5mdW5jdGlvbiBfc2NydWJTdGF0ZW1lbnQodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlLm1hcChlbGVtZW50ID0+IF9zY3J1YlN0YXRlbWVudChlbGVtZW50KSk7XG4gIH1cblxuICBpZiAoaXNDb21tYW5kT2JqKHZhbHVlKSkge1xuICAgIGNvbnN0IGluaXRpYWwgPSB7fTtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModmFsdWUpXG4gICAgICAubWFwKChba2V5LCBlbGVtZW50XSkgPT4gW2tleSwgX3NjcnViU3RhdGVtZW50KGVsZW1lbnQpXSlcbiAgICAgIC5yZWR1Y2UoKHByZXYsIGN1cnJlbnQpID0+IHtcbiAgICAgICAgaWYgKGlzQ29tbWFuZEVudHJ5KGN1cnJlbnQpKSB7XG4gICAgICAgICAgcHJldltjdXJyZW50WzBdXSA9IGN1cnJlbnRbMV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICB9LCBpbml0aWFsKTtcbiAgfVxuXG4gIC8vIEEgdmFsdWUgbGlrZSBzdHJpbmcgb3IgbnVtYmVyLCBwb3NzaWJsZSBjb250YWlucyBQSUksIHNjcnViIGl0XG4gIHJldHVybiAnPyc7XG59XG5cbmZ1bmN0aW9uIGlzQ29tbWFuZE9iaih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAhaXNCdWZmZXIodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWx1ZSkge1xuICBsZXQgaXNCdWZmZXIgPSBmYWxzZTtcbiAgaWYgKHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaXNCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXIodmFsdWUpO1xuICB9XG4gIHJldHVybiBpc0J1ZmZlcjtcbn1cblxuZnVuY3Rpb24gaXNDb21tYW5kRW50cnkodmFsdWUpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpO1xufVxuXG5jb25zdCBfbW9uZ29JbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50TW9uZ28oKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW21vbmdvZGJdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL21vbmdvZGIpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2Btb25nb0ludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL21vbmdvLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkubW9uZ29JbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IG1vbmdvSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9tb25nb0ludGVncmF0aW9uKTtcblxuZXhwb3J0cy5fZGVmYXVsdERiU3RhdGVtZW50U2VyaWFsaXplciA9IF9kZWZhdWx0RGJTdGF0ZW1lbnRTZXJpYWxpemVyO1xuZXhwb3J0cy5pbnN0cnVtZW50TW9uZ28gPSBpbnN0cnVtZW50TW9uZ287XG5leHBvcnRzLm1vbmdvSW50ZWdyYXRpb24gPSBtb25nb0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9uZ28uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationMongoose = __webpack_require__(/*! @opentelemetry/instrumentation-mongoose */ \"(ssr)/./node_modules/@opentelemetry/instrumentation-mongoose/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Mongoose';\n\nconst instrumentMongoose = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMongoose.MongooseInstrumentation({\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.mongoose');\n      },\n    }),\n);\n\nconst _mongooseIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongoose();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mongoose](https://www.npmjs.com/package/mongoose) library.\n *\n * For more information, see the [`mongooseIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mongoose/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mongooseIntegration()],\n * });\n * ```\n */\nconst mongooseIntegration = core.defineIntegration(_mongooseIntegration);\n\nexports.instrumentMongoose = instrumentMongoose;\nexports.mongooseIntegration = mongooseIntegration;\n//# sourceMappingURL=mongoose.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9tb25nb29zZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxnQ0FBZ0MsbUJBQU8sQ0FBQyxnSUFBeUM7QUFDakYsYUFBYSxtQkFBTyxDQUFDLG9HQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLGdHQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyw0R0FBZ0M7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFwxXFxEb3dubG9hZHNcXHRhYm9yQWNhZGVteVVwZGF0ZWRcXHRhYm9yLWFjYWRlbXlcXG5vZGVfbW9kdWxlc1xcQHNlbnRyeVxcbm9kZVxcYnVpbGRcXGNqc1xcaW50ZWdyYXRpb25zXFx0cmFjaW5nXFxtb25nb29zZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uTW9uZ29vc2UgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbW9uZ29vc2UnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IGFkZE9yaWdpblRvU3BhbiA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2FkZE9yaWdpblRvU3Bhbi5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ01vbmdvb3NlJztcblxuY29uc3QgaW5zdHJ1bWVudE1vbmdvb3NlID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PlxuICAgIG5ldyBpbnN0cnVtZW50YXRpb25Nb25nb29zZS5Nb25nb29zZUluc3RydW1lbnRhdGlvbih7XG4gICAgICByZXNwb25zZUhvb2soc3Bhbikge1xuICAgICAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmRiLm90ZWwubW9uZ29vc2UnKTtcbiAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBfbW9uZ29vc2VJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50TW9uZ29vc2UoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW21vbmdvb3NlXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9tb25nb29zZSkgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYG1vbmdvb3NlSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvbW9uZ29vc2UvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5tb25nb29zZUludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgbW9uZ29vc2VJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX21vbmdvb3NlSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRNb25nb29zZSA9IGluc3RydW1lbnRNb25nb29zZTtcbmV4cG9ydHMubW9uZ29vc2VJbnRlZ3JhdGlvbiA9IG1vbmdvb3NlSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb25nb29zZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationMysql = __webpack_require__(/*! @opentelemetry/instrumentation-mysql */ \"(ssr)/./node_modules/@opentelemetry/instrumentation-mysql/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'Mysql';\n\nconst instrumentMysql = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationMysql.MySQLInstrumentation({}));\n\nconst _mysqlIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mysql](https://www.npmjs.com/package/mysql) library.\n *\n * For more information, see the [`mysqlIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mysql/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mysqlIntegration()],\n * });\n * ```\n */\nconst mysqlIntegration = core.defineIntegration(_mysqlIntegration);\n\nexports.instrumentMysql = instrumentMysql;\nexports.mysqlIntegration = mysqlIntegration;\n//# sourceMappingURL=mysql.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9teXNxbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSw2QkFBNkIsbUJBQU8sQ0FBQywwSEFBc0M7QUFDM0UsYUFBYSxtQkFBTyxDQUFDLG9HQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLGdHQUEwQjs7QUFFckQ7O0FBRUEsa0lBQWtJOztBQUVsSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkIsd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAc2VudHJ5XFxub2RlXFxidWlsZFxcY2pzXFxpbnRlZ3JhdGlvbnNcXHRyYWNpbmdcXG15c3FsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25NeXNxbCA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1teXNxbCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ015c3FsJztcblxuY29uc3QgaW5zdHJ1bWVudE15c3FsID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25NeXNxbC5NeVNRTEluc3RydW1lbnRhdGlvbih7fSkpO1xuXG5jb25zdCBfbXlzcWxJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50TXlzcWwoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW215c3FsXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9teXNxbCkgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYG15c3FsSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvbXlzcWwvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5teXNxbEludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgbXlzcWxJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX215c3FsSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRNeXNxbCA9IGluc3RydW1lbnRNeXNxbDtcbmV4cG9ydHMubXlzcWxJbnRlZ3JhdGlvbiA9IG15c3FsSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1teXNxbC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationMysql2 = __webpack_require__(/*! @opentelemetry/instrumentation-mysql2 */ \"(ssr)/./node_modules/@opentelemetry/instrumentation-mysql2/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Mysql2';\n\nconst instrumentMysql2 = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationMysql2.MySQL2Instrumentation({\n      responseHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.mysql2');\n      },\n    }),\n);\n\nconst _mysql2Integration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql2();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [mysql2](https://www.npmjs.com/package/mysql2) library.\n *\n * For more information, see the [`mysql2Integration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mysql2/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mysqlIntegration()],\n * });\n * ```\n */\nconst mysql2Integration = core.defineIntegration(_mysql2Integration);\n\nexports.instrumentMysql2 = instrumentMysql2;\nexports.mysql2Integration = mysql2Integration;\n//# sourceMappingURL=mysql2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9teXNxbDIuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsOEJBQThCLG1CQUFPLENBQUMsNEhBQXVDO0FBQzdFLGFBQWEsbUJBQU8sQ0FBQyxvR0FBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxnR0FBMEI7QUFDckQsd0JBQXdCLG1CQUFPLENBQUMsNEdBQWdDOztBQUVoRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4Qix5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXGludGVncmF0aW9uc1xcdHJhY2luZ1xcbXlzcWwyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25NeXNxbDIgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbXlzcWwyJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBhZGRPcmlnaW5Ub1NwYW4gPSByZXF1aXJlKCcuLi8uLi91dGlscy9hZGRPcmlnaW5Ub1NwYW4uanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdNeXNxbDInO1xuXG5jb25zdCBpbnN0cnVtZW50TXlzcWwyID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PlxuICAgIG5ldyBpbnN0cnVtZW50YXRpb25NeXNxbDIuTXlTUUwySW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlc3BvbnNlSG9vayhzcGFuKSB7XG4gICAgICAgIGFkZE9yaWdpblRvU3Bhbi5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uZGIub3RlbC5teXNxbDInKTtcbiAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBfbXlzcWwySW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudE15c3FsMigpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbbXlzcWwyXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9teXNxbDIpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BteXNxbDJJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9teXNxbDIvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5teXNxbEludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgbXlzcWwySW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9teXNxbDJJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudE15c3FsMiA9IGluc3RydW1lbnRNeXNxbDI7XG5leHBvcnRzLm15c3FsMkludGVncmF0aW9uID0gbXlzcWwySW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1teXNxbDIuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationPg = __webpack_require__(/*! @opentelemetry/instrumentation-pg */ \"(ssr)/./node_modules/@opentelemetry/instrumentation-pg/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\n\nconst INTEGRATION_NAME = 'Postgres';\n\nconst instrumentPostgres = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  () =>\n    new instrumentationPg.PgInstrumentation({\n      requireParentSpan: true,\n      requestHook(span) {\n        addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.postgres');\n      },\n    }),\n);\n\nconst _postgresIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPostgres();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [pg](https://www.npmjs.com/package/pg) library.\n *\n * For more information, see the [`postgresIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/postgres/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.postgresIntegration()],\n * });\n * ```\n */\nconst postgresIntegration = core.defineIntegration(_postgresIntegration);\n\nexports.instrumentPostgres = instrumentPostgres;\nexports.postgresIntegration = postgresIntegration;\n//# sourceMappingURL=postgres.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9wb3N0Z3Jlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSwwQkFBMEIsbUJBQU8sQ0FBQyxvSEFBbUM7QUFDckUsYUFBYSxtQkFBTyxDQUFDLG9HQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLGdHQUEwQjtBQUNyRCx3QkFBd0IsbUJBQU8sQ0FBQyw0R0FBZ0M7O0FBRWhFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAc2VudHJ5XFxub2RlXFxidWlsZFxcY2pzXFxpbnRlZ3JhdGlvbnNcXHRyYWNpbmdcXHBvc3RncmVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25QZyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgYWRkT3JpZ2luVG9TcGFuID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnUG9zdGdyZXMnO1xuXG5jb25zdCBpbnN0cnVtZW50UG9zdGdyZXMgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvblBnLlBnSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlcXVpcmVQYXJlbnRTcGFuOiB0cnVlLFxuICAgICAgcmVxdWVzdEhvb2soc3Bhbikge1xuICAgICAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmRiLm90ZWwucG9zdGdyZXMnKTtcbiAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBfcG9zdGdyZXNJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50UG9zdGdyZXMoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW3BnXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9wZykgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYHBvc3RncmVzSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvcG9zdGdyZXMvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5wb3N0Z3Jlc0ludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgcG9zdGdyZXNJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX3Bvc3RncmVzSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRQb3N0Z3JlcyA9IGluc3RydW1lbnRQb3N0Z3JlcztcbmV4cG9ydHMucG9zdGdyZXNJbnRlZ3JhdGlvbiA9IHBvc3RncmVzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb3N0Z3Jlcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @prisma/instrumentation */ \"(ssr)/./node_modules/@prisma/instrumentation/dist/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst INTEGRATION_NAME = 'Prisma';\n\nfunction isPrismaV6TracingHelper(helper) {\n  return !!helper && typeof helper === 'object' && 'dispatchEngineSpans' in helper;\n}\n\nfunction getPrismaTracingHelper() {\n  const prismaInstrumentationObject = (globalThis ).PRISMA_INSTRUMENTATION;\n  const prismaTracingHelper =\n    prismaInstrumentationObject &&\n    typeof prismaInstrumentationObject === 'object' &&\n    'helper' in prismaInstrumentationObject\n      ? prismaInstrumentationObject.helper\n      : undefined;\n\n  return prismaTracingHelper;\n}\n\nclass SentryPrismaInteropInstrumentation extends instrumentation.PrismaInstrumentation {\n   constructor() {\n    super();\n  }\n\n   enable() {\n    super.enable();\n\n    // The PrismaIntegration (super class) defines a global variable `global[\"PRISMA_INSTRUMENTATION\"]` when `enable()` is called. This global variable holds a \"TracingHelper\" which Prisma uses internally to create tracing data. It's their way of not depending on OTEL with their main package. The sucky thing is, prisma broke the interface of the tracing helper with the v6 major update. This means that if you use Prisma 5 with the v6 instrumentation (or vice versa) Prisma just blows up, because tries to call methods on the helper that no longer exist.\n    // Because we actually want to use the v6 instrumentation and not blow up in Prisma 5 user's faces, what we're doing here is backfilling the v5 method (`createEngineSpan`) with a noop so that no longer crashes when it attempts to call that function.\n    // We still won't fully emit all the spans, but this could potentially be implemented in the future.\n    const prismaTracingHelper = getPrismaTracingHelper();\n\n    let emittedWarning = false;\n\n    if (isPrismaV6TracingHelper(prismaTracingHelper)) {\n      (prismaTracingHelper ).createEngineSpan = () => {\n        core.consoleSandbox(() => {\n          if (!emittedWarning) {\n            emittedWarning = true;\n            // eslint-disable-next-line no-console\n            console.warn(\n              '[Sentry] The Sentry SDK supports tracing with Prisma version 5 only with limited capabilities. For full tracing capabilities pass `prismaInstrumentation` for version 5 to the Sentry `prismaIntegration`. Read more: https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/prisma/',\n            );\n          }\n        });\n      };\n    }\n  }\n}\n\nconst instrumentPrisma = instrument.generateInstrumentOnce(\n  INTEGRATION_NAME,\n  options => {\n    // Use a passed instrumentation instance to support older Prisma versions\n    if (options?.prismaInstrumentation) {\n      return options.prismaInstrumentation;\n    }\n\n    return new SentryPrismaInteropInstrumentation();\n  },\n);\n\n/**\n * Adds Sentry tracing instrumentation for the [prisma](https://www.npmjs.com/package/prisma) library.\n * For more information, see the [`prismaIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/prisma/).\n *\n * NOTE: By default, this integration works with Prisma version 6.\n * To get performance instrumentation for other Prisma versions,\n * 1. Install the `@prisma/instrumentation` package with the desired version.\n * 1. Pass a `new PrismaInstrumentation()` instance as exported from `@prisma/instrumentation` to the `prismaInstrumentation` option of this integration:\n *\n *    ```js\n *    import { PrismaInstrumentation } from '@prisma/instrumentation'\n *\n *    Sentry.init({\n *      integrations: [\n *        prismaIntegration({\n *          // Override the default instrumentation that Sentry uses\n *          prismaInstrumentation: new PrismaInstrumentation()\n *        })\n *      ]\n *    })\n *    ```\n *\n *    The passed instrumentation instance will override the default instrumentation instance the integration would use, while the `prismaIntegration` will still ensure data compatibility for the various Prisma versions.\n * 1. Depending on your Prisma version (prior to version 6), add `previewFeatures = [\"tracing\"]` to the client generator block of your Prisma schema:\n *\n *    ```\n *    generator client {\n *      provider = \"prisma-client-js\"\n *      previewFeatures = [\"tracing\"]\n *    }\n *    ```\n */\nconst prismaIntegration = core.defineIntegration(\n  ({\n    prismaInstrumentation,\n  }\n\n = {}) => {\n    return {\n      name: INTEGRATION_NAME,\n      setupOnce() {\n        instrumentPrisma({ prismaInstrumentation });\n      },\n      setup(client) {\n        // If no tracing helper exists, we skip any work here\n        // this means that prisma is not being used\n        if (!getPrismaTracingHelper()) {\n          return;\n        }\n\n        client.on('spanStart', span => {\n          const spanJSON = core.spanToJSON(span);\n          if (spanJSON.description?.startsWith('prisma:')) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.prisma');\n          }\n\n          // Make sure we use the query text as the span name, for ex. SELECT * FROM \"User\" WHERE \"id\" = $1\n          if (spanJSON.description === 'prisma:engine:db_query' && spanJSON.data['db.query.text']) {\n            span.updateName(spanJSON.data['db.query.text'] );\n          }\n\n          // In Prisma v5.22+, the `db.system` attribute is automatically set\n          // On older versions, this is missing, so we add it here\n          if (spanJSON.description === 'prisma:engine:db_query' && !spanJSON.data['db.system']) {\n            span.setAttribute('db.system', 'prisma');\n          }\n        });\n      },\n    };\n  },\n);\n\nexports.instrumentPrisma = instrumentPrisma;\nexports.prismaIntegration = prismaIntegration;\n//# sourceMappingURL=prisma.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationIoredis = __webpack_require__(/*! @opentelemetry/instrumentation-ioredis */ \"(ssr)/./node_modules/@opentelemetry/instrumentation-ioredis/build/src/index.js\");\nconst instrumentationRedis4 = __webpack_require__(/*! @opentelemetry/instrumentation-redis-4 */ \"(ssr)/./node_modules/@opentelemetry/instrumentation-redis-4/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst redisCache = __webpack_require__(/*! ../../utils/redisCache.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/redisCache.js\");\n\nconst INTEGRATION_NAME = 'Redis';\n\nlet _redisOptions = {};\n\nconst cacheResponseHook = (span, redisCommand, cmdArgs, response) => {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.redis');\n\n  const safeKey = redisCache.getCacheKeySafely(redisCommand, cmdArgs);\n  const cacheOperation = redisCache.getCacheOperation(redisCommand);\n\n  if (\n    !safeKey ||\n    !cacheOperation ||\n    !_redisOptions.cachePrefixes ||\n    !redisCache.shouldConsiderForCache(redisCommand, safeKey, _redisOptions.cachePrefixes)\n  ) {\n    // not relevant for cache\n    return;\n  }\n\n  // otel/ioredis seems to be using the old standard, as there was a change to those params: https://github.com/open-telemetry/opentelemetry-specification/issues/3199\n  // We are using params based on the docs: https://opentelemetry.io/docs/specs/semconv/attributes-registry/network/\n  const networkPeerAddress = core.spanToJSON(span).data['net.peer.name'];\n  const networkPeerPort = core.spanToJSON(span).data['net.peer.port'];\n  if (networkPeerPort && networkPeerAddress) {\n    span.setAttributes({ 'network.peer.address': networkPeerAddress, 'network.peer.port': networkPeerPort });\n  }\n\n  const cacheItemSize = redisCache.calculateCacheItemSize(response);\n\n  if (cacheItemSize) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE, cacheItemSize);\n  }\n\n  if (redisCache.isInCommands(redisCache.GET_COMMANDS, redisCommand) && cacheItemSize !== undefined) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_CACHE_HIT, cacheItemSize > 0);\n  }\n\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: cacheOperation,\n    [core.SEMANTIC_ATTRIBUTE_CACHE_KEY]: safeKey,\n  });\n\n  const spanDescription = safeKey.join(', ');\n\n  span.updateName(core.truncate(spanDescription, 1024));\n};\n\nconst instrumentIORedis = instrument.generateInstrumentOnce('IORedis', () => {\n  return new instrumentationIoredis.IORedisInstrumentation({\n    responseHook: cacheResponseHook,\n  });\n});\n\nconst instrumentRedis4 = instrument.generateInstrumentOnce('Redis-4', () => {\n  return new instrumentationRedis4.RedisInstrumentation({\n    responseHook: cacheResponseHook,\n  });\n});\n\n/** To be able to preload all Redis OTel instrumentations with just one ID (\"Redis\"), all the instrumentations are generated in this one function  */\nconst instrumentRedis = Object.assign(\n  () => {\n    instrumentIORedis();\n    instrumentRedis4();\n\n    // todo: implement them gradually\n    // new LegacyRedisInstrumentation({}),\n  },\n  { id: INTEGRATION_NAME },\n);\n\nconst _redisIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      _redisOptions = options;\n      instrumentRedis();\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [redis](https://www.npmjs.com/package/redis) and\n * [ioredis](https://www.npmjs.com/package/ioredis) libraries.\n *\n * For more information, see the [`redisIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/redis/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.redisIntegration()],\n * });\n * ```\n */\nconst redisIntegration = core.defineIntegration(_redisIntegration);\n\nexports.instrumentRedis = instrumentRedis;\nexports.redisIntegration = redisIntegration;\n//# sourceMappingURL=redis.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9yZWRpcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSwrQkFBK0IsbUJBQU8sQ0FBQyw4SEFBd0M7QUFDL0UsOEJBQThCLG1CQUFPLENBQUMsOEhBQXdDO0FBQzlFLGFBQWEsbUJBQU8sQ0FBQyxvR0FBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxnR0FBMEI7QUFDckQsbUJBQW1CLG1CQUFPLENBQUMsa0dBQTJCOztBQUV0RDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsa0ZBQWtGO0FBQzNHOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3Q0FBd0M7QUFDeEMsR0FBRztBQUNILElBQUksc0JBQXNCO0FBQzFCOztBQUVBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLHVCQUF1QjtBQUN2Qix3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXGludGVncmF0aW9uc1xcdHJhY2luZ1xccmVkaXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbklvcmVkaXMgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taW9yZWRpcycpO1xuY29uc3QgaW5zdHJ1bWVudGF0aW9uUmVkaXM0ID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXJlZGlzLTQnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IHJlZGlzQ2FjaGUgPSByZXF1aXJlKCcuLi8uLi91dGlscy9yZWRpc0NhY2hlLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnUmVkaXMnO1xuXG5sZXQgX3JlZGlzT3B0aW9ucyA9IHt9O1xuXG5jb25zdCBjYWNoZVJlc3BvbnNlSG9vayA9IChzcGFuLCByZWRpc0NvbW1hbmQsIGNtZEFyZ3MsIHJlc3BvbnNlKSA9PiB7XG4gIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwucmVkaXMnKTtcblxuICBjb25zdCBzYWZlS2V5ID0gcmVkaXNDYWNoZS5nZXRDYWNoZUtleVNhZmVseShyZWRpc0NvbW1hbmQsIGNtZEFyZ3MpO1xuICBjb25zdCBjYWNoZU9wZXJhdGlvbiA9IHJlZGlzQ2FjaGUuZ2V0Q2FjaGVPcGVyYXRpb24ocmVkaXNDb21tYW5kKTtcblxuICBpZiAoXG4gICAgIXNhZmVLZXkgfHxcbiAgICAhY2FjaGVPcGVyYXRpb24gfHxcbiAgICAhX3JlZGlzT3B0aW9ucy5jYWNoZVByZWZpeGVzIHx8XG4gICAgIXJlZGlzQ2FjaGUuc2hvdWxkQ29uc2lkZXJGb3JDYWNoZShyZWRpc0NvbW1hbmQsIHNhZmVLZXksIF9yZWRpc09wdGlvbnMuY2FjaGVQcmVmaXhlcylcbiAgKSB7XG4gICAgLy8gbm90IHJlbGV2YW50IGZvciBjYWNoZVxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIG90ZWwvaW9yZWRpcyBzZWVtcyB0byBiZSB1c2luZyB0aGUgb2xkIHN0YW5kYXJkLCBhcyB0aGVyZSB3YXMgYSBjaGFuZ2UgdG8gdGhvc2UgcGFyYW1zOiBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1zcGVjaWZpY2F0aW9uL2lzc3Vlcy8zMTk5XG4gIC8vIFdlIGFyZSB1c2luZyBwYXJhbXMgYmFzZWQgb24gdGhlIGRvY3M6IGh0dHBzOi8vb3BlbnRlbGVtZXRyeS5pby9kb2NzL3NwZWNzL3NlbWNvbnYvYXR0cmlidXRlcy1yZWdpc3RyeS9uZXR3b3JrL1xuICBjb25zdCBuZXR3b3JrUGVlckFkZHJlc3MgPSBjb3JlLnNwYW5Ub0pTT04oc3BhbikuZGF0YVsnbmV0LnBlZXIubmFtZSddO1xuICBjb25zdCBuZXR3b3JrUGVlclBvcnQgPSBjb3JlLnNwYW5Ub0pTT04oc3BhbikuZGF0YVsnbmV0LnBlZXIucG9ydCddO1xuICBpZiAobmV0d29ya1BlZXJQb3J0ICYmIG5ldHdvcmtQZWVyQWRkcmVzcykge1xuICAgIHNwYW4uc2V0QXR0cmlidXRlcyh7ICduZXR3b3JrLnBlZXIuYWRkcmVzcyc6IG5ldHdvcmtQZWVyQWRkcmVzcywgJ25ldHdvcmsucGVlci5wb3J0JzogbmV0d29ya1BlZXJQb3J0IH0pO1xuICB9XG5cbiAgY29uc3QgY2FjaGVJdGVtU2l6ZSA9IHJlZGlzQ2FjaGUuY2FsY3VsYXRlQ2FjaGVJdGVtU2l6ZShyZXNwb25zZSk7XG5cbiAgaWYgKGNhY2hlSXRlbVNpemUpIHtcbiAgICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9JVEVNX1NJWkUsIGNhY2hlSXRlbVNpemUpO1xuICB9XG5cbiAgaWYgKHJlZGlzQ2FjaGUuaXNJbkNvbW1hbmRzKHJlZGlzQ2FjaGUuR0VUX0NPTU1BTkRTLCByZWRpc0NvbW1hbmQpICYmIGNhY2hlSXRlbVNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0hJVCwgY2FjaGVJdGVtU2l6ZSA+IDApO1xuICB9XG5cbiAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHtcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXTogY2FjaGVPcGVyYXRpb24sXG4gICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0tFWV06IHNhZmVLZXksXG4gIH0pO1xuXG4gIGNvbnN0IHNwYW5EZXNjcmlwdGlvbiA9IHNhZmVLZXkuam9pbignLCAnKTtcblxuICBzcGFuLnVwZGF0ZU5hbWUoY29yZS50cnVuY2F0ZShzcGFuRGVzY3JpcHRpb24sIDEwMjQpKTtcbn07XG5cbmNvbnN0IGluc3RydW1lbnRJT1JlZGlzID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKCdJT1JlZGlzJywgKCkgPT4ge1xuICByZXR1cm4gbmV3IGluc3RydW1lbnRhdGlvbklvcmVkaXMuSU9SZWRpc0luc3RydW1lbnRhdGlvbih7XG4gICAgcmVzcG9uc2VIb29rOiBjYWNoZVJlc3BvbnNlSG9vayxcbiAgfSk7XG59KTtcblxuY29uc3QgaW5zdHJ1bWVudFJlZGlzNCA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZSgnUmVkaXMtNCcsICgpID0+IHtcbiAgcmV0dXJuIG5ldyBpbnN0cnVtZW50YXRpb25SZWRpczQuUmVkaXNJbnN0cnVtZW50YXRpb24oe1xuICAgIHJlc3BvbnNlSG9vazogY2FjaGVSZXNwb25zZUhvb2ssXG4gIH0pO1xufSk7XG5cbi8qKiBUbyBiZSBhYmxlIHRvIHByZWxvYWQgYWxsIFJlZGlzIE9UZWwgaW5zdHJ1bWVudGF0aW9ucyB3aXRoIGp1c3Qgb25lIElEIChcIlJlZGlzXCIpLCBhbGwgdGhlIGluc3RydW1lbnRhdGlvbnMgYXJlIGdlbmVyYXRlZCBpbiB0aGlzIG9uZSBmdW5jdGlvbiAgKi9cbmNvbnN0IGluc3RydW1lbnRSZWRpcyA9IE9iamVjdC5hc3NpZ24oXG4gICgpID0+IHtcbiAgICBpbnN0cnVtZW50SU9SZWRpcygpO1xuICAgIGluc3RydW1lbnRSZWRpczQoKTtcblxuICAgIC8vIHRvZG86IGltcGxlbWVudCB0aGVtIGdyYWR1YWxseVxuICAgIC8vIG5ldyBMZWdhY3lSZWRpc0luc3RydW1lbnRhdGlvbih7fSksXG4gIH0sXG4gIHsgaWQ6IElOVEVHUkFUSU9OX05BTUUgfSxcbik7XG5cbmNvbnN0IF9yZWRpc0ludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIF9yZWRpc09wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgaW5zdHJ1bWVudFJlZGlzKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtyZWRpc10oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcmVkaXMpIGFuZFxuICogW2lvcmVkaXNdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2lvcmVkaXMpIGxpYnJhcmllcy5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYHJlZGlzSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvcmVkaXMvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5yZWRpc0ludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgcmVkaXNJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX3JlZGlzSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRSZWRpcyA9IGluc3RydW1lbnRSZWRpcztcbmV4cG9ydHMucmVkaXNJbnRlZ3JhdGlvbiA9IHJlZGlzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWRpcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentationTedious = __webpack_require__(/*! @opentelemetry/instrumentation-tedious */ \"(ssr)/./node_modules/@opentelemetry/instrumentation-tedious/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\n\nconst TEDIUS_INSTRUMENTED_METHODS = new Set([\n  'callProcedure',\n  'execSql',\n  'execSqlBatch',\n  'execBulkLoad',\n  'prepare',\n  'execute',\n]);\n\nconst INTEGRATION_NAME = 'Tedious';\n\nconst instrumentTedious = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationTedious.TediousInstrumentation({}));\n\nconst _tediousIntegration = (() => {\n  let instrumentationWrappedCallback;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const instrumentation = instrumentTedious();\n      instrumentationWrappedCallback = instrument.instrumentWhenWrapped(instrumentation);\n    },\n\n    setup(client) {\n      instrumentationWrappedCallback?.(() =>\n        client.on('spanStart', span => {\n          const { description, data } = core.spanToJSON(span);\n          // Tedius integration always set a span name and `db.system` attribute to `mssql`.\n          if (!description || data['db.system'] !== 'mssql') {\n            return;\n          }\n\n          const operation = description.split(' ')[0] || '';\n          if (TEDIUS_INSTRUMENTED_METHODS.has(operation)) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.tedious');\n          }\n        }),\n      );\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [tedious](https://www.npmjs.com/package/tedious) library.\n *\n * For more information, see the [`tediousIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/tedious/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.tediousIntegration()],\n * });\n * ```\n */\nconst tediousIntegration = core.defineIntegration(_tediousIntegration);\n\nexports.instrumentTedious = instrumentTedious;\nexports.tediousIntegration = tediousIntegration;\n//# sourceMappingURL=tedious.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy90ZWRpb3VzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLCtCQUErQixtQkFBTyxDQUFDLDhIQUF3QztBQUMvRSxhQUFhLG1CQUFPLENBQUMsb0dBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsZ0dBQTBCOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLHdJQUF3STs7QUFFeEk7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isb0JBQW9CO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSx5QkFBeUI7QUFDekIsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAc2VudHJ5XFxub2RlXFxidWlsZFxcY2pzXFxpbnRlZ3JhdGlvbnNcXHRyYWNpbmdcXHRlZGlvdXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvblRlZGlvdXMgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tdGVkaW91cycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuXG5jb25zdCBURURJVVNfSU5TVFJVTUVOVEVEX01FVEhPRFMgPSBuZXcgU2V0KFtcbiAgJ2NhbGxQcm9jZWR1cmUnLFxuICAnZXhlY1NxbCcsXG4gICdleGVjU3FsQmF0Y2gnLFxuICAnZXhlY0J1bGtMb2FkJyxcbiAgJ3ByZXBhcmUnLFxuICAnZXhlY3V0ZScsXG5dKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdUZWRpb3VzJztcblxuY29uc3QgaW5zdHJ1bWVudFRlZGlvdXMgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvblRlZGlvdXMuVGVkaW91c0luc3RydW1lbnRhdGlvbih7fSkpO1xuXG5jb25zdCBfdGVkaW91c0ludGVncmF0aW9uID0gKCgpID0+IHtcbiAgbGV0IGluc3RydW1lbnRhdGlvbldyYXBwZWRDYWxsYmFjaztcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gaW5zdHJ1bWVudFRlZGlvdXMoKTtcbiAgICAgIGluc3RydW1lbnRhdGlvbldyYXBwZWRDYWxsYmFjayA9IGluc3RydW1lbnQuaW5zdHJ1bWVudFdoZW5XcmFwcGVkKGluc3RydW1lbnRhdGlvbik7XG4gICAgfSxcblxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgaW5zdHJ1bWVudGF0aW9uV3JhcHBlZENhbGxiYWNrPy4oKCkgPT5cbiAgICAgICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgICAgICBjb25zdCB7IGRlc2NyaXB0aW9uLCBkYXRhIH0gPSBjb3JlLnNwYW5Ub0pTT04oc3Bhbik7XG4gICAgICAgICAgLy8gVGVkaXVzIGludGVncmF0aW9uIGFsd2F5cyBzZXQgYSBzcGFuIG5hbWUgYW5kIGBkYi5zeXN0ZW1gIGF0dHJpYnV0ZSB0byBgbXNzcWxgLlxuICAgICAgICAgIGlmICghZGVzY3JpcHRpb24gfHwgZGF0YVsnZGIuc3lzdGVtJ10gIT09ICdtc3NxbCcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBvcGVyYXRpb24gPSBkZXNjcmlwdGlvbi5zcGxpdCgnICcpWzBdIHx8ICcnO1xuICAgICAgICAgIGlmIChURURJVVNfSU5TVFJVTUVOVEVEX01FVEhPRFMuaGFzKG9wZXJhdGlvbikpIHtcbiAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwudGVkaW91cycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbdGVkaW91c10oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdGVkaW91cykgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYHRlZGlvdXNJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy90ZWRpb3VzLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkudGVkaW91c0ludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgdGVkaW91c0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfdGVkaW91c0ludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50VGVkaW91cyA9IGluc3RydW1lbnRUZWRpb3VzO1xuZXhwb3J0cy50ZWRpb3VzSW50ZWdyYXRpb24gPSB0ZWRpb3VzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZWRpb3VzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/ai_sdk_attributes.js":(__unused_webpack_module,exports)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * AI SDK Telemetry Attributes\n * Based on https://ai-sdk.dev/docs/ai-sdk-core/telemetry#collected-data\n */\n\n\n// =============================================================================\n// SHARED ATTRIBUTES\n// =============================================================================\n\n/**\n * `generateText` function - `ai.generateText` span\n * `streamText` function - `ai.streamText` span\n *\n * The prompt that was used when calling the function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#streamtext-function\n */\nconst AI_PROMPT_ATTRIBUTE = 'ai.prompt';\n\n// =============================================================================\n// GENERATETEXT FUNCTION - UNIQUE ATTRIBUTES\n// =============================================================================\n\n/**\n * `generateText` function - `ai.generateText` span\n *\n * The text that was generated\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nconst AI_RESPONSE_TEXT_ATTRIBUTE = 'ai.response.text';\n\n/**\n * `generateText` function - `ai.generateText` span\n *\n * The tool calls that were made as part of the generation (stringified JSON)\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nconst AI_RESPONSE_TOOL_CALLS_ATTRIBUTE = 'ai.response.toolCalls';\n\n/**\n * `generateText` function - `ai.generateText.doGenerate` span\n *\n * The messages that were passed into the provider\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nconst AI_PROMPT_MESSAGES_ATTRIBUTE = 'ai.prompt.messages';\n\n/**\n * `generateText` function - `ai.generateText.doGenerate` span\n *\n * Array of stringified tool definitions\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#generatetext-function\n */\nconst AI_PROMPT_TOOLS_ATTRIBUTE = 'ai.prompt.tools';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The id of the model\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nconst AI_MODEL_ID_ATTRIBUTE = 'ai.model.id';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The provider of the model\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nconst AI_MODEL_PROVIDER_ATTRIBUTE = 'ai.model.provider';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The functionId that was set through `telemetry.functionId`\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nconst AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE = 'ai.telemetry.functionId';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The number of completion tokens that were used\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nconst AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE = 'ai.usage.completionTokens';\n\n/**\n * Basic LLM span information\n * Multiple spans\n *\n * The number of prompt tokens that were used\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#basic-llm-span-information\n */\nconst AI_USAGE_PROMPT_TOKENS_ATTRIBUTE = 'ai.usage.promptTokens';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The model that was used to generate the response\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nconst GEN_AI_RESPONSE_MODEL_ATTRIBUTE = 'gen_ai.response.model';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The number of prompt tokens that were used\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nconst GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE = 'gen_ai.usage.input_tokens';\n\n/**\n * Semantic Conventions for GenAI operations\n * Individual LLM call spans\n *\n * The number of completion tokens that were used\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#call-llm-span-information\n */\nconst GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE = 'gen_ai.usage.output_tokens';\n\n// =============================================================================\n// TOOL CALL SPANS\n// =============================================================================\n\n/**\n * Tool call spans\n * `ai.toolCall` span\n *\n * The name of the tool\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#tool-call-spans\n */\nconst AI_TOOL_CALL_NAME_ATTRIBUTE = 'ai.toolCall.name';\n\n/**\n * Tool call spans\n * `ai.toolCall` span\n *\n * The id of the tool call\n * @see https://ai-sdk.dev/docs/ai-sdk-core/telemetry#tool-call-spans\n */\nconst AI_TOOL_CALL_ID_ATTRIBUTE = 'ai.toolCall.id';\n\nexports.AI_MODEL_ID_ATTRIBUTE = AI_MODEL_ID_ATTRIBUTE;\nexports.AI_MODEL_PROVIDER_ATTRIBUTE = AI_MODEL_PROVIDER_ATTRIBUTE;\nexports.AI_PROMPT_ATTRIBUTE = AI_PROMPT_ATTRIBUTE;\nexports.AI_PROMPT_MESSAGES_ATTRIBUTE = AI_PROMPT_MESSAGES_ATTRIBUTE;\nexports.AI_PROMPT_TOOLS_ATTRIBUTE = AI_PROMPT_TOOLS_ATTRIBUTE;\nexports.AI_RESPONSE_TEXT_ATTRIBUTE = AI_RESPONSE_TEXT_ATTRIBUTE;\nexports.AI_RESPONSE_TOOL_CALLS_ATTRIBUTE = AI_RESPONSE_TOOL_CALLS_ATTRIBUTE;\nexports.AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE = AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE;\nexports.AI_TOOL_CALL_ID_ATTRIBUTE = AI_TOOL_CALL_ID_ATTRIBUTE;\nexports.AI_TOOL_CALL_NAME_ATTRIBUTE = AI_TOOL_CALL_NAME_ATTRIBUTE;\nexports.AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE = AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE;\nexports.AI_USAGE_PROMPT_TOKENS_ATTRIBUTE = AI_USAGE_PROMPT_TOKENS_ATTRIBUTE;\nexports.GEN_AI_RESPONSE_MODEL_ATTRIBUTE = GEN_AI_RESPONSE_MODEL_ATTRIBUTE;\nexports.GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE = GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE;\nexports.GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE = GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE;\n//# sourceMappingURL=ai_sdk_attributes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy92ZXJjZWxhaS9haV9zZGtfYXR0cmlidXRlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNkJBQTZCO0FBQzdCLG1DQUFtQztBQUNuQywyQkFBMkI7QUFDM0Isb0NBQW9DO0FBQ3BDLGlDQUFpQztBQUNqQyxrQ0FBa0M7QUFDbEMsd0NBQXdDO0FBQ3hDLDBDQUEwQztBQUMxQyxpQ0FBaUM7QUFDakMsbUNBQW1DO0FBQ25DLDRDQUE0QztBQUM1Qyx3Q0FBd0M7QUFDeEMsdUNBQXVDO0FBQ3ZDLDJDQUEyQztBQUMzQyw0Q0FBNEM7QUFDNUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcMVxcRG93bmxvYWRzXFx0YWJvckFjYWRlbXlVcGRhdGVkXFx0YWJvci1hY2FkZW15XFxub2RlX21vZHVsZXNcXEBzZW50cnlcXG5vZGVcXGJ1aWxkXFxjanNcXGludGVncmF0aW9uc1xcdHJhY2luZ1xcdmVyY2VsYWlcXGFpX3Nka19hdHRyaWJ1dGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG4vKipcbiAqIEFJIFNESyBUZWxlbWV0cnkgQXR0cmlidXRlc1xuICogQmFzZWQgb24gaHR0cHM6Ly9haS1zZGsuZGV2L2RvY3MvYWktc2RrLWNvcmUvdGVsZW1ldHJ5I2NvbGxlY3RlZC1kYXRhXG4gKi9cblxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gU0hBUkVEIEFUVFJJQlVURVNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8qKlxuICogYGdlbmVyYXRlVGV4dGAgZnVuY3Rpb24gLSBgYWkuZ2VuZXJhdGVUZXh0YCBzcGFuXG4gKiBgc3RyZWFtVGV4dGAgZnVuY3Rpb24gLSBgYWkuc3RyZWFtVGV4dGAgc3BhblxuICpcbiAqIFRoZSBwcm9tcHQgdGhhdCB3YXMgdXNlZCB3aGVuIGNhbGxpbmcgdGhlIGZ1bmN0aW9uXG4gKiBAc2VlIGh0dHBzOi8vYWktc2RrLmRldi9kb2NzL2FpLXNkay1jb3JlL3RlbGVtZXRyeSNnZW5lcmF0ZXRleHQtZnVuY3Rpb25cbiAqIEBzZWUgaHR0cHM6Ly9haS1zZGsuZGV2L2RvY3MvYWktc2RrLWNvcmUvdGVsZW1ldHJ5I3N0cmVhbXRleHQtZnVuY3Rpb25cbiAqL1xuY29uc3QgQUlfUFJPTVBUX0FUVFJJQlVURSA9ICdhaS5wcm9tcHQnO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gR0VORVJBVEVURVhUIEZVTkNUSU9OIC0gVU5JUVVFIEFUVFJJQlVURVNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8qKlxuICogYGdlbmVyYXRlVGV4dGAgZnVuY3Rpb24gLSBgYWkuZ2VuZXJhdGVUZXh0YCBzcGFuXG4gKlxuICogVGhlIHRleHQgdGhhdCB3YXMgZ2VuZXJhdGVkXG4gKiBAc2VlIGh0dHBzOi8vYWktc2RrLmRldi9kb2NzL2FpLXNkay1jb3JlL3RlbGVtZXRyeSNnZW5lcmF0ZXRleHQtZnVuY3Rpb25cbiAqL1xuY29uc3QgQUlfUkVTUE9OU0VfVEVYVF9BVFRSSUJVVEUgPSAnYWkucmVzcG9uc2UudGV4dCc7XG5cbi8qKlxuICogYGdlbmVyYXRlVGV4dGAgZnVuY3Rpb24gLSBgYWkuZ2VuZXJhdGVUZXh0YCBzcGFuXG4gKlxuICogVGhlIHRvb2wgY2FsbHMgdGhhdCB3ZXJlIG1hZGUgYXMgcGFydCBvZiB0aGUgZ2VuZXJhdGlvbiAoc3RyaW5naWZpZWQgSlNPTilcbiAqIEBzZWUgaHR0cHM6Ly9haS1zZGsuZGV2L2RvY3MvYWktc2RrLWNvcmUvdGVsZW1ldHJ5I2dlbmVyYXRldGV4dC1mdW5jdGlvblxuICovXG5jb25zdCBBSV9SRVNQT05TRV9UT09MX0NBTExTX0FUVFJJQlVURSA9ICdhaS5yZXNwb25zZS50b29sQ2FsbHMnO1xuXG4vKipcbiAqIGBnZW5lcmF0ZVRleHRgIGZ1bmN0aW9uIC0gYGFpLmdlbmVyYXRlVGV4dC5kb0dlbmVyYXRlYCBzcGFuXG4gKlxuICogVGhlIG1lc3NhZ2VzIHRoYXQgd2VyZSBwYXNzZWQgaW50byB0aGUgcHJvdmlkZXJcbiAqIEBzZWUgaHR0cHM6Ly9haS1zZGsuZGV2L2RvY3MvYWktc2RrLWNvcmUvdGVsZW1ldHJ5I2dlbmVyYXRldGV4dC1mdW5jdGlvblxuICovXG5jb25zdCBBSV9QUk9NUFRfTUVTU0FHRVNfQVRUUklCVVRFID0gJ2FpLnByb21wdC5tZXNzYWdlcyc7XG5cbi8qKlxuICogYGdlbmVyYXRlVGV4dGAgZnVuY3Rpb24gLSBgYWkuZ2VuZXJhdGVUZXh0LmRvR2VuZXJhdGVgIHNwYW5cbiAqXG4gKiBBcnJheSBvZiBzdHJpbmdpZmllZCB0b29sIGRlZmluaXRpb25zXG4gKiBAc2VlIGh0dHBzOi8vYWktc2RrLmRldi9kb2NzL2FpLXNkay1jb3JlL3RlbGVtZXRyeSNnZW5lcmF0ZXRleHQtZnVuY3Rpb25cbiAqL1xuY29uc3QgQUlfUFJPTVBUX1RPT0xTX0FUVFJJQlVURSA9ICdhaS5wcm9tcHQudG9vbHMnO1xuXG4vKipcbiAqIEJhc2ljIExMTSBzcGFuIGluZm9ybWF0aW9uXG4gKiBNdWx0aXBsZSBzcGFuc1xuICpcbiAqIFRoZSBpZCBvZiB0aGUgbW9kZWxcbiAqIEBzZWUgaHR0cHM6Ly9haS1zZGsuZGV2L2RvY3MvYWktc2RrLWNvcmUvdGVsZW1ldHJ5I2Jhc2ljLWxsbS1zcGFuLWluZm9ybWF0aW9uXG4gKi9cbmNvbnN0IEFJX01PREVMX0lEX0FUVFJJQlVURSA9ICdhaS5tb2RlbC5pZCc7XG5cbi8qKlxuICogQmFzaWMgTExNIHNwYW4gaW5mb3JtYXRpb25cbiAqIE11bHRpcGxlIHNwYW5zXG4gKlxuICogVGhlIHByb3ZpZGVyIG9mIHRoZSBtb2RlbFxuICogQHNlZSBodHRwczovL2FpLXNkay5kZXYvZG9jcy9haS1zZGstY29yZS90ZWxlbWV0cnkjYmFzaWMtbGxtLXNwYW4taW5mb3JtYXRpb25cbiAqL1xuY29uc3QgQUlfTU9ERUxfUFJPVklERVJfQVRUUklCVVRFID0gJ2FpLm1vZGVsLnByb3ZpZGVyJztcblxuLyoqXG4gKiBCYXNpYyBMTE0gc3BhbiBpbmZvcm1hdGlvblxuICogTXVsdGlwbGUgc3BhbnNcbiAqXG4gKiBUaGUgZnVuY3Rpb25JZCB0aGF0IHdhcyBzZXQgdGhyb3VnaCBgdGVsZW1ldHJ5LmZ1bmN0aW9uSWRgXG4gKiBAc2VlIGh0dHBzOi8vYWktc2RrLmRldi9kb2NzL2FpLXNkay1jb3JlL3RlbGVtZXRyeSNiYXNpYy1sbG0tc3Bhbi1pbmZvcm1hdGlvblxuICovXG5jb25zdCBBSV9URUxFTUVUUllfRlVOQ1RJT05fSURfQVRUUklCVVRFID0gJ2FpLnRlbGVtZXRyeS5mdW5jdGlvbklkJztcblxuLyoqXG4gKiBCYXNpYyBMTE0gc3BhbiBpbmZvcm1hdGlvblxuICogTXVsdGlwbGUgc3BhbnNcbiAqXG4gKiBUaGUgbnVtYmVyIG9mIGNvbXBsZXRpb24gdG9rZW5zIHRoYXQgd2VyZSB1c2VkXG4gKiBAc2VlIGh0dHBzOi8vYWktc2RrLmRldi9kb2NzL2FpLXNkay1jb3JlL3RlbGVtZXRyeSNiYXNpYy1sbG0tc3Bhbi1pbmZvcm1hdGlvblxuICovXG5jb25zdCBBSV9VU0FHRV9DT01QTEVUSU9OX1RPS0VOU19BVFRSSUJVVEUgPSAnYWkudXNhZ2UuY29tcGxldGlvblRva2Vucyc7XG5cbi8qKlxuICogQmFzaWMgTExNIHNwYW4gaW5mb3JtYXRpb25cbiAqIE11bHRpcGxlIHNwYW5zXG4gKlxuICogVGhlIG51bWJlciBvZiBwcm9tcHQgdG9rZW5zIHRoYXQgd2VyZSB1c2VkXG4gKiBAc2VlIGh0dHBzOi8vYWktc2RrLmRldi9kb2NzL2FpLXNkay1jb3JlL3RlbGVtZXRyeSNiYXNpYy1sbG0tc3Bhbi1pbmZvcm1hdGlvblxuICovXG5jb25zdCBBSV9VU0FHRV9QUk9NUFRfVE9LRU5TX0FUVFJJQlVURSA9ICdhaS51c2FnZS5wcm9tcHRUb2tlbnMnO1xuXG4vKipcbiAqIFNlbWFudGljIENvbnZlbnRpb25zIGZvciBHZW5BSSBvcGVyYXRpb25zXG4gKiBJbmRpdmlkdWFsIExMTSBjYWxsIHNwYW5zXG4gKlxuICogVGhlIG1vZGVsIHRoYXQgd2FzIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIHJlc3BvbnNlXG4gKiBAc2VlIGh0dHBzOi8vYWktc2RrLmRldi9kb2NzL2FpLXNkay1jb3JlL3RlbGVtZXRyeSNjYWxsLWxsbS1zcGFuLWluZm9ybWF0aW9uXG4gKi9cbmNvbnN0IEdFTl9BSV9SRVNQT05TRV9NT0RFTF9BVFRSSUJVVEUgPSAnZ2VuX2FpLnJlc3BvbnNlLm1vZGVsJztcblxuLyoqXG4gKiBTZW1hbnRpYyBDb252ZW50aW9ucyBmb3IgR2VuQUkgb3BlcmF0aW9uc1xuICogSW5kaXZpZHVhbCBMTE0gY2FsbCBzcGFuc1xuICpcbiAqIFRoZSBudW1iZXIgb2YgcHJvbXB0IHRva2VucyB0aGF0IHdlcmUgdXNlZFxuICogQHNlZSBodHRwczovL2FpLXNkay5kZXYvZG9jcy9haS1zZGstY29yZS90ZWxlbWV0cnkjY2FsbC1sbG0tc3Bhbi1pbmZvcm1hdGlvblxuICovXG5jb25zdCBHRU5fQUlfVVNBR0VfSU5QVVRfVE9LRU5TX0FUVFJJQlVURSA9ICdnZW5fYWkudXNhZ2UuaW5wdXRfdG9rZW5zJztcblxuLyoqXG4gKiBTZW1hbnRpYyBDb252ZW50aW9ucyBmb3IgR2VuQUkgb3BlcmF0aW9uc1xuICogSW5kaXZpZHVhbCBMTE0gY2FsbCBzcGFuc1xuICpcbiAqIFRoZSBudW1iZXIgb2YgY29tcGxldGlvbiB0b2tlbnMgdGhhdCB3ZXJlIHVzZWRcbiAqIEBzZWUgaHR0cHM6Ly9haS1zZGsuZGV2L2RvY3MvYWktc2RrLWNvcmUvdGVsZW1ldHJ5I2NhbGwtbGxtLXNwYW4taW5mb3JtYXRpb25cbiAqL1xuY29uc3QgR0VOX0FJX1VTQUdFX09VVFBVVF9UT0tFTlNfQVRUUklCVVRFID0gJ2dlbl9haS51c2FnZS5vdXRwdXRfdG9rZW5zJztcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFRPT0wgQ0FMTCBTUEFOU1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLyoqXG4gKiBUb29sIGNhbGwgc3BhbnNcbiAqIGBhaS50b29sQ2FsbGAgc3BhblxuICpcbiAqIFRoZSBuYW1lIG9mIHRoZSB0b29sXG4gKiBAc2VlIGh0dHBzOi8vYWktc2RrLmRldi9kb2NzL2FpLXNkay1jb3JlL3RlbGVtZXRyeSN0b29sLWNhbGwtc3BhbnNcbiAqL1xuY29uc3QgQUlfVE9PTF9DQUxMX05BTUVfQVRUUklCVVRFID0gJ2FpLnRvb2xDYWxsLm5hbWUnO1xuXG4vKipcbiAqIFRvb2wgY2FsbCBzcGFuc1xuICogYGFpLnRvb2xDYWxsYCBzcGFuXG4gKlxuICogVGhlIGlkIG9mIHRoZSB0b29sIGNhbGxcbiAqIEBzZWUgaHR0cHM6Ly9haS1zZGsuZGV2L2RvY3MvYWktc2RrLWNvcmUvdGVsZW1ldHJ5I3Rvb2wtY2FsbC1zcGFuc1xuICovXG5jb25zdCBBSV9UT09MX0NBTExfSURfQVRUUklCVVRFID0gJ2FpLnRvb2xDYWxsLmlkJztcblxuZXhwb3J0cy5BSV9NT0RFTF9JRF9BVFRSSUJVVEUgPSBBSV9NT0RFTF9JRF9BVFRSSUJVVEU7XG5leHBvcnRzLkFJX01PREVMX1BST1ZJREVSX0FUVFJJQlVURSA9IEFJX01PREVMX1BST1ZJREVSX0FUVFJJQlVURTtcbmV4cG9ydHMuQUlfUFJPTVBUX0FUVFJJQlVURSA9IEFJX1BST01QVF9BVFRSSUJVVEU7XG5leHBvcnRzLkFJX1BST01QVF9NRVNTQUdFU19BVFRSSUJVVEUgPSBBSV9QUk9NUFRfTUVTU0FHRVNfQVRUUklCVVRFO1xuZXhwb3J0cy5BSV9QUk9NUFRfVE9PTFNfQVRUUklCVVRFID0gQUlfUFJPTVBUX1RPT0xTX0FUVFJJQlVURTtcbmV4cG9ydHMuQUlfUkVTUE9OU0VfVEVYVF9BVFRSSUJVVEUgPSBBSV9SRVNQT05TRV9URVhUX0FUVFJJQlVURTtcbmV4cG9ydHMuQUlfUkVTUE9OU0VfVE9PTF9DQUxMU19BVFRSSUJVVEUgPSBBSV9SRVNQT05TRV9UT09MX0NBTExTX0FUVFJJQlVURTtcbmV4cG9ydHMuQUlfVEVMRU1FVFJZX0ZVTkNUSU9OX0lEX0FUVFJJQlVURSA9IEFJX1RFTEVNRVRSWV9GVU5DVElPTl9JRF9BVFRSSUJVVEU7XG5leHBvcnRzLkFJX1RPT0xfQ0FMTF9JRF9BVFRSSUJVVEUgPSBBSV9UT09MX0NBTExfSURfQVRUUklCVVRFO1xuZXhwb3J0cy5BSV9UT09MX0NBTExfTkFNRV9BVFRSSUJVVEUgPSBBSV9UT09MX0NBTExfTkFNRV9BVFRSSUJVVEU7XG5leHBvcnRzLkFJX1VTQUdFX0NPTVBMRVRJT05fVE9LRU5TX0FUVFJJQlVURSA9IEFJX1VTQUdFX0NPTVBMRVRJT05fVE9LRU5TX0FUVFJJQlVURTtcbmV4cG9ydHMuQUlfVVNBR0VfUFJPTVBUX1RPS0VOU19BVFRSSUJVVEUgPSBBSV9VU0FHRV9QUk9NUFRfVE9LRU5TX0FUVFJJQlVURTtcbmV4cG9ydHMuR0VOX0FJX1JFU1BPTlNFX01PREVMX0FUVFJJQlVURSA9IEdFTl9BSV9SRVNQT05TRV9NT0RFTF9BVFRSSUJVVEU7XG5leHBvcnRzLkdFTl9BSV9VU0FHRV9JTlBVVF9UT0tFTlNfQVRUUklCVVRFID0gR0VOX0FJX1VTQUdFX0lOUFVUX1RPS0VOU19BVFRSSUJVVEU7XG5leHBvcnRzLkdFTl9BSV9VU0FHRV9PVVRQVVRfVE9LRU5TX0FUVFJJQlVURSA9IEdFTl9BSV9VU0FHRV9PVVRQVVRfVE9LRU5TX0FUVFJJQlVURTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFpX3Nka19hdHRyaWJ1dGVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/ai_sdk_attributes.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js":(__unused_webpack_module,exports)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst INTEGRATION_NAME = 'VercelAI';\n\nexports.INTEGRATION_NAME = INTEGRATION_NAME;\n//# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy92ZXJjZWxhaS9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7O0FBRUEsd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAc2VudHJ5XFxub2RlXFxidWlsZFxcY2pzXFxpbnRlZ3JhdGlvbnNcXHRyYWNpbmdcXHZlcmNlbGFpXFxjb25zdGFudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnVmVyY2VsQUknO1xuXG5leHBvcnRzLklOVEVHUkFUSU9OX05BTUUgPSBJTlRFR1JBVElPTl9OQU1FO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../../otel/instrument.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../../utils/addOriginToSpan.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst ai_sdk_attributes = __webpack_require__(/*! ./ai_sdk_attributes.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/ai_sdk_attributes.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/instrumentation.js\");\n\nconst instrumentVercelAi = instrument.generateInstrumentOnce(constants.INTEGRATION_NAME, () => new instrumentation.SentryVercelAiInstrumentation({}));\n\n/**\n * Determines if the integration should be forced based on environment and package availability.\n * Returns true if the 'ai' package is available.\n */\nfunction shouldForceIntegration(client) {\n  const modules = client.getIntegrationByName('Modules');\n  return !!modules?.getModules?.()?.ai;\n}\n\nconst _vercelAIIntegration = ((options = {}) => {\n  let instrumentation;\n\n  return {\n    name: constants.INTEGRATION_NAME,\n    options,\n    setupOnce() {\n      instrumentation = instrumentVercelAi();\n    },\n    afterAllSetup(client) {\n      function registerProcessors() {\n        client.on('spanStart', span => {\n          const { data: attributes, description: name } = core.spanToJSON(span);\n\n          if (!name) {\n            return;\n          }\n\n          // Tool call spans\n          // https://ai-sdk.dev/docs/ai-sdk-core/telemetry#tool-call-spans\n          if (\n            attributes[ai_sdk_attributes.AI_TOOL_CALL_NAME_ATTRIBUTE] &&\n            attributes[ai_sdk_attributes.AI_TOOL_CALL_ID_ATTRIBUTE] &&\n            name === 'ai.toolCall'\n          ) {\n            addOriginToSpan.addOriginToSpan(span, 'auto.vercelai.otel');\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.execute_tool');\n            span.setAttribute('gen_ai.tool.call.id', attributes[ai_sdk_attributes.AI_TOOL_CALL_ID_ATTRIBUTE]);\n            span.setAttribute('gen_ai.tool.name', attributes[ai_sdk_attributes.AI_TOOL_CALL_NAME_ATTRIBUTE]);\n            span.updateName(`execute_tool ${attributes[ai_sdk_attributes.AI_TOOL_CALL_NAME_ATTRIBUTE]}`);\n            return;\n          }\n\n          // The AI and Provider must be defined for generate, stream, and embed spans.\n          // The id of the model\n          const aiModelId = attributes[ai_sdk_attributes.AI_MODEL_ID_ATTRIBUTE];\n          // the provider of the model\n          const aiModelProvider = attributes[ai_sdk_attributes.AI_MODEL_PROVIDER_ATTRIBUTE];\n          if (typeof aiModelId !== 'string' || typeof aiModelProvider !== 'string' || !aiModelId || !aiModelProvider) {\n            return;\n          }\n\n          addOriginToSpan.addOriginToSpan(span, 'auto.vercelai.otel');\n\n          const nameWthoutAi = name.replace('ai.', '');\n          span.setAttribute('ai.pipeline.name', nameWthoutAi);\n          span.updateName(nameWthoutAi);\n\n          // If a Telemetry name is set and it is a pipeline span, use that as the operation name\n          const functionId = attributes[ai_sdk_attributes.AI_TELEMETRY_FUNCTION_ID_ATTRIBUTE];\n          if (functionId && typeof functionId === 'string' && name.split('.').length - 1 === 1) {\n            span.updateName(`${nameWthoutAi} ${functionId}`);\n            span.setAttribute('ai.pipeline.name', functionId);\n          }\n\n          if (attributes[ai_sdk_attributes.AI_PROMPT_ATTRIBUTE]) {\n            span.setAttribute('gen_ai.prompt', attributes[ai_sdk_attributes.AI_PROMPT_ATTRIBUTE]);\n          }\n          if (attributes[ai_sdk_attributes.AI_MODEL_ID_ATTRIBUTE] && !attributes[ai_sdk_attributes.GEN_AI_RESPONSE_MODEL_ATTRIBUTE]) {\n            span.setAttribute(ai_sdk_attributes.GEN_AI_RESPONSE_MODEL_ATTRIBUTE, attributes[ai_sdk_attributes.AI_MODEL_ID_ATTRIBUTE]);\n          }\n          span.setAttribute('ai.streaming', name.includes('stream'));\n\n          // Generate Spans\n          if (name === 'ai.generateText') {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.generate_text');\n            return;\n          }\n\n          if (name === 'ai.generateText.doGenerate') {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.generate_text');\n            span.updateName(`generate_text ${attributes[ai_sdk_attributes.AI_MODEL_ID_ATTRIBUTE]}`);\n            return;\n          }\n\n          if (name === 'ai.streamText') {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.stream_text');\n            return;\n          }\n\n          if (name === 'ai.streamText.doStream') {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.stream_text');\n            span.updateName(`stream_text ${attributes[ai_sdk_attributes.AI_MODEL_ID_ATTRIBUTE]}`);\n            return;\n          }\n\n          if (name === 'ai.generateObject') {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.generate_object');\n            return;\n          }\n\n          if (name === 'ai.generateObject.doGenerate') {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.generate_object');\n            span.updateName(`generate_object ${attributes[ai_sdk_attributes.AI_MODEL_ID_ATTRIBUTE]}`);\n            return;\n          }\n\n          if (name === 'ai.streamObject') {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.stream_object');\n            return;\n          }\n\n          if (name === 'ai.streamObject.doStream') {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.stream_object');\n            span.updateName(`stream_object ${attributes[ai_sdk_attributes.AI_MODEL_ID_ATTRIBUTE]}`);\n            return;\n          }\n\n          if (name === 'ai.embed') {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.embed');\n            return;\n          }\n\n          if (name === 'ai.embed.doEmbed') {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.embed');\n            span.updateName(`embed ${attributes[ai_sdk_attributes.AI_MODEL_ID_ATTRIBUTE]}`);\n            return;\n          }\n\n          if (name === 'ai.embedMany') {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.embed_many');\n            return;\n          }\n\n          if (name === 'ai.embedMany.doEmbed') {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'gen_ai.embed_many');\n            span.updateName(`embed_many ${attributes[ai_sdk_attributes.AI_MODEL_ID_ATTRIBUTE]}`);\n            return;\n          }\n\n          if (name.startsWith('ai.stream')) {\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run');\n            return;\n          }\n        });\n\n        client.addEventProcessor(event => {\n          if (event.type === 'transaction' && event.spans?.length) {\n            for (const span of event.spans) {\n              const { data: attributes, description: name } = span;\n\n              if (!name || span.origin !== 'auto.vercelai.otel') {\n                continue;\n              }\n\n              if (attributes[ai_sdk_attributes.AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE] != undefined) {\n                attributes[ai_sdk_attributes.GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE] = attributes[ai_sdk_attributes.AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE];\n                delete attributes[ai_sdk_attributes.AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE];\n              }\n              if (attributes[ai_sdk_attributes.AI_USAGE_PROMPT_TOKENS_ATTRIBUTE] != undefined) {\n                attributes[ai_sdk_attributes.GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE] = attributes[ai_sdk_attributes.AI_USAGE_PROMPT_TOKENS_ATTRIBUTE];\n                delete attributes[ai_sdk_attributes.AI_USAGE_PROMPT_TOKENS_ATTRIBUTE];\n              }\n              if (\n                typeof attributes[ai_sdk_attributes.GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE] === 'number' &&\n                typeof attributes[ai_sdk_attributes.GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE] === 'number'\n              ) {\n                attributes['gen_ai.usage.total_tokens'] =\n                  attributes[ai_sdk_attributes.GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE] + attributes[ai_sdk_attributes.GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE];\n              }\n\n              // Rename AI SDK attributes to standardized gen_ai attributes\n              if (attributes[ai_sdk_attributes.AI_PROMPT_MESSAGES_ATTRIBUTE] != undefined) {\n                attributes['gen_ai.request.messages'] = attributes[ai_sdk_attributes.AI_PROMPT_MESSAGES_ATTRIBUTE];\n                delete attributes[ai_sdk_attributes.AI_PROMPT_MESSAGES_ATTRIBUTE];\n              }\n              if (attributes[ai_sdk_attributes.AI_RESPONSE_TEXT_ATTRIBUTE] != undefined) {\n                attributes['gen_ai.response.text'] = attributes[ai_sdk_attributes.AI_RESPONSE_TEXT_ATTRIBUTE];\n                delete attributes[ai_sdk_attributes.AI_RESPONSE_TEXT_ATTRIBUTE];\n              }\n              if (attributes[ai_sdk_attributes.AI_RESPONSE_TOOL_CALLS_ATTRIBUTE] != undefined) {\n                attributes['gen_ai.response.tool_calls'] = attributes[ai_sdk_attributes.AI_RESPONSE_TOOL_CALLS_ATTRIBUTE];\n                delete attributes[ai_sdk_attributes.AI_RESPONSE_TOOL_CALLS_ATTRIBUTE];\n              }\n              if (attributes[ai_sdk_attributes.AI_PROMPT_TOOLS_ATTRIBUTE] != undefined) {\n                attributes['gen_ai.request.available_tools'] = attributes[ai_sdk_attributes.AI_PROMPT_TOOLS_ATTRIBUTE];\n                delete attributes[ai_sdk_attributes.AI_PROMPT_TOOLS_ATTRIBUTE];\n              }\n            }\n          }\n\n          return event;\n        });\n      }\n\n      // Auto-detect if we should force the integration when running with 'ai' package available\n      // Note that this can only be detected if the 'Modules' integration is available, and running in CJS mode\n      const shouldForce = options.force ?? shouldForceIntegration(client);\n\n      if (shouldForce) {\n        registerProcessors();\n      } else {\n        instrumentation?.callWhenPatched(registerProcessors);\n      }\n    },\n  };\n}) ;\n\n/**\n * Adds Sentry tracing instrumentation for the [ai](https://www.npmjs.com/package/ai) library.\n *\n * For more information, see the [`ai` documentation](https://sdk.vercel.ai/docs/ai-sdk-core/telemetry).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.vercelAIIntegration()],\n * });\n * ```\n *\n * The integration automatically detects when to force registration in CommonJS environments\n * when the 'ai' package is available. You can still manually set the `force` option if needed.\n *\n * By default this integration adds tracing support to all `ai` function calls. If you need to disable\n * collecting spans for a specific call, you can do so by setting `experimental_telemetry.isEnabled` to\n * `false` in the first argument of the function call.\n *\n * ```javascript\n * const result = await generateText({\n *   model: openai('gpt-4-turbo'),\n *   experimental_telemetry: { isEnabled: false },\n * });\n * ```\n *\n * If you want to collect inputs and outputs for a specific call, you must specifically opt-in to each\n * function call by setting `experimental_telemetry.recordInputs` and `experimental_telemetry.recordOutputs`\n * to `true`.\n *\n * ```javascript\n * const result = await generateText({\n *  model: openai('gpt-4-turbo'),\n *  experimental_telemetry: { isEnabled: true, recordInputs: true, recordOutputs: true },\n * });\n */\nconst vercelAIIntegration = core.defineIntegration(_vercelAIIntegration);\n\nexports.instrumentVercelAi = instrumentVercelAi;\nexports.vercelAIIntegration = vercelAIIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/instrumentation.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(ssr)/./node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/node/node_modules/@sentry/core/build/cjs/index.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/constants.js\");\n\n// List of patched methods\n// From: https://sdk.vercel.ai/docs/ai-sdk-core/telemetry#collected-data\nconst INSTRUMENTED_METHODS = [\n  'generateText',\n  'streamText',\n  'generateObject',\n  'streamObject',\n  'embed',\n  'embedMany',\n] ;\n\n/**\n * Determines whether to record inputs and outputs for Vercel AI telemetry based on the configuration hierarchy.\n *\n * The order of precedence is:\n * 1. The vercel ai integration options\n * 2. The experimental_telemetry options in the vercel ai method calls\n * 3. When telemetry is explicitly enabled (isEnabled: true), default to recording\n * 4. Otherwise, use the sendDefaultPii option from client options\n */\nfunction determineRecordingSettings(\n  integrationRecordingOptions,\n  methodTelemetryOptions,\n  telemetryExplicitlyEnabled,\n  defaultRecordingEnabled,\n) {\n  const recordInputs =\n    integrationRecordingOptions?.recordInputs !== undefined\n      ? integrationRecordingOptions.recordInputs\n      : methodTelemetryOptions.recordInputs !== undefined\n        ? methodTelemetryOptions.recordInputs\n        : telemetryExplicitlyEnabled === true\n          ? true // When telemetry is explicitly enabled, default to recording inputs\n          : defaultRecordingEnabled;\n\n  const recordOutputs =\n    integrationRecordingOptions?.recordOutputs !== undefined\n      ? integrationRecordingOptions.recordOutputs\n      : methodTelemetryOptions.recordOutputs !== undefined\n        ? methodTelemetryOptions.recordOutputs\n        : telemetryExplicitlyEnabled === true\n          ? true // When telemetry is explicitly enabled, default to recording inputs\n          : defaultRecordingEnabled;\n\n  return { recordInputs, recordOutputs };\n}\n\n/**\n * This detects is added by the Sentry Vercel AI Integration to detect if the integration should\n * be enabled.\n *\n * It also patches the `ai` module to enable Vercel AI telemetry automatically for all methods.\n */\nclass SentryVercelAiInstrumentation extends instrumentation.InstrumentationBase {\n   __init() {this._isPatched = false;}\n   __init2() {this._callbacks = [];}\n\n   constructor(config = {}) {\n    super('@sentry/instrumentation-vercel-ai', core.SDK_VERSION, config);SentryVercelAiInstrumentation.prototype.__init.call(this);SentryVercelAiInstrumentation.prototype.__init2.call(this);  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n   init() {\n    const module = new instrumentation.InstrumentationNodeModuleDefinition('ai', ['>=3.0.0 <5'], this._patch.bind(this));\n    return module;\n  }\n\n  /**\n   * Call the provided callback when the module is patched.\n   * If it has already been patched, the callback will be called immediately.\n   */\n   callWhenPatched(callback) {\n    if (this._isPatched) {\n      callback();\n    } else {\n      this._callbacks.push(callback);\n    }\n  }\n\n  /**\n   * Patches module exports to enable Vercel AI telemetry.\n   */\n   _patch(moduleExports) {\n    this._isPatched = true;\n\n    this._callbacks.forEach(callback => callback());\n    this._callbacks = [];\n\n    function generatePatch(originalMethod) {\n      return (...args) => {\n        const existingExperimentalTelemetry = args[0].experimental_telemetry || {};\n        const isEnabled = existingExperimentalTelemetry.isEnabled;\n\n        const client = core.getCurrentScope().getClient();\n        const integration = client?.getIntegrationByName(constants.INTEGRATION_NAME);\n        const integrationOptions = integration?.options;\n        const shouldRecordInputsAndOutputs = integration ? Boolean(client?.getOptions().sendDefaultPii) : false;\n\n        const { recordInputs, recordOutputs } = determineRecordingSettings(\n          integrationOptions,\n          existingExperimentalTelemetry,\n          isEnabled,\n          shouldRecordInputsAndOutputs,\n        );\n\n        args[0].experimental_telemetry = {\n          ...existingExperimentalTelemetry,\n          isEnabled: isEnabled !== undefined ? isEnabled : true,\n          recordInputs,\n          recordOutputs,\n        };\n\n        // @ts-expect-error we know that the method exists\n        return originalMethod.apply(this, args);\n      };\n    }\n\n    // Is this an ESM module?\n    // https://tc39.es/ecma262/#sec-module-namespace-objects\n    if (Object.prototype.toString.call(moduleExports) === '[object Module]') {\n      // In ESM we take the usual route and just replace the exports we want to instrument\n      for (const method of INSTRUMENTED_METHODS) {\n        moduleExports[method] = generatePatch(moduleExports[method]);\n      }\n\n      return moduleExports;\n    } else {\n      // In CJS we can't replace the exports in the original module because they\n      // don't have setters, so we create a new object with the same properties\n      const patchedModuleExports = INSTRUMENTED_METHODS.reduce((acc, curr) => {\n        acc[curr] = generatePatch(moduleExports[curr]);\n        return acc;\n      }, {} );\n\n      return { ...moduleExports, ...patchedModuleExports };\n    }\n  }\n}\n\nexports.SentryVercelAiInstrumentation = SentryVercelAiInstrumentation;\nexports.determineRecordingSettings = determineRecordingSettings;\n//# sourceMappingURL=instrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/instrumentation.js\n")},"(ssr)/./node_modules/@sentry/node/build/cjs/integrations/winston.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst capture = __webpack_require__(/*! ../logs/capture.js */ \"(ssr)/./node_modules/@sentry/node/build/cjs/logs/capture.js\");\n\nconst DEFAULT_CAPTURED_LEVELS = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'];\n\n// See: https://github.com/winstonjs/triple-beam\nconst LEVEL_SYMBOL = Symbol.for('level');\nconst MESSAGE_SYMBOL = Symbol.for('message');\nconst SPLAT_SYMBOL = Symbol.for('splat');\n\n/**\n * Options for the Sentry Winston transport.\n */\n\n/**\n * Creates a new Sentry Winston transport that fowards logs to Sentry. Requires `_experiments.enableLogs` to be enabled.\n *\n * Supports Winston 3.x.x.\n *\n * @param TransportClass - The Winston transport class to extend.\n * @returns The extended transport class.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n *\n * @example\n * ```ts\n * const winston = require('winston');\n * const Transport = require('winston-transport');\n *\n * const SentryWinstonTransport = Sentry.createSentryWinstonTransport(Transport);\n *\n * const logger = winston.createLogger({\n *   transports: [new SentryWinstonTransport()],\n * });\n * ```\n */\nfunction createSentryWinstonTransport(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  TransportClass,\n  sentryWinstonOptions,\n) {\n  // @ts-ignore - We know this is safe because SentryWinstonTransport extends TransportClass\n  class SentryWinstonTransport extends TransportClass {\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n     constructor(options) {\n      super(options);\n      this._levels = new Set(sentryWinstonOptions?.levels ?? DEFAULT_CAPTURED_LEVELS);\n    }\n\n    /**\n     * Forwards a winston log to the Sentry SDK.\n     */\n     log(info, callback) {\n      try {\n        setImmediate(() => {\n          // @ts-ignore - We know this is safe because SentryWinstonTransport extends TransportClass\n          this.emit('logged', info);\n        });\n\n        if (!isObject(info)) {\n          return;\n        }\n\n        const levelFromSymbol = info[LEVEL_SYMBOL];\n\n        // See: https://github.com/winstonjs/winston?tab=readme-ov-file#streams-objectmode-and-info-objects\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { level, message, timestamp, ...attributes } = info;\n        // Remove all symbols from the remaining attributes\n        attributes[LEVEL_SYMBOL] = undefined;\n        attributes[MESSAGE_SYMBOL] = undefined;\n        attributes[SPLAT_SYMBOL] = undefined;\n\n        const logSeverityLevel = WINSTON_LEVEL_TO_LOG_SEVERITY_LEVEL_MAP[levelFromSymbol ] ?? 'info';\n        if (this._levels.has(logSeverityLevel)) {\n          capture.captureLog(logSeverityLevel, message , {\n            ...attributes,\n            'sentry.origin': 'auto.logging.winston',\n          });\n        }\n      } catch {\n        // do nothing\n      }\n\n      if (callback) {\n        callback();\n      }\n    }\n  }\n\n  return SentryWinstonTransport ;\n}\n\nfunction isObject(anything) {\n  return typeof anything === 'object' && anything != null;\n}\n\n// npm\n// {\n//   error: 0,\n//   warn: 1,\n//   info: 2,\n//   http: 3,\n//   verbose: 4,\n//   debug: 5,\n//   silly: 6\n// }\n//\n// syslog\n// {\n//   emerg: 0,\n//   alert: 1,\n//   crit: 2,\n//   error: 3,\n//   warning: 4,\n//   notice: 5,\n//   info: 6,\n//   debug: 7,\n// }\nconst WINSTON_LEVEL_TO_LOG_SEVERITY_LEVEL_MAP = {\n  // npm\n  silly: 'trace',\n  // npm and syslog\n  debug: 'debug',\n  // npm\n  verbose: 'debug',\n  // npm\n  http: 'debug',\n  // npm and syslog\n  info: 'info',\n  // syslog\n  notice: 'info',\n  // npm\n  warn: 'warn',\n  // syslog\n  warning: 'warn',\n  // npm and syslog\n  error: 'error',\n  // syslog\n  emerg: 'fatal',\n  // syslog\n  alert: 'fatal',\n  // syslog\n  crit: 'fatal',\n};\n\nexports.createSentryWinstonTransport = createSentryWinstonTransport;\n//# sourceMappingURL=winston.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvd2luc3Rvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxnQkFBZ0IsbUJBQU8sQ0FBQyx1RkFBb0I7O0FBRTVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLDJDQUEyQztBQUMzRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0NBQW9DO0FBQ3BDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXDFcXERvd25sb2Fkc1xcdGFib3JBY2FkZW15VXBkYXRlZFxcdGFib3ItYWNhZGVteVxcbm9kZV9tb2R1bGVzXFxAc2VudHJ5XFxub2RlXFxidWlsZFxcY2pzXFxpbnRlZ3JhdGlvbnNcXHdpbnN0b24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNhcHR1cmUgPSByZXF1aXJlKCcuLi9sb2dzL2NhcHR1cmUuanMnKTtcblxuY29uc3QgREVGQVVMVF9DQVBUVVJFRF9MRVZFTFMgPSBbJ3RyYWNlJywgJ2RlYnVnJywgJ2luZm8nLCAnd2FybicsICdlcnJvcicsICdmYXRhbCddO1xuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS93aW5zdG9uanMvdHJpcGxlLWJlYW1cbmNvbnN0IExFVkVMX1NZTUJPTCA9IFN5bWJvbC5mb3IoJ2xldmVsJyk7XG5jb25zdCBNRVNTQUdFX1NZTUJPTCA9IFN5bWJvbC5mb3IoJ21lc3NhZ2UnKTtcbmNvbnN0IFNQTEFUX1NZTUJPTCA9IFN5bWJvbC5mb3IoJ3NwbGF0Jyk7XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgdGhlIFNlbnRyeSBXaW5zdG9uIHRyYW5zcG9ydC5cbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgU2VudHJ5IFdpbnN0b24gdHJhbnNwb3J0IHRoYXQgZm93YXJkcyBsb2dzIHRvIFNlbnRyeS4gUmVxdWlyZXMgYF9leHBlcmltZW50cy5lbmFibGVMb2dzYCB0byBiZSBlbmFibGVkLlxuICpcbiAqIFN1cHBvcnRzIFdpbnN0b24gMy54LnguXG4gKlxuICogQHBhcmFtIFRyYW5zcG9ydENsYXNzIC0gVGhlIFdpbnN0b24gdHJhbnNwb3J0IGNsYXNzIHRvIGV4dGVuZC5cbiAqIEByZXR1cm5zIFRoZSBleHRlbmRlZCB0cmFuc3BvcnQgY2xhc3MuXG4gKlxuICogQGV4cGVyaW1lbnRhbCBUaGlzIG1ldGhvZCB3aWxsIGV4cGVyaWVuY2UgYnJlYWtpbmcgY2hhbmdlcy4gVGhpcyBpcyBub3QgeWV0IHBhcnQgb2ZcbiAqIHRoZSBzdGFibGUgU2VudHJ5IFNESyBBUEkgYW5kIGNhbiBiZSBjaGFuZ2VkIG9yIHJlbW92ZWQgd2l0aG91dCB3YXJuaW5nLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogY29uc3Qgd2luc3RvbiA9IHJlcXVpcmUoJ3dpbnN0b24nKTtcbiAqIGNvbnN0IFRyYW5zcG9ydCA9IHJlcXVpcmUoJ3dpbnN0b24tdHJhbnNwb3J0Jyk7XG4gKlxuICogY29uc3QgU2VudHJ5V2luc3RvblRyYW5zcG9ydCA9IFNlbnRyeS5jcmVhdGVTZW50cnlXaW5zdG9uVHJhbnNwb3J0KFRyYW5zcG9ydCk7XG4gKlxuICogY29uc3QgbG9nZ2VyID0gd2luc3Rvbi5jcmVhdGVMb2dnZXIoe1xuICogICB0cmFuc3BvcnRzOiBbbmV3IFNlbnRyeVdpbnN0b25UcmFuc3BvcnQoKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBjcmVhdGVTZW50cnlXaW5zdG9uVHJhbnNwb3J0KFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBUcmFuc3BvcnRDbGFzcyxcbiAgc2VudHJ5V2luc3Rvbk9wdGlvbnMsXG4pIHtcbiAgLy8gQHRzLWlnbm9yZSAtIFdlIGtub3cgdGhpcyBpcyBzYWZlIGJlY2F1c2UgU2VudHJ5V2luc3RvblRyYW5zcG9ydCBleHRlbmRzIFRyYW5zcG9ydENsYXNzXG4gIGNsYXNzIFNlbnRyeVdpbnN0b25UcmFuc3BvcnQgZXh0ZW5kcyBUcmFuc3BvcnRDbGFzcyB7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgIHRoaXMuX2xldmVscyA9IG5ldyBTZXQoc2VudHJ5V2luc3Rvbk9wdGlvbnM/LmxldmVscyA/PyBERUZBVUxUX0NBUFRVUkVEX0xFVkVMUyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRm9yd2FyZHMgYSB3aW5zdG9uIGxvZyB0byB0aGUgU2VudHJ5IFNESy5cbiAgICAgKi9cbiAgICAgbG9nKGluZm8sIGNhbGxiYWNrKSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXRJbW1lZGlhdGUoKCkgPT4ge1xuICAgICAgICAgIC8vIEB0cy1pZ25vcmUgLSBXZSBrbm93IHRoaXMgaXMgc2FmZSBiZWNhdXNlIFNlbnRyeVdpbnN0b25UcmFuc3BvcnQgZXh0ZW5kcyBUcmFuc3BvcnRDbGFzc1xuICAgICAgICAgIHRoaXMuZW1pdCgnbG9nZ2VkJywgaW5mbyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghaXNPYmplY3QoaW5mbykpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsZXZlbEZyb21TeW1ib2wgPSBpbmZvW0xFVkVMX1NZTUJPTF07XG5cbiAgICAgICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vd2luc3RvbmpzL3dpbnN0b24/dGFiPXJlYWRtZS1vdi1maWxlI3N0cmVhbXMtb2JqZWN0bW9kZS1hbmQtaW5mby1vYmplY3RzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICAgICAgY29uc3QgeyBsZXZlbCwgbWVzc2FnZSwgdGltZXN0YW1wLCAuLi5hdHRyaWJ1dGVzIH0gPSBpbmZvO1xuICAgICAgICAvLyBSZW1vdmUgYWxsIHN5bWJvbHMgZnJvbSB0aGUgcmVtYWluaW5nIGF0dHJpYnV0ZXNcbiAgICAgICAgYXR0cmlidXRlc1tMRVZFTF9TWU1CT0xdID0gdW5kZWZpbmVkO1xuICAgICAgICBhdHRyaWJ1dGVzW01FU1NBR0VfU1lNQk9MXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgYXR0cmlidXRlc1tTUExBVF9TWU1CT0xdID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGNvbnN0IGxvZ1NldmVyaXR5TGV2ZWwgPSBXSU5TVE9OX0xFVkVMX1RPX0xPR19TRVZFUklUWV9MRVZFTF9NQVBbbGV2ZWxGcm9tU3ltYm9sIF0gPz8gJ2luZm8nO1xuICAgICAgICBpZiAodGhpcy5fbGV2ZWxzLmhhcyhsb2dTZXZlcml0eUxldmVsKSkge1xuICAgICAgICAgIGNhcHR1cmUuY2FwdHVyZUxvZyhsb2dTZXZlcml0eUxldmVsLCBtZXNzYWdlICwge1xuICAgICAgICAgICAgLi4uYXR0cmlidXRlcyxcbiAgICAgICAgICAgICdzZW50cnkub3JpZ2luJzogJ2F1dG8ubG9nZ2luZy53aW5zdG9uJyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICAgIH1cblxuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFNlbnRyeVdpbnN0b25UcmFuc3BvcnQgO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChhbnl0aGluZykge1xuICByZXR1cm4gdHlwZW9mIGFueXRoaW5nID09PSAnb2JqZWN0JyAmJiBhbnl0aGluZyAhPSBudWxsO1xufVxuXG4vLyBucG1cbi8vIHtcbi8vICAgZXJyb3I6IDAsXG4vLyAgIHdhcm46IDEsXG4vLyAgIGluZm86IDIsXG4vLyAgIGh0dHA6IDMsXG4vLyAgIHZlcmJvc2U6IDQsXG4vLyAgIGRlYnVnOiA1LFxuLy8gICBzaWxseTogNlxuLy8gfVxuLy9cbi8vIHN5c2xvZ1xuLy8ge1xuLy8gICBlbWVyZzogMCxcbi8vICAgYWxlcnQ6IDEsXG4vLyAgIGNyaXQ6IDIsXG4vLyAgIGVycm9yOiAzLFxuLy8gICB3YXJuaW5nOiA0LFxuLy8gICBub3RpY2U6IDUsXG4vLyAgIGluZm86IDYsXG4vLyAgIGRlYnVnOiA3LFxuLy8gfVxuY29uc3QgV0lOU1RPTl9MRVZFTF9UT19MT0dfU0VWRVJJVFlfTEVWRUxfTUFQID0ge1xuICAvLyBucG1cbiAgc2lsbHk6ICd0cmFjZScsXG4gIC8vIG5wbSBhbmQgc3lzbG9nXG4gIGRlYnVnOiAnZGVidWcnLFxuICAvLyBucG1cbiAgdmVyYm9zZTogJ2RlYnVnJyxcbiAgLy8gbnBtXG4gIGh0dHA6ICdkZWJ1ZycsXG4gIC8vIG5wbSBhbmQgc3lzbG9nXG4gIGluZm86ICdpbmZvJyxcbiAgLy8gc3lzbG9nXG4gIG5vdGljZTogJ2luZm8nLFxuICAvLyBucG1cbiAgd2FybjogJ3dhcm4nLFxuICAvLyBzeXNsb2dcbiAgd2FybmluZzogJ3dhcm4nLFxuICAvLyBucG0gYW5kIHN5c2xvZ1xuICBlcnJvcjogJ2Vycm9yJyxcbiAgLy8gc3lzbG9nXG4gIGVtZXJnOiAnZmF0YWwnLFxuICAvLyBzeXNsb2dcbiAgYWxlcnQ6ICdmYXRhbCcsXG4gIC8vIHN5c2xvZ1xuICBjcml0OiAnZmF0YWwnLFxufTtcblxuZXhwb3J0cy5jcmVhdGVTZW50cnlXaW5zdG9uVHJhbnNwb3J0ID0gY3JlYXRlU2VudHJ5V2luc3RvblRyYW5zcG9ydDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbnN0b24uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry/node/build/cjs/integrations/winston.js\n")}};