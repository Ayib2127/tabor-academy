-- This script sets up the initial database schema and RLS policies for the Tabor Digital Academy platform.\n-- It is designed to be re-runnable on a Supabase project.\n\n-- Create tables (if they don't exist)\n-- Using IF NOT EXISTS to avoid errors if tables already exist\nCREATE TABLE IF NOT EXISTS users (\n  id uuid PRIMARY KEY DEFAULT auth.uid(),\n  email text UNIQUE NOT NULL,\n  full_name text,\n  avatar_url text,\n  bio text,\n  location text,\n  role text DEFAULT 'student' CHECK (role IN ('student', 'instructor', 'admin')),\n  created_at timestamptz DEFAULT now(),\n  updated_at timestamptz DEFAULT now()\n);\n\nCREATE TABLE IF NOT EXISTS courses (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  title text NOT NULL,\n  description text NOT NULL,\n  thumbnail_url text,\n  instructor_id uuid REFERENCES users(id),\n  level text CHECK (level IN ('beginner', 'intermediate', 'advanced')),\n  duration integer,\n  price numeric(10,2) DEFAULT 0,\n  is_published boolean DEFAULT false,\n  created_at timestamptz DEFAULT now(),\n  updated_at timestamptz DEFAULT now()\n);\n\nCREATE TABLE IF NOT EXISTS lessons (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  course_id uuid REFERENCES courses(id) ON DELETE CASCADE,\n  title text NOT NULL,\n  description text,\n  content text,\n  video_url text,\n  duration integer,\n  position integer NOT NULL,\n  is_published boolean DEFAULT false,\n  created_at timestamptz DEFAULT now(),\n  updated_at timestamptz DEFAULT now()\n);\n\nCREATE TABLE IF NOT EXISTS enrollments (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id uuid REFERENCES users(id) ON DELETE CASCADE,\n  course_id uuid REFERENCES courses(id) ON DELETE CASCADE,\n  enrolled_at timestamptz DEFAULT now(),\n  completed_at timestamptz,\n  UNIQUE(user_id, course_id)\n);\n\nCREATE TABLE IF NOT EXISTS progress (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id uuid REFERENCES users(id) ON DELETE CASCADE,\n  lesson_id uuid REFERENCES lessons(id) ON DELETE CASCADE,\n  completed boolean DEFAULT false,\n  last_position integer DEFAULT 0,\n  completed_at timestamptz,\n  created_at timestamptz DEFAULT now(),\n  updated_at timestamptz DEFAULT now(),\n  UNIQUE(user_id, lesson_id)\n);\n\nCREATE TABLE IF NOT EXISTS categories (\n    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n    name text UNIQUE NOT NULL,\n    description text,\n    created_at timestamptz DEFAULT now()\n);\n\nCREATE TABLE IF NOT EXISTS course_categories (\n    course_id uuid REFERENCES courses(id) ON DELETE CASCADE,\n    category_id uuid REFERENCES categories(id) ON DELETE CASCADE,\n    PRIMARY KEY (course_id, category_id)\n);\n\n-- Enable Row Level Security on all relevant tables\nALTER TABLE users ENABLE ROW LEVEL SECURITY;\nALTER TABLE courses ENABLE ROW LEVEL SECURITY;\
ALTER TABLE lessons ENABLE ROW LEVEL SECURITY;\nALTER TABLE enrollments ENABLE ROW LEVEL SECURITY;\nALTER TABLE progress ENABLE ROW LEVEL SECURITY;\nALTER TABLE categories ENABLE ROW LEVEL SECURITY;\nALTER TABLE course_categories ENABLE ROW LEVEL SECURITY;\n\n-- Drop policies if they exist (to avoid \"policy already exists\" errors when re-running)\nDROP POLICY IF EXISTS \"Users can view their own data\" ON users;\nDROP POLICY IF EXISTS \"Users can update their own data\" ON users;\nDROP POLICY IF EXISTS \"Authenticated users can create their own user\" ON users;\nDROP POLICY IF EXISTS \"Anyone can view published courses\" ON courses;\nDROP POLICY IF EXISTS \"Instructors can manage their own courses\" ON courses;\nDROP POLICY IF EXISTS \"Anyone can view published lessons\" ON lessons;\nDROP POLICY IF EXISTS \"Instructors can manage their own lessons\" ON lessons;\nDROP POLICY IF EXISTS \"Users can view their own enrollments\" ON enrollments;\nDROP POLICY IF EXISTS \"Users can enroll themselves\" ON enrollments;\nDROP POLICY IF EXISTS \"Users can view their own progress\" ON progress;\nDROP POLICY IF EXISTS \"Users can insert their own progress\" ON progress;\
DROP POLICY IF EXISTS \"Users can update their own progress\" ON progress;\nDROP POLICY IF EXISTS \"Users can manage their own progress\" ON progress;\nDROP POLICY IF EXISTS \"Anyone can view categories\" ON categories;\nDROP POLICY IF EXISTS \"Instructors can manage course categories\" ON course_categories;\n\n-- Create policies with unique names and correct permissions\n\n-- Users Table Policies\nCREATE POLICY \"Users can view their own data\"\n  ON users FOR SELECT\n  USING (auth.uid() = id);\n\nCREATE POLICY \"Users can update their own data\"\n  ON users FOR UPDATE\n  USING (auth.uid() = id);\n\nCREATE POLICY \"Authenticated users can create their own user\"\n  ON users FOR INSERT\n  WITH CHECK (auth.uid() = id);\n\n-- Courses Table Policies\nCREATE POLICY \"Anyone can view published courses\"\n  ON courses FOR SELECT\n  USING (is_published = true);\n\nCREATE POLICY \"Instructors can manage their own courses\"\n  ON courses FOR ALL\n  USING (auth.uid() = instructor_id);\n\n-- Lessons Table Policies\nCREATE POLICY \"Anyone can view published lessons\"\n  ON lessons FOR SELECT\n  USING (\n    is_published = true AND\n    EXISTS (\n      SELECT 1 FROM courses\n      WHERE courses.id = lessons.course_id AND courses.is_published = true\n    )\n  );\n\nCREATE POLICY \"Instructors can manage their own lessons\"\n  ON lessons FOR ALL\n  USING (\n    EXISTS (\n      SELECT 1 FROM courses\n      WHERE courses.id = lessons.course_id AND courses.instructor_id = auth.uid()\n    )\n  );\n\n-- Enrollments Table Policies\nCREATE POLICY \"Users can view their own enrollments\"\n  ON enrollments FOR SELECT\n  USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can enroll themselves\"\n  ON enrollments FOR INSERT\n  WITH CHECK (auth.uid() = user_id);\n\n-- Progress Table Policies\nCREATE POLICY \"Users can view their own progress\"\n  ON progress FOR SELECT\n  USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can insert their own progress\"\n  ON progress FOR INSERT\n  WITH CHECK (auth.uid() = user_id);\n\nCREATE POLICY \"Users can update their own progress\"\n  ON progress FOR UPDATE\n  USING (auth.uid() = user_id);\n\n-- Categories Table Policies\nCREATE POLICY \"Anyone can view categories\"\n    ON categories FOR SELECT\n    USING (true);\n\n-- Course Categories Table Policies\nCREATE POLICY \"Instructors can manage course categories\"\n    ON course_categories FOR ALL\n    USING (\n        EXISTS (\n            SELECT 1 FROM courses\n            WHERE courses.id = course_categories.course_id\n            AND courses.instructor_id = auth.uid()\n        )\n    );\n\n-- Optional: Add function to get user role for more complex RLS\n-- CREATE OR REPLACE FUNCTION public.get_user_role()\n-- RETURNS text\n-- LANGUAGE plpgsql\n-- SECURITY DEFINER\n-- AS $$\n-- DECLARE\n--   user_role text;\n-- BEGIN\n--   SELECT role INTO user_role FROM public.users WHERE id = auth.uid();\n--   RETURN user_role;\n-- END;\n-- $$; 